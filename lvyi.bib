% This file was created with JabRef 2.10.
% Encoding: UTF8


@InCollection{Abdulla2007,
  Title                    = {Regular Model Checking Without Transducers (On Efficient Verification of Parameterized Systems)},
  Author                   = {Abdulla, ParoshAziz and Delzanno, Giorgio and Henda, NoomeneBen and Rezine, Ahmed},
  Booktitle                = {TACAS 2007},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2007},
  Editor                   = {Grumberg, Orna and Huth, Michael},
  Pages                    = {721-736},
  Series                   = {LNCS},
  Volume                   = {4424},

  File                     = {:Regular model checking without transducers.pdf:PDF},
  ISSN                     = {978-3-540-71208-4},
  Journal                  = {Tools and Algorithms for the Construction and Analysis of Systems},
  Owner                    = {lvyi},
  Timestamp                = {2012.12.17},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-71209-1_56}
}

@InProceedings{Abdulla2007a,
  Title                    = {Parameterized Verification of Infinite-State Processes with Global Conditions},
  Author                   = {Abdulla, Parosh and Delzanno, Giorgio and Rezine, Ahmed},
  Booktitle                = {CAV 2007},
  Year                     = {2007},
  Editor                   = {Damm, Werner and Hermanns, Holger},
  Pages                    = {145-157},
  Publisher                = {Springer Berlin Heidelberg},
  Series                   = {LNCS},
  Volume                   = {4590},

  Abstract                 = {We present a simple and effective approximated backward reachability algorithm for parameterized systems with existentially and universally quantified global conditions. The individual processes operate on unbounded local variables ranging over the natural numbers. In addition, processes may communicate via broadcast, rendez-vous and shared variables. We apply the algorithm to verify mutual exclusion for complex protocols such as Lamportâs bakery algorithm both with and without atomicity conditions, a distributed version of the bakery algorithm, and Ricart-Agrawalaâs distributed mutual exclusion algorithm.},
  File                     = {:Parameterized Verification of Infinite-State Processes with Global Conditions .pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.27},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-73368-3_17}
}

@Article{Abdulla2009,
  Title                    = {Approximated parameterized verification of infinite-state processes with global conditions},
  Author                   = {Abdulla, ParoshAziz and Delzanno, Giorgio and Rezine, Ahmed},
  Journal                  = {Formal Methods in System Design},
  Year                     = {2009},
  Number                   = {2},
  Pages                    = {126-156},
  Volume                   = {34},

  Doi                      = {10.1007/s10703-008-0062-9},
  File                     = {:Approximated parameterized verification of infinite-state processes with global conditions.pdf:PDF},
  ISSN                     = {0925-9856},
  Keywords                 = {Parameterized systems; Unbounded processes; Over-approximation},
  Language                 = {English},
  Owner                    = {lvyi},
  Publisher                = {Springer US},
  Timestamp                = {2013.05.20},
  Url                      = {http://dx.doi.org/10.1007/s10703-008-0062-9}
}

@InCollection{Abdulla2013,
  Title                    = {All for the Price of Few},
  Author                   = {Abdulla, ParoshAziz and Haziza, Frédéric and Holík, Lukáš},
  Booktitle                = {Verification, Model Checking, and Abstract Interpretation},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2013},
  Editor                   = {Giacobazzi, Roberto and Berdine, Josh and Mastroeni, Isabella},
  Pages                    = {476-495},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7737},

  Doi                      = {10.1007/978-3-642-35873-9_28},
  File                     = {:All for the Price of Few.pdf:PDF},
  ISBN                     = {978-3-642-35872-2},
  Owner                    = {lvyi},
  Timestamp                = {2013.05.03},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-35873-9_28}
}

@InProceedings{Adir2005,
  Title                    = {A generic micro-architectural test plan approach for microprocessor verification},
  Author                   = {Adir, A. and Azatchi, H. and Bin, E. and Peled, O. and Shoikhet, K.},
  Booktitle                = {Design Automation Conference, 2005. Proceedings. 42nd},
  Year                     = {2005},
  Pages                    = {769--774},

  File                     = {:A Generic Micro-Architectural Test Plan Approach for Microprocessor Verification.pdf:PDF},
  Keywords                 = {automatic test pattern generation, circuit complexity, formal verification, integrated circuit testing, logic partitioning, logic testing, microprocessor chips, parallel architectures, automatic test pattern generation, circuit complexity, design-independent micro-architectural test, formal verification, generic micro-architectural test plan, high-end microprocessor, integrated circuit testing, logic partitioning, logic testing, micro-architectural building blocks, micro-architectural test space, micro-architecture complexity, microprocessor chips, microprocessor verification, parallel architectures, systematic partitioning},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@PhdThesis{Adve1993,
  Title                    = {Designing memory consistency models for shared-memory multiprocessors},
  Author                   = {Sarita Vikram Adve},
  Year                     = {1993},

  Address                  = {Madison, WI, USA},

  File                     = {:Designing Memory Consistency Models for Shared-Memory Multiprocessors.pdf:PDF},
  Order_no                 = {UMI Order No. GAX94-07354},
  Publisher                = {University of Wisconsin at Madison},
  Timestamp                = {2008.08.08}
}

@Article{Adve1996,
  Title                    = {Shared memory consistency models: A tutorial},
  Author                   = {Sarita V. Adve and Kourosh Gharachorloo},
  Journal                  = {IEEE Computer},
  Year                     = {1996},
  Pages                    = {66-76},
  Volume                   = {29},

  File                     = {:Shared Memory Consistency Models- A Tutorial.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@Article{Afek1993,
  Title                    = {Lazy caching},
  Author                   = {Afek, Yehuda and Brown, Geoffrey and Merritt, Michael},
  Journal                  = {ACM Trans. Program. Lang. Syst.},
  Year                     = {1993},
  Number                   = {1},
  Pages                    = {182--205},
  Volume                   = {15},

  File                     = {:Lazy caching.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2009.05.02}
}

@InProceedings{Agrawal1989,
  Title                    = {Efficient management of transitive relationships in large data and knowledge bases},
  Author                   = {Agrawal, R. and Borgida, A. and Jagadish, H. V.},
  Booktitle                = {Proceedings of the 1989 ACM SIGMOD international conference on Management of data},
  Year                     = {1989},

  Address                  = {Portland, Oregon, United States},
  Pages                    = {253--262},
  Publisher                = {ACM},

  Doi                      = {10.1145/67544.66950},
  Owner                    = {lvyi},
  Timestamp                = {2012.02.24}
}

@Article{Ahn2012,
  Title                    = {Improving System Energy Efficiency with Memory Rank Subsetting},
  Author                   = {Ahn, Jung Ho and Jouppi, Norman P. and Kozyrakis, Christos and Leverich, Jacob and Schreiber, Robert S.},
  Journal                  = {ACM Trans. Archit. Code Optim.},
  Year                     = {2012},

  Month                    = mar,
  Number                   = {1},
  Pages                    = {4:1--4:28},
  Volume                   = {9},

  __markedentry            = {[lvyi:]},
  Acmid                    = {2133386},
  Address                  = {New York, NY, USA},
  Articleno                = {4},
  Doi                      = {10.1145/2133382.2133386},
  ISSN                     = {1544-3566},
  Issue_date               = {March 2012},
  Keywords                 = {DRAM, Memory system, mini-rank, multicore DIMM, overfetch, rank subsetting},
  Numpages                 = {28},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2014.10.16},
  Url                      = {http://doi.acm.org/10.1145/2133382.2133386}
}

@Article{Aktouf2002,
  Title                    = {A complete strategy for testing an on-chip multiprocessor architecture},
  Author                   = {Aktouf, C.},
  Journal                  = {Design \& Test of Computers, IEEE},
  Year                     = {2002},
  Number                   = {1},
  Pages                    = {18--28},
  Volume                   = {19},

  Booktitle                = {Design \& Test of Computers, IEEE},
  File                     = {:A complete strategy for testing an on-chip multiprocessor architecture.pdf:PDF},
  ISSN                     = {0740-7475},
  Keywords                 = {computer testing, multiprocessing systems, network routing, parallel architectures, parallel machines, random-access storage, RAM block testing, distributed processor testing, fine-grain massively parallel machine, on-chip multiprocessor architecture testing, router testing},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Alglave2009,
  Title                    = {The Semantics of Power and ARM Multiprocessor Machine Code},
  Author                   = {Alglave, Jade and Fox, Anthony and Ishtiaq, Samin and Myreen, Magnus O. and Sarkar, Susmit and Sewell, Peter and Nardelli, Francesco Zappa},
  Booktitle                = {Proceedings of the 4th Workshop on Declarative Aspects of Multicore Programming},
  Year                     = {2009},

  Address                  = {New York, NY, USA},
  Pages                    = {13--24},
  Publisher                = {ACM},
  Series                   = {DAMP '09},

  Acmid                    = {1481842},
  Doi                      = {10.1145/1481839.1481842},
  File                     = {:The semantics of power and ARM multiprocessor machine code.pdf:PDF},
  ISBN                     = {978-1-60558-417-1},
  Keywords                 = {arm, powerpc, relaxed memory models, semantics},
  Location                 = {Savannah, GA, USA},
  Numpages                 = {12},
  Owner                    = {lvyi},
  Timestamp                = {2014.01.21},
  Url                      = {http://doi.acm.org/10.1145/1481839.1481842}
}

@InCollection{Alglave2013,
  Title                    = {Software Verification for Weak Memory via Program Transformation},
  Author                   = {Alglave, Jade and Kroening, Daniel and Nimal, Vincent and Tautschnig, Michael},
  Booktitle                = {Programming Languages and Systems},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2013},
  Editor                   = {Felleisen, Matthias and Gardner, Philippa},
  Pages                    = {512-532},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7792},

  Doi                      = {10.1007/978-3-642-37036-6_28},
  File                     = {:Software Verification for Weak Memory via Program Transformation.pdf:PDF},
  ISBN                     = {978-3-642-37035-9},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-37036-6_28}
}

@InCollection{Alglave2011,
  Title                    = {Litmus: Running Tests against Hardware},
  Author                   = {Alglave, Jade and Maranget, Luc and Sarkar, Susmit and Sewell, Peter},
  Booktitle                = {Tools and Algorithms for the Construction and Analysis of Systems},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2011},
  Editor                   = {Abdulla, ParoshAziz and Leino, K.RustanM.},
  Pages                    = {41-44},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {6605},

  Doi                      = {10.1007/978-3-642-19835-9_5},
  File                     = {:Litmus- Running Tests against Hardware.pdf:PDF},
  ISBN                     = {978-3-642-19834-2},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-19835-9_5}
}

@Other{Alglave2010,
  Title                    = {Fences in Weak Memory Models: Computer Aided Verification},
  Author                   = {Alglave, Jade and Maranget, Luc and Sarkar, Susmit and Sewell, Peter},
  Booktitle                = {Lecture Notes in Computer Science},
  Editor                   = {Touili, Tayssir and Cook, Byron and Jackson, Paul},
  File                     = {:Fences in Weak Memory Models.pdf:PDF},
  ISSN                     = {978-3-642-14294-9},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Pages                    = {258--272},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2012.10.07},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-14295-6_25},
  Volume                   = {6174},
  Year                     = {2010}
}

@Article{Alkassar2009,
  Title                    = {Balancing the Load},
  Author                   = {Alkassar, Eyad and Hillebrand, Mark and Leinenbach, Dirk and Schirmer, Norbert and Starostin, Artem and Tsyban, Alexandra},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {389--454},
  Volume                   = {42},

  Abstract                 = {We have developed a stack of semantics for a high-level C-like language and low-level assembly code, which has been carefully crafted to support the pervasive verification of system software. It can handle mixed-language implementations and concurrently operating devices, and permits the transferral of properties to the target architecture while obeying its resource restrictions. We demonstrate the applicability of our framework by proving the correct virtualization of user memory in our microkernel, which implements demand paging. This verification target is of particular interest because it has a relatively simple top-level specification and it exercises all parts of our semantics stack. At the bottom level a disk driver written in assembly implements page transfers via a swap disk. A page-fault handler written in C uses the driver to implement the paging algorithm. It guarantees that a step of the currently executing user can be simulated at the architecture level. Besides the mere theoretical and technical difficulties the project also bore the social challenge to manage the large verification effort, spread over many sites and people, concurrently contributing to and maintaining a common theory corpus. We share our experiences and elaborate on lessons learned.},
  File                     = {:Balancing the Load.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9123-z}
}

@InProceedings{Alur1996,
  Title                    = {Model-checking of correctness conditions for concurrent objects},
  Author                   = {Alur, R. and McMillan, K. and Peled, D.},
  Year                     = {1996},
  Month                    = {Jul},
  Pages                    = {219-228},

  Abstract                 = {The notions of serializability, linearizability and sequential consistency are used in the specification of concurrent systems. We show that the model checking problem for each of these properties can be cast in terms of the containment of one regular language in another regular language shuffled using a semi-commutative alphabet. The three model checking problems are shown to be, respectively, in PSPACE, in EXPSPACE, and undecidable},
  Doi                      = {10.1109/LICS.1996.561322},
  File                     = {:Model-checking of correctness conditions for concurrent objects.pdf:PDF},
  Journal                  = {Logic in Computer Science, 1996. LICS '96. Proceedings., Eleventh Annual IEEE Symposium on},
  Keywords                 = {decidability, formal languages, formal specification, parallel programmingEXPSPACE, PSPACE, concurrent objects, linearizability, model checking problem, regular language, semi-commutative alphabet, serializability, specification, undecidable},
  Timestamp                = {2008.08.08}
}

@Article{Apt1986,
  Title                    = {Limits for automatic verification of finite-state concurrent systems},
  Author                   = {Apt, K. R. and Kozen, D. C.},
  Journal                  = {Inf. Process. Lett.},
  Year                     = {1986},
  Number                   = {6},
  Pages                    = {307-309},
  Volume                   = {22},

  Comment                  = {Limits for automatic verification of finite-state concurrent systems
8889},
  File                     = {:Limits for Automatic Verification of Finite-State Concurrent Systems.pdf:PDF},
  ISSN                     = {0020-0190},
  Owner                    = {lvyi},
  Refid                    = {39},
  Timestamp                = {2008.06.11}
}

@Other{Arkoudas2004,
  Title                    = {Verifying a File System Implementation},
  Abstract                 = {We present a correctness proof for a basic file system implementation. This implementation contains key elements of standard Unix file systems such as inodes and fixed-size disk blocks. We prove the implementation correct by establishing a simulation relation between the specification of the file system (which models the file system as an abstract map from file names to sequences of bytes) and its implementation (which uses fixed-size disk blocks to store the contents of the files). We used the Athena proof system to represent and validate our proof. Our experience indicates that Athena’s use of block-structured natural deduction, support for structural induction and proof abstraction, and seamless integration with high-performance automated theorem provers were essential to our ability to successfully manage a proof of this size.},
  Author                   = {Arkoudas, Konstantine and Zee, Karen and Kuncak, Viktor and Rinard, Martin},
  File                     = {:Verifying a File System Implementation.pdf:PDF},
  Journal                  = {Formal Methods and Software Engineering},
  Owner                    = {lvyi},
  Pages                    = {373--390},
  Timestamp                = {2009.06.11},
  Url                      = {http://www.springerlink.com/content/lu8j4gdp6t1fjacr},
  Year                     = {2004}
}

@InCollection{Arons2001,
  Title                    = {Parameterized Verification with Automatically Computed Inductive Assertions},
  Author                   = {Arons, Tamarah and Pnueli, Amir and Ruah, Sitvanit and Xu, Ying and Zuck, Lenore},
  Booktitle                = {Lecture Notes in Computer Science},
  Publisher                = {Springer Berlin / Heidelberg},
  Year                     = {2001},
  Editor                   = {Berry, GÃ©rard and Comon, Hubert and Finkel, Alain},
  Pages                    = {221--234},
  Volume                   = {2102},

  Abstract                 = {The paper presents a method, called the method of verification by invisible invariants , for the automatic verification of a large class of parameterized systems. The method is based on the automatic calculation of candidate inductive assertions and checking for their inductiveness, using symbolic model-checking techniques for both tasks. First, we show how to use model-checking techniques over finite (and small) instances of the parameterized system in order to derive candidates for invariant assertions. Next, we show that the premises of the standard deductive INV rule for proving invariance properties can be automatically resolved by finite-state ( BDD -based) methods with no need for interactive theorem proving. Combining the automatic computation of invariants with the automatic resolution of the VCs (verification conditions) yields a (necessarily) incomplete but fully automatic sound method for verifying large classes of parameterized systems. The generated invariants can be transferred to the VC-validation phase without ever been examined by the user, which explains why we refer to them as âinvisibleâ. The efficacy of the method is demonstrated by automatic verification of diverse parameterized systems in a fully automatic and efficient manner.},
  File                     = {:Parameterized Verification with Automatically Computed Inductive Assertions.pdf:PDF},
  ISSN                     = {978-3-540-42345-4},
  Owner                    = {lvyi},
  Timestamp                = {2011.09.20},
  Url                      = {http://dx.doi.org/10.1007/3-540-44585-4_19}
}

@InProceedings{Arvind2006,
  Title                    = {Memory Model = Instruction Reordering + Store Atomicity},
  Author                   = {Arvind, Arvind and Maessen, Jan-Willem},
  Booktitle                = {Proceedings of the 33rd annual international symposium on Computer Architecture},
  Year                     = {2006},
  Pages                    = {29--40},
  Publisher                = {IEEE Computer Society},

  File                     = {:Memory Model = Instruction Reordering + Store Atomicity.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26}
}

@InCollection{Atig2012,
  Title                    = {What’s Decidable about Weak Memory Models?},
  Author                   = {Atig, MohamedFaouzi and Bouajjani, Ahmed and Burckhardt, Sebastian and Musuvathi, Madanlal},
  Booktitle                = {Programming Languages and Systems},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2012},
  Editor                   = {Seidl, Helmut},
  Pages                    = {26-46},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7211},

  Doi                      = {10.1007/978-3-642-28869-2_2},
  File                     = {:What is Decidable about Weak Memory Models.pdf:PDF},
  ISBN                     = {978-3-642-28868-5},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-28869-2_2}
}

@InProceedings{Atig2010,
  Title                    = {On the verification problem for weak memory models},
  Author                   = {Atig, Mohamed Faouzi and Bouajjani, Ahmed and Burckhardt, Sebastian and Musuvathi, Madanlal},
  Booktitle                = {Proceedings of the 37th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  Year                     = {2010},

  Address                  = {New York, NY, USA},
  Pages                    = {7--18},
  Publisher                = {ACM},
  Series                   = {POPL '10},

  Acmid                    = {1706303},
  Doi                      = {10.1145/1706299.1706303},
  File                     = {:On the verification problem for weak memory models.pdf:PDF},
  ISBN                     = {978-1-60558-479-9},
  Keywords                 = {infinite state systems, lossy channel systems, program verification, relaxed memory models},
  Location                 = {Madrid, Spain},
  Numpages                 = {12},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://doi.acm.org/10.1145/1706299.1706303}
}

@InProceedings{Atig2010a,
  Title                    = {On the verification problem for weak memory models},
  Author                   = {Atig, Mohamed Faouzi and Bouajjani, Ahmed and Burckhardt, Sebastian and Musuvathi, Madanlal},
  Booktitle                = {Proceedings of the 37th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  Year                     = {2010},

  Address                  = {Madrid, Spain},
  Pages                    = {7--18},
  Publisher                = {ACM},

  Doi                      = {10.1145/1706299.1706303},
  File                     = {:On the verification problem for weak memory models.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.03}
}

@InProceedings{Austin1999,
  Title                    = {DIVA: A Reliable Substrate for Deep Submicron Microarchitecture Design},
  Author                   = {Todd M. Austin},
  Year                     = {1999},

  Address                  = {Los Alamitos, CA, USA},
  Pages                    = {196},
  Publisher                = {IEEE Computer Society},
  Volume                   = {0},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/MICRO.1999.809458},
  File                     = {:DIVA- A Reliable Substrate for Deep Submicron Microarchitecture Design.pdf:PDF},
  ISSN                     = {1072-4451},
  Journal                  = {Microarchitecture, IEEE/ACM International Symposium on},
  Timestamp                = {2008.08.08}
}

@Article{Awedh2006,
  Title                    = {Termination Criteria for Bounded Model Checking: Extensions and Comparison},
  Author                   = {Awedh, M. and Somenzi, F.},
  Journal                  = {ELECTRONIC NOTES IN THEORETICAL COMPUTER SCIENCE},
  Year                     = {2006},
  Number                   = {1},
  Pages                    = {51-66--},
  Volume                   = {144},

  Comment                  = {Termination Criteria for Bounded Model Checking: Extensions and Comparison
192976607
1571-0661},
  Owner                    = {lvyi},
  Refid                    = {67},
  Timestamp                = {2008.06.11}
}

@InProceedings{Balaban2006,
  Title                    = {Ranking Abstraction of Recursive Programs},
  Author                   = {Balaban, Ittai and Cohen, Ariel and Pnueli, Amir},
  Year                     = {2006},
  Pages                    = {267--281},

  Abstract                 = {We present a method for model-checking of safety and liveness properties over procedural programs, by combining state and ranking abstractions with procedure summarization. Our abstraction is an augmented finitary abstraction [KP00,BPZ05], meaning that a concrete procedural program is first augmented with a well founded ranking function, and then abstracted by a finitary state abstraction. This results in a procedural abstract program with strong fairness requirements which is then reduced to a finite-state fair discrete system (fds) using procedure summarization. This fds is then model checked for the property.},
  File                     = {:Ranking Abstraction of Recursive Programs.pdf:PDF},
  Journal                  = {Verification, Model Checking, and Abstract Interpretation},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.06},
  Url                      = {http://dx.doi.org/10.1007/11609773_18}
}

@InProceedings{Balaban2005,
  Title                    = {Ranking Abstraction as Companion to Predicate Abstraction},
  Author                   = {Balaban, Ittai and Pnueli, Amir and Zuck, Lenore},
  Year                     = {2005},
  Pages                    = {1--12},

  Abstract                 = {Predicate abstraction has become one of the most successful methodologies for proving safety properties of programs. Recently, several abstraction methodologies have been proposed for proving liveness properties. This paper studies “ranking abstraction” where a program is augmented by a nonconstraining progress monitor, and further abstracted by predicate-abstraction, to allow for automatic verification of progress properties. Unlike most liveness methodologies, the augmentation does not require a complete ranking function that is expected to decrease with each step. Rather, the inputs are component rankings from which a complete ranking function may be formed.},
  File                     = {:Ranking Abstraction as Companion to Predicate Abstraction.pdf:PDF},
  Journal                  = {Formal Techniques for Networked and Distributed Systems - FORTE 2005},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.06},
  Url                      = {http://dx.doi.org/10.1007/11562436_1}
}

@InProceedings{Balaban2005a,
  Title                    = {Shape Analysis by Predicate Abstraction},
  Author                   = {Balaban, Ittai and Pnueli, Amir and Zuck, Lenore D.},
  Year                     = {2005},
  Pages                    = {164--180},

  Abstract                 = {The paper presents an approach for shape analysis based on predicate abstraction. Using a predicate base that involves reachability relations between program variables pointing into the heap, we are able to analyze functional properties of programs with destructive heap updates, such as list reversal and various in-place list sorts. The approach allows verification of both safety and liveness properties. The abstraction we use does not require any abstract representation of the heap nodes (e.g. abstract shapes), only reachability relations between the program variables. The computation of the abstract transition relation is precise and automatic yet does not require the use of a theorem prover. Instead, we use a small model theorem to identify a truncated (small) finite-state version of the program whose abstraction is identical to the abstraction of the unbounded-heap version of the same program. The abstraction of the finite-state version is then computed by BDD techniques. For proving liveness properties, we augment the original system by a well-founded ranking function, which is abstracted together with the system. Well-foundedness is then abstracted into strong fairness (compassion). We show that, for a restricted class of programs that still includes many interesting cases, the small model theorem can be applied to this joint abstraction. Independently of the application to shape-analysis examples, we demonstrate the utility of the ranking abstraction method and its advantages over the direct use of ranking functions in a deductive verification of the same property.},
  File                     = {:Shape Analysis by Predicate Abstraction.pdf:PDF},
  Journal                  = {Verification, Model Checking, and Abstract Interpretation},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.23},
  Url                      = {http://www.springerlink.com/content/dguumhvypv50aj2n}
}

@Article{Ball2003,
  Title                    = {Boolean and Cartesian abstraction for model checking C programs},
  Author                   = {Ball, Thomas and Podelski, Andreas and Rajamani, Sriram K.},
  Journal                  = {International Journal on Software Tools for Technology Transfer (STTT)},
  Year                     = {2003},

  Month                    = nov,
  Number                   = {1},
  Pages                    = {49--58},
  Volume                   = {5},

  Abstract                 = {We show how to attack the problem of model checking a C program with recursive procedures using an abstraction that we formally define as the composition of the Boolean and the Cartesian abstractions. It is implemented through a source-to-source transformation into a &#8216;Boolean&#8217; C program; we give an algorithm to compute the transformation with a cost that is exponential in its theoretical worst-case complexity but feasible in practice.},
  File                     = {:Boolean and Cartesian abstraction for model checking C programs.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.10.08},
  Url                      = {http://dx.doi.org/10.1007/s10009-002-0095-0}
}

@InProceedings{Ball2001,
  Title                    = {Automatically validating temporal safety properties of interfaces},
  Author                   = {Ball, Thomas and Rajamani, Sriram},
  Year                     = {2001},
  Pages                    = {102--122},

  Abstract                 = {We present a process for validating temporal safety properties of software that uses a well-defined interface. The process requires only that the user state the property of interest. It then automatically creates abstractions of C code using iterative refinement, based on the given property. The process is realized in the SLAM toolkit, which consists of a model checker, predicate abstraction tool and predicate discovery tool. We have applied the SLAM toolkit to a number of Windows NT device drivers to validate critical safety properties such as correct locking behavior. We have found that the process converges on a set of predicates powerful enough to validate properties in just a few iterations.},
  File                     = {:Automatically validating temporal safety properties of interfaces.pdf:PDF},
  Journal                  = {Model Checking Software},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07},
  Url                      = {http://dx.doi.org/10.1007/3-540-45139-0_7}
}

@Article{Balser2002,
  Title                    = {Verifying Concurrent Systems with Symbolic Execution},
  Author                   = {Balser, Michael and Duelli, Christoph and Reif, Wolfgang and Schellhorn, Gerhard},
  Journal                  = {Journal of Logic and Computation},
  Year                     = {2002},
  Number                   = {4},
  Pages                    = {549--560},
  Volume                   = {12},

  Abstract                 = {Current techniques for interactively proving temporal properties of concurrent systems translate transition systems into temporal formulas by introducing program counter variables. Proofs are not intuitive, because control flow is not explicitly considered. For sequential programs symbolic execution is a very intuitive, interactive proof strategy. In this paper we will adopt this technique for parallel programs. Properties are formulated in interval temporal logic. An inplementation in the interactive theorem prover KIV has shown that this technique offers a high degree of automation and allows simple, local invariants.},
  Date                     = {August 1, 2002},
  Doi                      = {10.1093/logcom/12.4.549},
  File                     = {:Verifying Concurrent Systems with Symbolic Execution.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.03},
  Url                      = {http://logcom.oxfordjournals.org/content/12/4/549.abstract}
}

@Article{Barnes2010,
  Title                    = {Checking process-oriented operating system behaviour using CSP and refinement},
  Author                   = {Barnes, Frederick R.M. and Ritson, Carl G.},
  Journal                  = {SIGOPS Oper. Syst. Rev.},
  Year                     = {2010},
  Number                   = {4},
  Pages                    = {45--49},
  Volume                   = {43},

  Doi                      = {10.1145/1713254.1713265},
  File                     = {:Checking process-oriented operating system behaviour using CSP and refinement.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2011.10.10}
}

@Other{Baswana2008,
  Title                    = {Implied Set Closure and Its Application to Memory Consistency Verification: Computer Aided Verification},
  Abstract                 = {Hangal et. al. [3] have developed a procedure to check if an instance of the execution of a shared memory multiprocessor program, is consistent with the Total Store Order (TSO) memory consistency model. They also devised an algorithm based on this procedure with time complexity O ( n 5 ), where n is the total number of instructions in the program. Roy et. al. [6] have improved the implementation of the procedure and achieved O ( n 4 ) time complexity. We have identified the bottleneck in these algorithms as a graph problem of independent interest, called implied-set closure (ISC) problem. In this paper we propose an algorithm for ISC problem and show that using this algorithm, Hangal鈥檚 consistency checking procedure can be implemented with O ( n 3 ) time complexity. We also experimentally show that the new algorithm is significantly faster than Roy鈥檚 algorithm.},
  Author                   = {Baswana, Surender and Mehta, Shashank and Powar, Vishal},
  Booktitle                = {Lecture Notes in Computer Science},
  Editor                   = {Gupta, Aarti and Malik, Sharad},
  File                     = {:Implied Set Closure and Its Application to Memory Consistency Verification.pdf:PDF},
  ISSN                     = {978-3-540-70543-7},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Pages                    = {94--106},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2012.10.03},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-70545-1_11},
  Volume                   = {5123},
  Year                     = {2008}
}

@Other{Bataller1997,
  Title                    = {Synchronized DSM models},
  Abstract                 = {Memory accesses form a well understood paradigm for developing concurrent applications. Distributed Shared Memory systems, enable the creation of distributed applications based on shared memory accesses. A DSM system is characterized by the memory model it uses to perform memory accesses. There have been numerous models proposed over the years, and until recently there has been little attempt to provide a common formal framework to study their properties. DSM models can be roughly classified into synchronized (those which, in addition to usual read-write accesses, use special synchronization operations) and non-synchronized. In this paper we focus on the formalization of synchronized DSM models, extending a previous work on non-synchronized models.},
  Author                   = {Bataller, Jordi and Bernabeu, Josep},
  File                     = {:Synchronized DSM models.pdf:PDF},
  Journal                  = {Euro-Par'97 Parallel Processing},
  Owner                    = {lvyi},
  Pages                    = {468--475},
  Timestamp                = {2009.05.03},
  Url                      = {http://dx.doi.org/10.1007/BFb0002771},
  Year                     = {1997}
}

@Article{Batten2009,
  Title                    = {Building Many-Core Processor-to-DRAM Networks with Monolithic CMOS Silicon Photonics},
  Author                   = {Batten, Christopher},
  Journal                  = {IEEE Micro},
  Year                     = {2009},

  Month                    = aug,
  Pages                    = {8--21},
  Volume                   = {29},

  Editor                   = {Joshi, Ajay and Orcutt, Jason and Khilo, Anatol and Moss, Benjamin and Holzwarth, Charles W. and Popovic, Milos A. and Li, Hanqing and Smith, Henry I. and Hoyt, Judy L. and Kartner, Franz X. and Ram, Rajeev J. and Stojanovic, Vladimir and Asanovic, Krste},
  File                     = {:Building Many-Core Processor-to-DRAM Networks with Monolithic CMOS Silicon Photonics.pdf:PDF},
  ISSN                     = {0272-1732},
  Keywords                 = {silicon-photonic technology, multicore/many-core processors, on-chip interconnection networks, processor-to-DRAM networks, hardware},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.03},
  Url                      = {http://doi.ieeecomputersociety.org/10.1109/MM.2009.60}
}

@InProceedings{Beers2008,
  Title                    = {Pre-RTL formal verification: an intel experience},
  Author                   = {Beers, Robert},
  Booktitle                = {Proceedings of the 45th annual Design Automation Conference},
  Year                     = {2008},

  Address                  = {Anaheim, California},
  Pages                    = {806--811},
  Publisher                = {ACM},

  File                     = {:Pre-RTL formal verification- an intel experience.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@Patent{Beers2008a,
  Title                    = {Non-speculative distributed conflict resolution for a cache coherency protocol},
  Nationality              = {US},
  Number                   = {7,434,006},
  Year                     = {2008},
  Author                   = {Beers, R.H. and Hum, H.H.J. and Goodman, J.R.},
  Day                      = {17},
  Month                    = {oct},
  Note                     = {US Patent 7,434,006},

  Publisher                = {Google Patents},
  Timestamp                = {2008.08.08}
}

@Other{Beers2005,
  Title                    = {Non-speculative distributed conflict resolution for a cache coherency protocol},
  Author                   = {Beers, Robert H. (Hillsboro, OR, US), Hum, Herbert H. J. (Portland, OR, US), Goodman, James R. (Madison, WI, US)},
  Month                    = {October},
  Number                   = {6954829},
  Timestamp                = {2012.10.07},
  Url                      = {http://www.freepatentsonline.com/6954829.html},
  Year                     = {2005}
}

@InProceedings{Behm2004,
  Title                    = {Industrial Experience with Test Generation Languages for Processor Verification},
  Author                   = {Michael Behm and John Ludden and Yossi Lichtenstein and Michal Rimon and Michael Vinov},
  Year                     = {2004},

  Address                  = {Los Alamitos, CA, USA},
  Pages                    = {36-40},
  Publisher                = {IEEE Computer Society},
  Volume                   = {0},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/SAC.2004.1322433},
  File                     = {:Industrial Experience with Test Generation Languages for Processor Verification.pdf:PDF},
  Journal                  = {Design Automation Conference},
  Timestamp                = {2008.11.21}
}

@InProceedings{Bensalem1996,
  Title                    = {Powerful techniques for the automatic generation of invariants},
  Author                   = {Bensalem, Saddek and Lakhnech, Yassine and Saidi, Hassen},
  Year                     = {1996},
  Pages                    = {323--335},

  Abstract                 = {When proving invariance properties of programs one is faced with two problems. The first problem is related to the necessity of proving tautologies of the considered assertion language, whereas the second manifests in the need of finding sufficiently strong invariants. This paper focuses on the second problem and describes techniques for the automatic generation of invariants. The first set of these techniques is applicable on sequential transition systems and allows to derive so-called local invariants, i.e. predicates which are invariant at some control location. The second is applicable on networks of transition systems and allows to combine local invariants of the sequential components to obtain local invariants of the global systems. Furthermore, a refined strengthening technique is presented that allows to avoid the problem of size-increase of the considered predicates which is the main drawback of the usual strengthening technique. The proposed techniques are illustrated by examples.},
  File                     = {:Powerful techniques for the automatic generation of invariants.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07},
  Url                      = {http://dx.doi.org/10.1007/3-540-61474-5_80}
}

@InProceedings{Bershad1993,
  Title                    = {The Midway distributed shared memory system},
  Author                   = {Bershad, B.N. and Zekauskas, M.J. and Sawdon, W.A.},
  Booktitle                = {Compcon Spring '93, Digest of Papers.},
  Year                     = {1993},
  Pages                    = {528-537},

  Doi                      = {10.1109/CMPCON.1993.289730},
  File                     = {:The Midway distributed shared memory system.pdf:PDF},
  Keywords                 = {data integrity;distributed memory systems;parallel programming;shared memory systems;ATM-based cluster;C;CM-5;DSM;EC;Midway distributed shared memory system;Paragon;consistency protocols;distributed shared memory multicomputer;entry consistency;higher performance implementations;novel memory consistency model;programming system;pure entry consistent programs;shared data;synchronization object;Computer science;Contracts;Delay;Frequency synchronization;Information science;Parallel programming;Program processors;Programming profession;Protocols;US Government},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.29}
}

@InProceedings{Beyer2007,
  Title                    = {Path invariants},
  Author                   = {Beyer, Dirk and Henzinger, Thomas A. and Majumdar, Rupak and Rybalchenko, Andrey},
  Booktitle                = {Proceedings of the 2007 ACM SIGPLAN conference on Programming language design and implementation},
  Year                     = {2007},

  Address                  = {San Diego, California, USA},
  Pages                    = {300--309},
  Publisher                = {ACM},

  File                     = {:Path invariants.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.31}
}

@InProceedings{Bhatia2007,
  Title                    = {Leveraging semi-formal and sequential equivalence techniques for multimedia SOC performance validation},
  Author                   = {Bhatia, Lovleen and Gaur, Jayesh and Tiwari, Praveen and Mitra, Raj S. and Matange, Sunil H.},
  Booktitle                = {Proceedings of the 44th annual conference on Design automation},
  Year                     = {2007},

  Address                  = {San Diego, California},
  Pages                    = {69--74},
  Publisher                = {ACM},

  File                     = {:Leveraging Semi Formal and Sequential Equivalence Techniques for Multimedia SoC Performance Validation.PDF:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Biere1999,
  Title                    = {Symbolic Model Checking without BDDs},
  Author                   = {Biere, A. and Cimatti, A. and Clarke, E. and Zhu, Y.},
  Year                     = {1999},
  Number                   = {1579},
  Pages                    = {193--},

  Comment                  = {Symbolic Model Checking without BDDs
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {71},
  Timestamp                = {2008.06.11}
}

@InProceedings{Biere1999a,
  Title                    = {Symbolic Model Checking using SAT Procedures Instead of BDDs},
  Author                   = {Biere, A. and Cimatti, A. and Clarke, E. M. and Fujita, M. and Zhu, Y.},
  Year                     = {1999},
  Number                   = {36},
  Pages                    = {317-320--},

  Comment                  = {Symbolic Model Checking using SAT Procedures Instead of BDDs
211046739
0738-100X},
  Journal                  = {DESIGN AUTOMATION CONFERENCE},
  Owner                    = {lvyi},
  Refid                    = {68},
  Timestamp                = {2008.06.11}
}

@Article{Biere2003,
  Title                    = {Bounded Model Checking},
  Author                   = {Biere, A. and Cimatti, A. and Clarke, E. M. and Strichman, O. and Zhu, Y.},
  Journal                  = {ADVANCES IN COMPUTERS},
  Year                     = {2003},
  Pages                    = {118-149--},
  Volume                   = {58},

  Comment                  = {Bounded Model Checking
192317493
0065-2458},
  File                     = {:Bounded Model Checking.pdf:PDF},
  Owner                    = {lvyi},
  Refid                    = {69},
  Timestamp                = {2008.06.11}
}

@InProceedings{Bingham2008,
  Title                    = {Automatic Non-Interference Lemmas for Parameterized Model Checking},
  Author                   = {Bingham, J.},
  Booktitle                = {Formal Methods in Computer-Aided Design, 2008. FMCAD '08.},
  Year                     = {2008},
  Pages                    = {1--8},

  Abstract                 = {<i>Parameterized</i> <i>model</i> <i>checking</i> refers to any method that extends traditional, finite-state model checking to handle systems with an arbitrary number of processes. One popular approach to this problem uses abstraction and so-called <i>guard</i> <i>strengthening</i>. Here a small number of processes remain intact, while the rest are abstracted away. This initially causes counter-examples, but the user can write <i>non-interference</i> <i>lemmas</i>, which eliminate spurious behavior by the abstracted processes. The technique is sound in that if the user writes a lemma that is not invariant, the proof will never succeed. Though the non-interference lemmas are typically much simpler than writing a full inductive invariant, there is still a non-trivial amount of human insight needed to analysis counter-examples and concoct the lemmas. In our work, we show how the process of inferring appropriate non-interference lemmas can be automated. Our approach is based on a very general theory that simply assumes a <i>Galois</i> <i>connection</i> between the concrete and abstract systems. Effectively, we start with the non-interference conjecture <i>false</i>, and iteratively weaken it until it is provable using the Galois connection. This produces the <i>strongest</i> non-interference lemma provable in the Galois connection. Hence, if the approach fails to prove the property, then no human lemma would help, since it is the strongest possible lemma. We instantiate this theory to a class of symmetric parameterized systems, and show how BDDs can be used to perform all involved computations. We also show how BDD-blow up that can arise when concretizing can be mitigated by using a sound over-approximation. We successfully applied the resulting tool to three parameterized verification benchmarks: the GERMAN protocol with data path, the GERMAN2004 protocol, and the FLASH protocol. To our knowledge, this is the first time automatic parameterized model checking has been -},
  File                     = {:Automatic Non-Interference Lemmas for Parameterized Model Checking.pdf:PDF},
  Keywords                 = {finite state machines, formal verification, FLASH protocol, GERMAN2004 protocol, Galois connection, automatic noninterference lemmas, automatic parameterized model checking, finite-state model checking, guard strengthening},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.13}
}

@InProceedings{Bingham2009,
  Title                    = {Industrial strength refinement checking},
  Author                   = {Bingham, J. and Erickson, J. and Singh, G. and Andersen, F.},
  Booktitle                = {Formal Methods in Computer-Aided Design, 2009. FMCAD 2009},
  Year                     = {2009},
  Pages                    = {180--183},

  Abstract                 = {This paper discusses a methodology used on an industrial hardware development project to validate various cache-coherence protocol components. The idea is to use a high level model (HLM) written in Murphi for model checking purposes, and then to use the HLM as a checker during dynamic (i.e. simulation based-) validation of the RTL. Such a checker requires a formal notion of what it means for the RTL to implement the HLM. Due to RTL pipelining, concurrency, and different RTL/HLM semantics, an appropriate notion is non-obvious. We employ a notion we call behavioral refinement, and describe a methodology for creating refinement checkers. A novel aspect of our methodology is that all Â¿ingredientsÂ¿ are specified using System Verilog (SV): even the Murphi model itself is compiled into SV. Thus any off-the-shelf SV simulation engine can be used. We report the successful use of our refinement checkers to catch bugs in a real project at Intel and give an example illustrating our methodology.},
  File                     = {:Industrial Strength Refinement Checking.pdf:PDF},
  Keywords                 = {formal logic, formal verification, hardware description languages, optimising compilers, RTL behavioral refinement, RTL validation, cache-coherence protocol components, high level model, industrial strength refinement checking, model checking, register transfer level, system Verilog},
  Owner                    = {lvyi},
  Timestamp                = {2010.02.25}
}

@InProceedings{Bingham2003,
  Title                    = {Toward a decidable notion of sequential consistency},
  Author                   = {Jesse D. Bingham and Anne Condon and Alan J. Hu},
  Booktitle                = {SPAA '03: Proceedings of the fifteenth annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {2003},

  Address                  = {New York, NY, USA},
  Pages                    = {304--313},
  Publisher                = {ACM},

  Doi                      = {http://doi.acm.org/10.1145/777412.777467},
  File                     = {:Toward a decidable notion of sequential consistency.pdf:PDF},
  ISBN                     = {1-58113-661-7},
  Location                 = {San Diego, California, USA},
  Timestamp                = {2008.08.08}
}

@Other{BjA¸rner1996,
  Title                    = {STeP- Deductive-algorithmic verification of reactive and real-time systems},
  __markedentry            = {[lvyi]},
  Author                   = {BjÃ¸rner, Nikolaj and Browne, Anca and Chang, Eddie and ColÃ³n, Michael and Kapur, Arjun and Manna, Zohar and Sipma, Henny and Uribe, TomÃ¡s},
  Booktitle                = {Lecture Notes in Computer Science},
  Editor                   = {Alur, Rajeev and Henzinger, Thomas},
  File                     = {:STeP- Deductive-algorithmic verification of reactive and real-time systems.pdf:PDF},
  Owner                    = {lvyi},
  Pages                    = {415--418},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2011.06.13},
  Url                      = {http://dx.doi.org/10.1007/3-540-61474-5_92},
  Volume                   = {1102},
  Year                     = {1996}
}

@InProceedings{Bjorner1997,
  Title                    = {Automatic generation of invariants and intermediate assertions},
  Author                   = {Bjorner, Nikolaj and Browne, Anca and Manna, Zohar},
  Year                     = {1997},
  Month                    = feb,
  Number                   = {1},
  Pages                    = {49--87},
  Volume                   = {173},

  Abstract                 = {Verifying temporal specifications of reactive and concurrent systems commonly relies on generating auxiliary assertions and on strengthening given properties of the system. This can be achieved by two dual approaches: The bottom-up method performs an abstract forward propagation (computation) of the system, generating auxiliary assertions; the top-down method performs an abstract backward propagation to strengthen given properties. Exact application of these methods is complete but is usually infeasible for large-scale verification. Approximation techniques are often needed to complete the verification. We give an overview of known methods for generation of auxiliary invariants in the verification of invariance properties. We extend these methods, by formalizing and analyzing a general verification rule that uses assertion graphs to generate auxiliary assertions for the verification of general safety properties.},
  File                     = {:Automatic generation of invariants and intermediate assertions.pdf:PDF},
  Journal                  = {Theoretical Computer Science},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07},
  Url                      = {http://www.sciencedirect.com/science/article/B6V1G-3SNTKND-R/1/d59fcc533a508b5b1be657e65d374b03}
}

@InProceedings{Borkar2007,
  Title                    = {Thousand core chips: a technology perspective},
  Author                   = {Borkar, Shekhar},
  Booktitle                = {Proceedings of the 44th annual conference on Design automation},
  Year                     = {2007},

  Address                  = {San Diego, California},
  Pages                    = {746--749},
  Publisher                = {ACM},

  File                     = {:Thousand core chips- a technology perspective.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@InProceedings{Bouajjani2003,
  Title                    = {Verification of Parametric Concurrent Systems with Prioritized FIFO Resource Management},
  Author                   = {Bouajjani, A. and Habermehl, P. and Vojnar, T.},
  Year                     = {2003},
  Number                   = {2761},
  Pages                    = {174-190--},

  Comment                  = {Verification of Parametric Concurrent Systems with Prioritized FIFO Resource Management
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {41},
  Timestamp                = {2008.06.11}
}

@InProceedings{Boudol2009,
  Title                    = {Relaxed memory models: an operational approach},
  Author                   = {Boudol, G{\'e}rard and Petri, Gustavo},
  Booktitle                = {Proceedings of the 36th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  Year                     = {2009},

  Address                  = {New York, NY, USA},
  Pages                    = {392--403},
  Publisher                = {ACM},
  Series                   = {POPL '09},

  Acmid                    = {1480930},
  Doi                      = {10.1145/1480881.1480930},
  File                     = {:Relaxed memory models- an operational approach.pdf:PDF},
  ISBN                     = {978-1-60558-379-2},
  Keywords                 = {memory models, operational semantics},
  Location                 = {Savannah, GA, USA},
  Numpages                 = {12},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.29},
  Url                      = {http://doi.acm.org/10.1145/1480881.1480930}
}

@InProceedings{Bradfield1998,
  Title                    = {The modal mu-calculus alternation hierarchy is strict},
  Author                   = {Bradfield, J. C.},
  Year                     = {1998},
  Number                   = {2},
  Pages                    = {133-154--},
  Volume                   = {195},

  Comment                  = {The modal mu-calculus alternation hierarchy is strict
204545159
0304-3975},
  Journal                  = {THEORETICAL COMPUTER SCIENCE -AMSTERDAM-},
  Owner                    = {lvyi},
  Refid                    = {43},
  Timestamp                = {2008.06.11}
}

@InProceedings{Bradfield1998a,
  Title                    = {Simplifying the Modal mu-calculus Alternation Hierarchy},
  Author                   = {Bradfield, J. C.},
  Year                     = {1998},
  Number                   = {1373},
  Pages                    = {39--},

  Comment                  = {Simplifying the Modal mu-calculus Alternation Hierarchy
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {45},
  Timestamp                = {2008.06.11}
}

@Other{Brown2006,
  Title                    = {Easy Parameterized Verification of Biphase Mark and 8N1 Protocols},
  Abstract                 = {The Biphase Mark Protocol (BMP) and 8N1 Protocol are physical layer protocols for data transmission. We present a generic model in which timing and error values are parameterized by linear constraints, and then we use this model to verify these protocols. The verifications are carried out using SRI’s SAL model checker that combines a satisfiability modulo theories decision procedure with a bounded model checker for highly-automated induction proofs of safety properties over infinite-state systems. Previously, parameterized formal verification of real-time systems required mechanical theorem-proving or specialized real-time model checkers; we describe a compelling case-study demonstrating a simpler and more general approach. The verification reveals a significant error in the parameter ranges for 8N1 given in a published application note [1].},
  Author                   = {Brown, Geoffrey and Pike, Lee},
  File                     = {:Easy Parameterized Verification of Biphase Mark and 8N1 Protocols.pdf:PDF},
  Journal                  = {Tools and Algorithms for the Construction and Analysis of Systems},
  Owner                    = {lvyi},
  Pages                    = {58--72},
  Timestamp                = {2009.10.06},
  Url                      = {http://dx.doi.org/10.1007/11691372_4},
  Year                     = {2006}
}

@Other{Broy2009,
  Title                    = {Architecture Based Specification and Verification of Embedded Software Systems (Work in Progress)},
  Abstract                 = {Large scale embedded software intensive systems as we find them, for instance, in cars today need structured techniques in terms of comprehensive architectures for mastering their specification, development, and verification. Comprehensive system architectures provide the appropriate levels of abstraction separating logical from technical views. We show how logical architecture provides a systematic focal point for specification and refinement based development with early verification.},
  Author                   = {Broy, Manfred},
  Booktitle                = {Communications in Computer and Information Science},
  Editor                   = {Margaria, Tiziana and Steffen, Bernhard},
  File                     = {:Architecture Based Specification and Verification of Embedded Software Systems.pdf:PDF},
  ISSN                     = {978-3-540-88479-8},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Pages                    = {1-13--13},
  Publisher                = {Springer Berlin Heidelberg},
  Timestamp                = {2011.06.09},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-88479-8_1},
  Volume                   = {17},
  Year                     = {2009}
}

@InProceedings{Bryant1986,
  Title                    = {Graph-Based Algorithms for Boolean Function Manipulation},
  Author                   = {Bryant, R. E.},
  Year                     = {1986},
  Number                   = {8},
  Pages                    = {677-691},
  Volume                   = {35},

  Comment                  = {Graph-Based Algorithms for Boolean Function Manipulation},
  ISSN                     = {0018-9340},
  Journal                  = {IEEE Transactions on Computers},
  Keywords                 = {symbolic manipulation Boolean functions binary decision diagrams logic design verification},
  Owner                    = {lvyi},
  Refid                    = {89},
  Timestamp                = {2008.06.11}
}

@InCollection{Burckhardt2012,
  Title                    = {Concurrent Library Correctness on the TSO Memory Model},
  Author                   = {Burckhardt, Sebastian and Gotsman, Alexey and Musuvathi, Madanlal and Yang, Hongseok},
  Booktitle                = {Programming Languages and Systems},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2012},
  Editor                   = {Seidl, Helmut},
  Pages                    = {87-107},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7211},

  Doi                      = {10.1007/978-3-642-28869-2_5},
  File                     = {:Concurrent Library Correctness on the TSO Memory Model.pdf:PDF},
  ISBN                     = {978-3-642-28868-5},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-28869-2_5}
}

@InCollection{Burckhardt2008,
  Title                    = {Effective Program Verification for Relaxed Memory Models},
  Author                   = {Burckhardt, Sebastian and Musuvathi, Madanlal},
  Booktitle                = {Computer Aided Verification},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2008},
  Editor                   = {Gupta, Aarti and Malik, Sharad},
  Pages                    = {107-120},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {5123},

  Doi                      = {10.1007/978-3-540-70545-1_12},
  File                     = {:Effective Program Verification for Relaxed Memory Models.pdf:PDF},
  ISBN                     = {978-3-540-70543-7},
  Owner                    = {lvyi},
  Timestamp                = {2013.09.06},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-70545-1_12}
}

@InProceedings{Cabodi2008,
  Title                    = {Automated abstraction by incremental refinement in interpolant-based model checking},
  Author                   = {Cabodi, G.},
  Booktitle                = {Computer-Aided Design, International Conference on},
  Year                     = {2008},
  Editor                   = {Camurati, P. and Murciano, M.},
  Month                    = nov,
  Pages                    = {129--136},
  Volume                   = {0},

  File                     = {:Automated abstraction by incremental refinement in interpolant-based model checking.pdf:PDF},
  ISSN                     = {978-1-4244-2819-9},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.11},
  Url                      = {http://doi.ieeecomputersociety.org/10.1109/ICCAD.2008.4681563}
}

@InProceedings{Cain2004,
  Title                    = {Memory Ordering: A Value-Based Approach},
  Author                   = {Cain, Harold W. and Lipasti, Mikko H.},
  Booktitle                = {Proceedings of the 31st annual international symposium on Computer architecture},
  Year                     = {2004},

  Address                  = {M\&\#252;nchen, Germany},
  Pages                    = {90},
  Publisher                = {IEEE Computer Society},

  File                     = {:Memory Ordering- A Value-Based Approach.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26}
}

@InProceedings{Cain2002,
  Title                    = {Verifying sequential consistency using vector clocks},
  Author                   = {Cain, Harold W. and Lipasti, Mikko H.},
  Booktitle                = {Proceedings of the fourteenth annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {2002},

  Address                  = {Winnipeg, Manitoba, Canada},
  Pages                    = {153--154},
  Publisher                = {ACM},

  File                     = {:Verifying sequential consistency using vector clocks.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.27}
}

@InProceedings{Cain2003,
  Title                    = {Constraint Graph Analysis of Multithreaded Programs},
  Author                   = {Cain, Harold W. and Lipasti, Mikko H. and Nair, Ravi},
  Booktitle                = {Proceedings of the 12th International Conference on Parallel Architectures and Compilation Techniques},
  Year                     = {2003},
  Pages                    = {4},
  Publisher                = {IEEE Computer Society},

  File                     = {:Constraint Graph Analysis of Multithreaded Programs.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26}
}

@InProceedings{Caires2003,
  Title                    = {A spatial logic for concurrency (part I)},
  Author                   = {Caires, L. and Cardelli, L.},
  Year                     = {2003},
  Number                   = {2},
  Pages                    = {194-235--},
  Volume                   = {186},

  Comment                  = {A spatial logic for concurrency (part I)
209905774
0890-5401},
  Journal                  = {INFORMATION AND COMPUTATION},
  Owner                    = {lvyi},
  Refid                    = {79},
  Timestamp                = {2008.06.11}
}

@InProceedings{Caires2002,
  Title                    = {A Spatial Logic for Concurrency (Part II)},
  Author                   = {Caires, L. and Cardelli, L.},
  Year                     = {2002},
  Number                   = {2421},
  Pages                    = {209-225--},

  Comment                  = {A Spatial Logic for Concurrency (Part II)
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {80},
  Timestamp                = {2008.06.11}
}

@InProceedings{Cantin2003,
  Title                    = {The complexity of verifying memory coherence},
  Author                   = {Cantin, Jason F. and Lipasti, Mikko H. and Smith, James E.},
  Booktitle                = {Proceedings of the fifteenth annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {2003},

  Address                  = {San Diego, California, USA},
  Pages                    = {254--255},
  Publisher                = {ACM},

  File                     = {:The complexity of verifying memory coherence.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Cardelli2000,
  Title                    = {Anytime, anywhere: Modal logics for mobile ambients},
  Author                   = {Cardelli, L. and Gordon, A. D.},
  Year                     = {2000},
  Pages                    = {365-377--},
  Volume                   = {27},

  Comment                  = {Anytime, anywhere: Modal logics for mobile ambients
204307050
0743-9016},
  Journal                  = {CONFERENCE RECORD OF THE ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES},
  Owner                    = {lvyi},
  Refid                    = {78},
  Timestamp                = {2008.06.11}
}

@InProceedings{Carvalho2009,
  Title                    = {Towards an Embedded Software Component Quality Verification Framework},
  Author                   = {Carvalho, F. and Meira, S.R.L.},
  Booktitle                = {Engineering of Complex Computer Systems, 2009 14th IEEE International Conference on DOI - 10.1109/ICECCS.2009.26},
  Year                     = {2009},
  Pages                    = {248--257},

  Abstract                 = {Component-Based Software Engineering (CBSE) is being used in a wide variety of application areas, including embedded systems, and the correct operation of the components is often critical for business success and, in some cases, human safety. In this way, assessment and evaluation of software components has become a compulsory and crucial part of any CBSE lifecycle. A risk of selecting a product with unknown quality properties is no longer acceptable and, when happened, may cause catastrophic results. Thus, the software components quality evaluation has become an increasingly essential activity in order to bring reliability in (re)using software components. In this way, we propose a quality verification framework to evaluate the quality of embedded software components in an efficient way. This model is based in component characteristics, sub-characteristics, quality attributes and metrics.},
  File                     = {:Towards an Embedded Software Component Quality Verification Framework.pdf:PDF},
  Keywords                 = {embedded systems, object-oriented programming, program verification, software metrics, software quality, software reliability, software reusability, component-based software engineering lifecycle, embedded software component quality verification framework, software component metrics, software component reliability, software component reusability},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09}
}

@InProceedings{Chaki2008,
  Title                    = {Verification of evolving software via component substitutability analysis},
  Author                   = {Chaki, Sagar and Clarke, Edmund and Sharygina, Natasha and Sinha, Nishant},
  Year                     = {2008},
  Month                    = jun,
  Number                   = {3},
  Pages                    = {235--266},
  Volume                   = {32},

  Abstract                 = {Abstract&nbsp;&nbsp;This paper presents an automated and compositional procedure to solve the substitutability problem in the context of evolving software systems. Our solution contributes two techniques for checking correctness of software upgrades: (1)&nbsp;a technique based on simultaneous use of over-and under-approximations obtained via existential and universal abstractions; (2)&nbsp;a dynamic assume-guarantee reasoning algorithm—previously generated component assumptions are reused and altered on-the-fly to prove or disprove the global safety properties on the updated system. When upgrades are found to be non-substitutable, our solution generates constructive feedback to developers showing how to improve the components. The substitutability approach has been implemented and validated in the ComFoRT reasoning framework, and we report encouraging results on an industrial benchmark.},
  File                     = {:Verification of evolving software via component substitutability analysis.pdf:PDF},
  Journal                  = {Formal Methods in System Design},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.09},
  Url                      = {http://dx.doi.org/10.1007/s10703-008-0053-x}
}

@InProceedings{Chaki2005,
  Title                    = {Automated Assume-Guarantee Reasoning for Simulation Conformance},
  Author                   = {Chaki, Sagar and Clarke, Edmund and Sinha, Nishant and Thati, Prasanna},
  Year                     = {2005},
  Pages                    = {534--547},

  Abstract                 = {We address the issue of efficiently automating assume-guarantee reasoning for simulation conformance between finite state systems and specifications. We focus on a non-circular assume-guarantee proof rule, and show that there is a weakest assumption that can be represented canonically by a deterministic tree automata (DTA). We then present an algorithm L T that learns this DTA automatically in an incremental fashion, in time that is polynomial in the number of states in the equivalent minimal DTA. The algorithm assumes a teacher that can answer membership and candidate queries pertaining to the language of the unknown DTA. We show how the teacher can be implemented using a model checker. We have implemented this framework in the COMFORT toolkit and we report encouraging results (over an order of magnitude improvement in memory consumption) on non-trivial benchmarks.},
  File                     = {:Automated Assume-Guarantee Reasoning for Simulation Conformance.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.14},
  Url                      = {http://dx.doi.org/10.1007/11513988_51}
}

@InProceedings{Chaki2008a,
  Title                    = {Three optimizations for Assume–Guarantee reasoning with L*},
  Author                   = {Chaki, Sagar and Strichman, Ofer},
  Year                     = {2008},
  Month                    = jun,
  Number                   = {3},
  Pages                    = {267--284},
  Volume                   = {32},

  Abstract                 = {Abstract&nbsp;&nbsp; The learning-based automated Assume–Guarantee reasoning paradigm has been applied in the last few years for the compositional verification of concurrent systems. Specifically, L* has been used for learning the assumption, based on strings derived from counterexamples, which are given to it by a model-checker that attempts to verify the Assume–Guarantee rules. We suggest three optimizations to this paradigm. First, we derive from each counterexample multiple strings to L*, rather than a single one as in previous approaches. This small improvement saves candidate queries and hence model-checking runs. Second, we observe that in existing instances of this paradigm, the learning algorithm is coupled weakly with the teacher. Thus, the learner completely ignores the details of the internal structure of the system and specification being verified, which are available already to the teacher. We suggest an optimization that uses this information in order to avoid many unnecessary membership queries (it reduces the number of such queries by more than an order of magnitude). Finally, we develop a method for minimizing the alphabet used by the assumption, which reduces the size of the assumption and the number of queries required to construct it. We present these three optimizations in the context of verifying trace containment for concurrent systems composed of finite state machines. We have implemented our approach in the ComFoRT tool, and experimented with real-life examples. Our results exhibit an average speedup of between 4 to 11 times, depending on the Assume–Guarantee rule used and the set of activated optimizations.},
  File                     = {:Three optimizations for Assume–Guarantee reasoning with L.pdf:PDF},
  Journal                  = {Formal Methods in System Design},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.09},
  Url                      = {http://dx.doi.org/10.1007/s10703-007-0042-5}
}

@Article{ChampavA¨re2009,
  Title                    = {Efficient inclusion checking for deterministic tree automata and XML Schemas},
  Author                   = {ChampavÃ¨re, JÃ©rÃ´me and Gilleron, RÃ©mi and Lemay, AurÃ©lien and Niehren, Joachim},
  Journal                  = {Information and Computation},
  Year                     = {2009},

  Month                    = nov,
  Number                   = {11},
  Pages                    = {1181--1208},
  Volume                   = {207},

  Booktitle                = {Special Issue: 2nd International Conference on Language and Automata Theory and Applications (LATA 2008)},
  Doi                      = {10.1016/j.ic.2009.03.003},
  ISSN                     = {0890-5401},
  Keywords                 = {Tree automata, Language inclusion, Algorithmic complexity, XML Shemas},
  Owner                    = {lvyi},
  Timestamp                = {2012.02.25},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S0890540109000704}
}

@InProceedings{Charatonik2001,
  Title                    = {The Decidability of Model Checking Mobile Ambients},
  Author                   = {Charatonik, W. and Talbot, J. M.},
  Year                     = {2001},
  Number                   = {2142},
  Pages                    = {339-354--},

  Comment                  = {The Decidability of Model Checking Mobile Ambients
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {81},
  Timestamp                = {2008.06.11}
}

@InProceedings{Charatonik2001a,
  Title                    = {The Complexity of Model Checking Mobile Ambients},
  Author                   = {Charatonik, W. and Zilio, S. D. and Gordon, A. D. and Mukhopadhyay, S. and Talbot, J. M.},
  Year                     = {2001},
  Number                   = {2030},
  Pages                    = {152-167--},

  Comment                  = {The Complexity of Model Checking Mobile Ambients
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {82},
  Timestamp                = {2008.06.11}
}

@InProceedings{Chatterjee2005,
  Title                    = {Streamline verification process with formal property verification to meet highly compressed design cycle},
  Author                   = {Chatterjee, P.},
  Booktitle                = {Design Automation Conference, 2005. Proceedings. 42nd},
  Year                     = {2005},
  Pages                    = {674--677},

  File                     = {:Streamline Verification Process with Formal Property Verification to Meet Highly Compressed Design Cycle.pdf:PDF},
  Keywords                 = {application specific integrated circuits, formal verification, integrated circuit design, ASIC design, formal verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Chatterjee2002,
  Title                    = {Shared Memory Consistency Protocol Verification Against Weak Memory Models: Refinement via Model-Checking
},
  Author                   = {Chatterjee, Prosenjit and Sivaraj, Hemanthkumar and Gopalakrishnan, Ganesh},
  Booktitle                = {Computer Aided Verification},
  Year                     = {2002},
  Pages                    = {121-138--},

  Abstract                 = {Weak shared memory consistency models, especially those used by modern microprocessor families, are quite complex. The bus and/or directory-based protocols that help realize shared memory multiprocessors using these microprocessors are also exceedingly complex. Thus, the correctness problem — that all the executions generated by the multiprocessor for any given concurrent program are also allowed by the memory model — is a major challenge. In this paper, we present a formal approach to verify protocol implementation models against weak shared memory models through automatable refinement checking supported by a model checker. We define a taxonomy of weak shared memory models that includes most published commercial memory models, and detail how our approach applies over all these models. In our approach, the designer follows a prescribed procedure to build a highly simplified intermediate abstraction for the given implementation. The intermediate abstraction and the implementation are concurrently run using a model-checker, checking for refinement. The intermediate abstraction can be proved correct against the memory model specification using theorem proving. We have verified four different Alpha as well as Itanium memory model implementations1 against their respective specifications. The results are encouraging in terms of the uniformity of the procedure, the high degree of automation, acceptable run-times, and empirically observed bug-hunting efficacy. The use of parallel model-checking, based on a version of the parallel Murϕ model checker we have recently developed for the MPI library, has been essential to finish the search in a matter of a few hours.},
  File                     = {:Shared Memory Consistency Protocol Verification Against Weak Memory Models- Refinement via Model-Checking.pdf:PDF},
  Owner                    = {lvyi},
  Refid                    = {7},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/3-540-45657-0_10}
}

@TechReport{Chawdhary2008,
  Title                    = {Ranking abstractions},
  Author                   = {Aziem Chawdhary and Byron Cook and Sumit Gulwani and Mooly Sagiv and Hongseok Yang},
  Year                     = {2008},

  File                     = {:Ranking Abstractions.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@Other{Chen2008b,
  Title                    = {Inclusion Test Algorithms for One-Unambiguous Regular Expressions: Theoretical Aspects of Computing - ICTAC 2008},
  Author                   = {Chen, Haiming and Chen, Lei},
  Booktitle                = {Lecture Notes in Computer Science},
  Editor                   = {Fitzgerald, John and Haxthausen, Anne and Yenigun, Husnu},
  ISSN                     = {978-3-540-85761-7},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Pages                    = {96--110},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2012.02.25},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-85762-4_7},
  Volume                   = {5160},
  Year                     = {2008}
}

@InProceedings{Chen2008,
  Title                    = {Runtime validation of memory ordering using constraint graph checking},
  Author                   = {Chen, Kaiyu and Malik, S. and Patra, P.},
  Booktitle                = {High Performance Computer Architecture, 2008. HPCA 2008. IEEE 14th International Symposium on},
  Year                     = {2008},
  Pages                    = {415--426},

  Abstract                 = {An important correctness issue for emerging multi/many-core shared memory systems is to ensure that the inter-processor communication through shared memory conforms to the memory ordering rules, as specified by the architecturepsilas memory consistency model. This presents a significant validation challenge. Growing system complexity makes it increasingly hard to identify all deep-state logic bugs in pre-silicon verification. Further, aggressive technology scaling makes hardware more vulnerable to dynamic errors that can only be detected at runtime. In this paper, we propose an approach for runtime validation of memory ordering. This allows us to survive bugs that escape pre-silicon verification, as well as deal with emerging dynamic errors. Our solution consists of two parts: 1) at the microarchitecture level, we add efficient hardware support to capture the observed ordering among shared-memory operations; 2) we perform online verification of the observed memory ordering by checking for cycles in the constraint graph. We combine these to achieve end-to-end correctness validation of the system execution with respect to the memory ordering specification. There are several challenges that need to be addressed to make this approach practical. We describe these, as well as optimization techniques for reducing the hardware overhead. Estimates obtained from preliminary chip multiprocessor simulation experiments show that the proposed techniques are very effective in achieving acceptable hardware overhead and minimal performance impact.},
  File                     = {:Runtime Validation of Memory Ordering Using Constraint Graph Checking.pdf:PDF},
  ISSN                     = {1530-0897},
  Keywords                 = {directed graphs, formal specification, program debugging, program verification, shared memory systems, storage management, system monitoring, constraint graph checking, deep-state logic bug, end-to-end correctness validation, inter-processor communication, memory ordering specification, microarchitecture level, multicore shared memory system, optimization technique, pre-silicon verification, runtime memory ordering validation},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.02}
}

@InProceedings{Chen2008a,
  Title                    = {Runtime Validation of Transactional Memory Systems},
  Author                   = {Chen, Kaiyu and Malik, S. and Patra, P.},
  Booktitle                = {Quality Electronic Design, 2008. ISQED 2008. 9th International Symposium on},
  Year                     = {2008},
  Pages                    = {750--756},

  Abstract                 = {Transactional Memory (TM) has been proposed as a promising solution to effectively harness the increasing processing power of emerging multi/many- core systems. While there has been considerable research on the design and implementation of TM systems, it remains to be shown how to address the validation challenge of such systems in face of increasing design bugs and dynamic errors. This paper proposes a runtime validation methodology for ensuring the end-to-end correctness of a TM system. We use an extended constraint graph model to capture the correctness of a transactional execution, and provide efficient hardware support to perform online checking of this constraint graph. We describe the design ideas as well as the key optimization techniques to make this approach practical. Experiments based on a state-of-the-art TM system framework show that our design effectively performs system-level runtime validation with relatively small overhead.},
  File                     = {:Runtime Validation of Transactional Memory Systems.pdf:PDF},
  Keywords                 = {integrated circuit design, integrated memory circuits, memory architecture, transaction processing, multicore systems, processing power, runtime validation, transactional memory systems},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.02}
}

@InProceedings{Chen2005,
  Title                    = {Stack-based algorithms for pattern matching on DAGs},
  Author                   = {Chen, Li and Gupta, Amarnath and Kurul, M. Erdem},
  Booktitle                = {Proceedings of the 31st international conference on Very large data bases},
  Year                     = {2005},

  Address                  = {Trondheim, Norway},
  Pages                    = {493--504},
  Publisher                = {VLDB Endowment},

  Owner                    = {lvyi},
  Timestamp                = {2012.02.24}
}

@InProceedings{Chen2007,
  Title                    = {Transaction Based Modeling and Verification of Hardware Protocols},
  Author                   = {Chen, Xiaofang and German, Steven M. and Gopalakrishnan, Ganesh},
  Booktitle                = {Formal Methods in Computer Aided Design, 2007. FMCAD '07},
  Year                     = {2007},
  Pages                    = {53--61},

  File                     = {:Transaction Based Modeling and Verification of Hardware Protocols.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.02.08}
}

@InProceedings{Chen2007a,
  Title                    = {Transaction Based Modeling and Verification of Hardware Protocols},
  Author                   = {Chen, X. and German, S. M. and Gopalakrishnan, G.},
  Booktitle                = {Formal Methods in Computer Aided Design},
  Year                     = {2007},
  Pages                    = {53-61--},

  Comment                  = {Transaction Based Modeling and Verification of Hardware Protocols
ChenFmcad07},
  Owner                    = {lvyi},
  Refid                    = {42},
  Timestamp                = {2009.03.11}
}

@InProceedings{Chen2007c,
  Title                    = {Transaction Based Modeling and Verification of Hardware Protocols},
  Author                   = {Chen, X. and German, S. M. and Gopalakrishnan, G.},
  Booktitle                = {Formal Methods in Computer Aided Design},
  Year                     = {2007},
  Pages                    = {53-61--},

  Comment                  = {Transaction Based Modeling and Verification of Hardware Protocols
ChenFmcad07
inproceedings},
  Owner                    = {lvyi},
  Refid                    = {28},
  Timestamp                = {2008.06.11}
}

@InProceedings{Chen2007b,
  Title                    = {Hierarchical Cache Coherence Protocol Verification One Level at a Time Through Assume Guarantee},
  Author                   = {X. Chen and Y. Yang and M. Delisi and G. Gopalakrishnan and C.-T. Chou},
  Booktitle                = {IEEE Int'l High Level Design Validation and Test Workshop},
  Year                     = {2007},
  Pages                    = {107-114},

  File                     = {:Hierarchical Cache Coherence Protocol Verification One Level at a Time Through Assume Guarantee.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@InProceedings{Chen2006,
  Title                    = {Reducing Verification Complexity of a Multicore Coherence Protocol Using Assume/Guarantee},
  Author                   = {Xiaofang Chen and Yu Yang and Ganesh Gopalakrishnan and Ching-Tsun Chou},
  Year                     = {2006},

  Address                  = {Los Alamitos, CA, USA},
  Pages                    = {81-88},
  Publisher                = {IEEE Computer Society},
  Volume                   = {0},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/FMCAD.2006.28},
  File                     = {:Reducing Verification Complexity of a Multicore Coherence Protocol Using Assume-Guarantee.pdf:PDF},
  ISBN                     = {0-7695-2707-8},
  Journal                  = {fmcad},
  Timestamp                = {2008.08.08}
}

@Article{Chen2012,
  Title                    = {Program Regularization in Memory Consistency Verification},
  Author                   = {Yunji Chen and Lei Li and Tianshi Chen and Ling Li and Lei Wang and Xiaoxue Feng and Weiwu Hu},
  Journal                  = {Parallel and Distributed Systems, IEEE Transactions on},
  Year                     = {2012},
  Number                   = {11},
  Pages                    = {2163-2174},
  Volume                   = {23},

  Doi                      = {10.1109/TPDS.2012.44},
  File                     = {:Program Regularization in Memory Consistency Verification.pdf:PDF},
  ISSN                     = {1045-9219},
  Keywords                 = {cache storage;microprocessor chips;multiprocessing systems;parallel programming;program testing;program verification;CMP;cache hierarchies;chip multiprocessor;computation time reduction;load operations;memory consistency model;memory consistency verification;parallel test programs;postsilicon verification platforms;presilicon verification platforms;program regularization;store operations;Complexity theory;Hardware;Law;Memory management;Program processors;Receivers;Memory consistency verification;VSC-read;frontier graph;parallel program;program regularization},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20}
}

@InProceedings{Chen2009,
  Title                    = {Fast complete memory consistency verification},
  Author                   = {Chen, Yunji and Lv, Yi and Hu, Weiwu and Chen, Tianshi and Shen, Haihua and Wang, Pengyu and Pan, Hong},
  Booktitle                = {High Performance Computer Architecture, 2009. HPCA 2009. IEEE 15th International Symposium on},
  Year                     = {2009},
  Pages                    = {381--392},

  Abstract                 = {The verification of an execution against memory consistency is known to be NP-hard. This paper proposes a novel fast memory consistency verification method by identifying a new natural partial order: time order. In multiprocessor systems with store atomicity, a time order restriction exists between two operations whose pending periods are disjoint: the former operation in time order must be observed by the latter operation. Based on the time order restriction, memory consistency verification is localized: for any operation, both inferring related orders and checking related cycles need to take into account only a bounded number of operations. Our method has been implemented in a memory consistency verification tool for CMP (chip multi processor), named LCHECK. The time complexity of the algorithm in LCHECK is O(C<sup>p</sup>p<sup>2</sup>n<sup>2</sup>) (where C is a constant, p is the number of processors and n is the number of operations) for soundly and completely checking, and O(p<sup>3</sup>n) for soundly but incompletely checking. LCHECK has been integrated into both pre and post silicon verification platforms of the Godson-3 microprocessor, and many bugs of memory consistency and cache coherence were found with the help of LCHECK.},
  File                     = {:Fast Complete Memory Consistency Verification.pdf:PDF},
  ISSN                     = {1530-0897},
  Keywords                 = {computational complexity, memory architecture, microprocessor chips, optimisation, silicon, Godson-3 microprocessor, LCHECK, NP-hard, chip multi processor, fast complete memory consistency verification, multiprocessor systems, natural partial order, silicon verification platforms, store atomicity, time complexity, time order, time order restriction, cache coherence, memory consistency, pending period, time order, verification},
  Owner                    = {lvyi},
  Timestamp                = {2009.05.09}
}

@InProceedings{Chesters2009,
  Title                    = {Role of the verification team throughout the ASIC development life cycle},
  Author                   = {Chesters, Eric},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {216--219},
  Publisher                = {ACM},

  Doi                      = {http://doi.acm.org/10.1145/1629911.1629971},
  File                     = {:Role of the verification team throughout the ASIC development life cycle.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.08}
}

@InProceedings{Chou2004,
  Title                    = {A Simple Method for Parameterized Verification of Cache Coherence Protocols},
  Author                   = {Chou, Ching-Tsun and Mannava, Phanindra K. and Park, Seungjoon},
  Booktitle                = {FMCAD 2004},
  Year                     = {2004},
  Editor                   = {A.J. Hu and A.K. Martin},
  Pages                    = {382--398},
  Publisher                = {Springer Berlin Heidelberg},
  Series                   = {LNCS},
  Volume                   = {3312},

  Abstract                 = {We present a simple method for verifying the safety properties of cache coherence protocols with arbitrarily many nodes. Our presentation begins with two examples. The first example describes in intuitive terms how the German protocol with arbitrarily many nodes can be verified using a combination of Murphi model checking and apparently circular reasoning. The second example outlines a similar proof of the FLASH protocol. These are followed by a simple theory based on the classical notion of simulation proofs that justifies the apparently circular reasoning. We conclude the paper by discussing what remains to be done and by comparing our method with other approaches to the parameterized verification of cache coherence protocols, such as compositional model checking, machine-assisted theorem proving, predicate abstraction, invisible invariants, and cut-off theorems.},
  File                     = {:A Simple Method for Parameterized Verification of Cache Coherence Protocols.pdf:PDF},
  Journal                  = {Formal Methods in Computer-Aided Design},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.28},
  Url                      = {http://www.springerlink.com/content/8q75hh5vf5qx6ag1}
}

@InProceedings{Cimatti2002,
  Title                    = {NuSMV 2: An OpenSource Tool for Symbolic Model Checking},
  Author                   = {Cimatti, Alessandro and Clarke, Edmund and Giunchiglia, Enrico and Giunchiglia, Fausto and Pistore, Marco and Roveri, Marco and Sebastiani, Roberto and Tacchella, Armando},
  Booktitle                = {CAV 2002},
  Year                     = {2002},
  Editor                   = {Brinksma, Ed and Larsen, KimGuldstrand},
  Pages                    = {359-364},
  Publisher                = {Springer Berlin Heidelberg},
  Series                   = {LNCS},
  Volume                   = {2404},

  Doi                      = {10.1007/3-540-45657-0_29},
  ISBN                     = {978-3-540-43997-4},
  Journal                  = {Computer Aided Verification},
  Language                 = {English},
  Owner                    = {lvyi},
  Refid                    = {14},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/3-540-45657-0_29}
}

@InProceedings{Cimatti1999,
  Title                    = {NuSMV: A New Symbolic Model Verifier},
  Author                   = {Cimatti, A. and Clarke, E. and Giunchiglia, F. and Roveri, M.},
  Booktitle                = {CAV 1999},
  Year                     = {1999},
  Editor                   = {Halbwachs, Nicolas and Peled, Doron},
  Pages                    = {682--682},
  Publisher                = {Springer Berlin Heidelberg},
  Series                   = {LNCS},
  Volume                   = {1633},

  File                     = {:NuSMV- A New Symbolic Model Verifier.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2009.04.03},
  Url                      = {http://dx.doi.org/10.1007/3-540-48683-6_44}
}

@InProceedings{Clarke2003,
  Title                    = {Counterexample-guided abstraction refinement for symbolic model checking},
  Author                   = {Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
  Year                     = {2003},
  Number                   = {5},
  Pages                    = {752--794},
  Publisher                = {ACM},
  Volume                   = {50},

  File                     = {:Counterexample-guided abstraction refinement for symbolic model checking.pdf:PDF},
  Journal                  = {J. ACM},
  Owner                    = {lvyi},
  Timestamp                = {2008.08.05}
}

@InProceedings{Clarke2005a,
  Title                    = {Computational challenges in bounded model checking},
  Author                   = {Clarke, E. and Kroening, D. and Ouaknine, J. l and Strichman, O.},
  Year                     = {2005},
  Number                   = {2},
  Pages                    = {174-183--},
  Volume                   = {7},

  Comment                  = {Computational challenges in bounded model checking
205518152
1433-2779},
  Journal                  = {INTERNATIONAL JOURNAL ON SOFTWARE TOOLS FOR TECHNOLOGY TRANSFER},
  Owner                    = {lvyi},
  Refid                    = {72},
  Timestamp                = {2008.06.11}
}

@InProceedings{Clarke2005,
  Author                   = {Clarke, Edmund and Kroening, Daniel and Sharygina, Natasha and Yorav, Karen},
  Booktitle                = {Tools and Algorithms for the Construction and Analysis of Systems},
  Year                     = {2005},
  Pages                    = {570-574--},

  Comment                  = {SATABS: SAT-Based Predicate Abstraction for ANSI-C},
  Owner                    = {lvyi},
  Refid                    = {40},
  Timestamp                = {2009.03.11},
  Url                      = {http://www.springerlink.com/content/rxh6jb6pkg2yub6x}
}

@InProceedings{Clarke2005b,
  Title                    = {SATABS: SAT-Based Predicate Abstraction for ANSI-C},
  Author                   = {Clarke, Edmund and Kroening, Daniel and Sharygina, Natasha and Yorav, Karen},
  Booktitle                = {Tools and Algorithms for the Construction and Analysis of Systems},
  Year                     = {2005},
  Pages                    = {570-574--},

  Abstract                 = {This paper presents a model checking tool, SatAbs, that implements a predicate abstraction refinement loop. Existing software verification tools such as Slam, Blast, or Magic use decision procedures for abstraction and simulation that are limited to integers. SatAbs overcomes these limitations by using a SAT-solver. This allows the model checker to handle the semantics of the ANSI-C standard accurately. This includes a sound treatment of bit-vector overflow, and of the ANSI-C pointer arithmetic constructs.},
  Owner                    = {lvyi},
  Refid                    = {18},
  Timestamp                = {2008.06.11},
  Url                      = {http://www.springerlink.com/content/rxh6jb6pkg2yub6x}
}

@InProceedings{Clarke2008,
  Author                   = {Clarke, Edmund and Talupur, Murali and Veith, Helmut},
  Year                     = {2008},
  Pages                    = {33--47},

  Abstract                 = {The parameterized verification of concurrent algorithms and protocols has been addressed by a variety of recent methods. Experience shows that there is a trade-off between techniques which are widely applicable but depend on non-trivial human guidance, and fully automated approaches which are tailored for narrow classes of applications. In this spectrum, we propose a new framework based on environment abstraction which exhibits a large degree of automation and can be easily adjusted to different fields of application. Our approach is based on two insights: First, we argue that natural abstractions for concurrent software are derived from the “Ptolemaic” perspective of a human engineer who focuses on a single reference process. For this class of abstractions, we demonstrate soundness of abstraction under very general assumptions. Second, most protocols in given a class of protocols – for instance, cache coherence protocols and mutual exclusion protocols – can be modeled by small sets of compound statements. These two insights allow to us efficiently build precise abstract models for given protocols which can then be model checked. We demonstrate the power of our method by applying it to various well known classes of protocols.},
  Journal                  = {Tools and Algorithms for the Construction and Analysis of Systems},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.01},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-78800-3_4}
}

@InProceedings{Clarke2008a,
  Title                    = {Proving Ptolemy Right: The Environment Abstraction Framework for Model Checking Concurrent Systems},
  Author                   = {Clarke, Edmund and Talupur, Murali and Veith, Helmut},
  Year                     = {2008},
  Pages                    = {33--47},

  Abstract                 = {The parameterized verification of concurrent algorithms and protocols has been addressed by a variety of recent methods. Experience shows that there is a trade-off between techniques which are widely applicable but depend on non-trivial human guidance, and fully automated approaches which are tailored for narrow classes of applications. In this spectrum, we propose a new framework based on environment abstraction which exhibits a large degree of automation and can be easily adjusted to different fields of application. Our approach is based on two insights: First, we argue that natural abstractions for concurrent software are derived from the “Ptolemaic” perspective of a human engineer who focuses on a single reference process. For this class of abstractions, we demonstrate soundness of abstraction under very general assumptions. Second, most protocols in given a class of protocols – for instance, cache coherence protocols and mutual exclusion protocols – can be modeled by small sets of compound statements. These two insights allow to us efficiently build precise abstract models for given protocols which can then be model checked. We demonstrate the power of our method by applying it to various well known classes of protocols.},
  File                     = {:Proving Ptolemy Right- The Environment Abstraction Framework for Model Checking Concurrent Systems(Full Version).pdf:PDF;:Proving Ptolemy Right- The Environment Abstraction Framework for Model Checking Concurrent Systems.pdf:PDF},
  Journal                  = {Tools and Algorithms for the Construction and Analysis of Systems},
  Owner                    = {lvyi},
  Timestamp                = {2008.05.28},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-78800-3_4}
}

@InProceedings{Clarke2006,
  Title                    = {Environment Abstraction for Parameterized Verification},
  Author                   = {Clarke, Edmund and Talupur, Muralidhar and Veith, Helmut},
  Year                     = {2006},
  Pages                    = {126--141},

  Abstract                 = {Many aspects of computer systems are naturally modeled as parameterized systems which renders their automatic verification difficult. In well-known examples such as cache coherence protocols and mutual exclusion protocols, the unbounded parameter is the number of concurrent processes which run the same distributed algorithm. In this paper, we introduce environment abstraction as a tool for the verification of such concurrent parameterized systems. Environment abstraction enriches predicate abstraction by ideas from counter abstraction; it enables us to reduce concurrent parameterized systems with unbounded variables to precise abstract finite state transition systems which can be verified by a finite state model checker. We demonstrate the feasibility of our approach by verifying the safety and liveness properties of Lamport’s bakery algorithm and Szymanski’s mutual exclusion algorithm. To the best of our knowledge, this is the first time both safety and liveness properties of the bakery algorithm have been verified at this level of automation.},
  File                     = {:Environment Abstraction for Parameterized Verification.pdf:PDF},
  Journal                  = {Verification, Model Checking, and Abstract Interpretation},
  Owner                    = {lvyi},
  Timestamp                = {2008.05.28},
  Url                      = {http://dx.doi.org/10.1007/11609773_9}
}

@Article{Clarke1982,
  Title                    = {Design and Synthesis of Synchronization Skeletons Using Branching-Time Temporal Logic},
  Author                   = {Clarke, Edmund. M. and Emerson, E. Allen},
  Year                     = {1982},
  Pages                    = {--},

  Booktitle                = {Logic of Programs, Workshop},
  Comment                  = {747438},
  Owner                    = {lvyi},
  Publisher                = {Springer-Verlag},
  Refid                    = {44},
  Timestamp                = {2008.06.11}
}

@Article{Clarke1994,
  Title                    = {Model checking and abstraction},
  Author                   = {Clarke, Edmund M. and Grumberg, Orna and Long, David E.},
  Journal                  = {ACM Trans. Program. Lang. Syst.},
  Year                     = {1994},
  Number                   = {5},
  Pages                    = {1512--1542},
  Volume                   = {16},

  File                     = {:Model checking and abstraction.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2008.06.25}
}

@Book{Clarke1999,
  Author                   = {Clarke, E. M. and Grumberg, Orna and Peled, Doron},
  Publisher                = {MIT Press},
  Year                     = {1999},

  Address                  = {Cambridge, Mass.},

  Booktitle                = {Model checking},
  Comment                  = {Model checking
40675218},
  ISSN                     = {0262032708 9780262032704},
  Owner                    = {lvyi},
  Pages                    = {--},
  Refid                    = {19},
  Timestamp                = {2008.06.11}
}

@InProceedings{Coen-Porisini2001,
  Title                    = {Using symbolic execution for verifying safety-critical systems},
  Author                   = {Coen-Porisini, Alberto and Denaro, Giovanni and Ghezzi, Carlo and Pezz\&\#233;, Mauro},
  Booktitle                = {Proceedings of the 8th European software engineering conference held jointly with 9th ACM SIGSOFT international symposium on Foundations of software engineering},
  Year                     = {2001},

  Address                  = {Vienna, Austria},
  Pages                    = {142--151},
  Publisher                = {ACM},

  Doi                      = {10.1145/503209.503230},
  File                     = {:Using symbolic execution for verifying safety-critical systems.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2011.05.25}
}

@InProceedings{Cohen2008,
  Title                    = {Mechanical verification of transactional memories with non-transactional memory accesses},
  Author                   = {Cohen, Ariel and Pnueli, Amir and Zuck, Lenore D.},
  Booktitle                = {Computer Aided Verification, 20th International Conference, CAV 2008, Princeton, NJ, USA, July 2008, Proceedings},
  Year                     = {2008},
  Pages                    = {121-134},
  Publisher                = {Springer},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {5123},

  File                     = {:Mechanical verification of transactional memories with non-transactional memory accesses.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@InProceedings{Cohen2002,
  Title                    = {Reachability and distance queries via 2-hop labels},
  Author                   = {Cohen, Edith and Halperin, Eran and Kaplan, Haim and Zwick, Uri},
  Booktitle                = {Proceedings of the thirteenth annual ACM-SIAM symposium on Discrete algorithms},
  Year                     = {2002},

  Address                  = {San Francisco, California},
  Pages                    = {937--946},
  Publisher                = {Society for Industrial and Applied Mathematics},

  Owner                    = {lvyi},
  Timestamp                = {2012.02.24}
}

@InProceedings{Conchon2013,
  Title                    = {Invariants for Finite Instances and Beyond},
  Author                   = {Sylvain Conchon and Amit Goel and Sava Krstic and Alain Mebsout and Fatiha Zaidi},
  Booktitle                = {FMCAD},
  Year                     = {2013},

  Address                  = {Portland, Oregon, USA},
  Month                    = {October},

  Abstract                 = {Verification of safety properties of concurrent programs with an arbitrary numbers of processes is an old challenge. In particular, complex parameterized protocols like FLASH are still out of the scope of state-of-the-art model checkers. In this paper, we describe a new algorithm, called Brab, that is able to automatically infer invariants strong enough to prove a protocol like FLASH. Brab computes over-approximations of backward reachable states that are checked to be unreachable in a finite instance of the system. These approximations (candidate invariants) are then model checked together with the original safety properties. Completeness of the approach is ensured by a mechanism for backtracking on spurious traces introduced by too coarse approximations.},
  File                     = {:Invariants for Finite Instances and Beyond.pdf:PDF},
  Location                 = {Portland, Oregon, USA},
  Owner                    = {lvyi},
  Timestamp                = {2014.04.01},
  Url                      = {https://www.lri.fr/~mebsout/papers/fmcad2013.pdf}
}

@InCollection{Conchon2012,
  Title                    = {Cubicle: A Parallel SMT-Based Model Checker for Parameterized Systems},
  Author                   = {Conchon, Sylvain and Goel, Amit and Krstić, Sava and Mebsout, Alain and Zaïdi, Fatiha},
  Booktitle                = {CAV 2012},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2012},
  Editor                   = {Madhusudan, P. and Seshia, SanjitA.},
  Pages                    = {718-724},
  Series                   = {LNCS},
  Volume                   = {7358},

  File                     = {:Cubicle- A Parallel SMT-Based Model Checker for Parameterized Systems.pdf:PDF},
  ISSN                     = {978-3-642-31423-0},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2012.12.17},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-31424-7_55}
}

@InProceedings{Condon2003,
  Title                    = {Automatable Verification of Sequential Consistency},
  Author                   = {Condon, Anne E. and Hu, Alan J.},
  Year                     = {2003},
  Month                    = oct,
  Number                   = {5},
  Pages                    = {431--460},
  Volume                   = {36},

  Abstract                 = {Abstract&nbsp;&nbsp; Sequential consistency is a multiprocessor memory model of both practical and theoretical importance. Designing and implementing a memory system that efficiently provides a given memory model is a challenging and error-prone task, so automated verification support would be invaluable. Unfortunately, the general problem of deciding whether a finite-state protocol implements sequential consistency is undecidable. In this paper we identify a restricted class of protocols for which verifying sequential consistency is decidable. The class includes all real sequentially consistent protocols that are known to us, and we argue why the class is likely to include all real sequentially consistent protocols. In principle, our method can be applied in a completely automated fashion for verification of all implemented protocols.},
  File                     = {:Automatable Verification of Sequential Consistency.pdf:PDF},
  Journal                  = {Theory of Computing Systems},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.10},
  Url                      = {http://dx.doi.org/10.1007/s00224-003-1082-x}
}

@InProceedings{Conway2008,
  Title                    = {Points-to Analysis, Conditional Soundness, and Proving the Absence of Errors},
  Author                   = {Christopher L. Conway and Dennis Dams and Kedar S. Namjoshi and Clark Barrett},
  Booktitle                = {Static Analysis Symposium (SAS)},
  Year                     = {2008},

  Address                  = {Valencia, Spain},
  Month                    = jul,
  Pages                    = {62--77},

  Doi                      = {http://dx.doi.org/10.1007/978-3-540-69166-2_5},
  File                     = {:Points-to Analysis, Conditional Soundness, and Proving the Absence of Errors.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@InProceedings{Cook2006,
  Author                   = {Cook, Byron and Podelski, Andreas and Rybalchenko, Andrey},
  Booktitle                = {Computer Aided Verification},
  Year                     = {2006},
  Pages                    = {415-418--},

  Comment                  = {Terminator : Beyond Safety},
  Owner                    = {lvyi},
  Refid                    = {39},
  Timestamp                = {2009.03.11},
  Url                      = {http://dx.doi.org/10.1007/11817963_37}
}

@InProceedings{Cook2006a,
  Title                    = {Terminator : Beyond Safety},
  Author                   = {Cook, Byron and Podelski, Andreas and Rybalchenko, Andrey},
  Booktitle                = {Computer Aided Verification},
  Year                     = {2006},
  Pages                    = {415-418--},

  Abstract                 = {Previous symbolic software model checkers (i.e., program analysis tools based on predicate abstraction, pushdown model checking and iterative counterexample-guided abstraction refinement, etc.) are restricted to safety properties. Terminator is the first software model checker for termination. It is now being used to prove that device driver dispatch routines always return to their caller (or return counterexamples if they if they fail to terminate).},
  Owner                    = {lvyi},
  Refid                    = {23},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/11817963_37}
}

@InProceedings{Cook2005,
  Title                    = {Abstraction Refinement for Termination},
  Author                   = {Cook, Byron and Podelski, Andreas and Rybalchenko, Andrey},
  Year                     = {2005},
  Pages                    = {87--101},

  Abstract                 = {Abstraction can often lead to spurious counterexamples. Counterexample-guided abstraction refinement is a method of strengthening abstractions based on the analysis of these spurious counterexamples. For invariance properties, a counterexample is a finite trace that violates the invariant; it is spurious if it is possible in the abstraction but not in the original system. When proving termination or other liveness properties of infinite-state systems, a useful notion of spurious counterexamples has remained an open problem. For this reason, no counterexample-guided abstraction refinement algorithm was known for termination. In this paper, we address this problem and present the first known automatic counterexample-guided abstraction refinement algorithm for termination proofs. We exploit recent results on transition invariants and transition predicate abstraction. We identify two reasons for spuriousness: abstractions that are too coarse, and candidate transition invariants that are too strong. Our counterexample-guided abstraction refinement algorithm successively weakens candidate transition invariants and refines the abstraction.},
  File                     = {:Abstraction Refinement for Termination.pdf:PDF},
  Journal                  = {Static Analysis},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.26},
  Url                      = {http://dx.doi.org/10.1007/11547662_8}
}

@InProceedings{Courtois1971,
  Title                    = {Concurrent control with "readers"and "writers"},
  Author                   = {Courtois, P. J. and Heymans, F. and Parnas, D. L.},
  Year                     = {1971},
  Number                   = {10},
  Pages                    = {667--668},
  Publisher                = {ACM},
  Volume                   = {14},

  File                     = {:Concurrent control with “readers” and “writers”.pdf:PDF},
  Journal                  = {Commun. ACM},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.03}
}

@Article{Cousot1992,
  Title                    = {Comparing the Galois connection and widening/narrowing approaches to abstract interpretation},
  Author                   = {Cousot, Patrick and Cousot, Radhia},
  Journal                  = {Programming Language Implementation and Logic Programming},
  Year                     = {1992},
  Pages                    = {269--295},

  Abstract                 = {The use of infinite abstract domains with widening and narrowing for accelerating the convergence of abstract interpretations is shown to be more powerful than the Galois connection approach restricted to finite lattices (or lattices satisfying the chain condition).},
  File                     = {:Comparing the Galois connection and widening-narrowing approaches to abstract interpretation.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.14},
  Url                      = {http://dx.doi.org/10.1007/3-540-55844-6_101}
}

@Article{Coward1988,
  Title                    = {Symbolic execution systems-a review},
  Author                   = {Coward, P.D.},
  Journal                  = {Software Engineering Journal},
  Year                     = {1988},
  Number                   = {6},
  Pages                    = {229--239},

  Booktitle                = {Software Engineering Journal},
  File                     = {:Symbolic execution systems-a review.pdf:PDF},
  ISSN                     = {0268-6961},
  Owner                    = {lvyi},
  Timestamp                = {2011.05.25}
}

@Other{Currie2006,
  Title                    = {Embedded Software Verification Using Symbolic Execution and Uninterpreted Functions},
  Author                   = {Currie, David and Feng, Xiushan and Fujita, Masahiro and Hu, Alan and Kwan, Mark and Rajan, Sreeranga},
  File                     = {:Embedded Software Verification Using Symbolic Execution and Uninterpreted Functions.pdf:PDF},
  ISSN                     = {0885-7458},
  Journal                  = {International Journal of Parallel Programming},
  Keywords                 = {Computer Science},
  Number                   = {1},
  Owner                    = {lvyi},
  Pages                    = {61-91--91},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.06.09},
  Url                      = {http://dx.doi.org/10.1007/s10766-005-0004-8},
  Volume                   = {34},
  Year                     = {2006}
}

@InProceedings{Cuvillo2006,
  Title                    = {Landing openMP on cyclops-64: an efficient mapping of openMP to a many-core system-on-a-chip},
  Author                   = {del Cuvillo, Juan and Zhu, Weirong and Gao, Guang},
  Booktitle                = {Proceedings of the 3rd conference on Computing frontiers},
  Year                     = {2006},

  Address                  = {Ischia, Italy},
  Pages                    = {41--50},
  Publisher                = {ACM},

  File                     = {:Landing openMP on cyclops-64- an efficient mapping of openMP to a many-core system-on-a-chip.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.03}
}

@Article{DSilva2008,
  Title                    = {A Survey of Automated Techniques for Formal Software Verification},
  Author                   = {D'Silva, V. and Kroening, D. and Weissenbacher, G.},
  Journal                  = {Computer-Aided Design of Integrated Circuits and Systems, IEEE Transactions on DOI - 10.1109/TCAD.2008.923410},
  Year                     = {2008},
  Number                   = {7},
  Pages                    = {1165--1178},
  Volume                   = {27},

  Abstract                 = {The quality and the correctness of software are often the greatest concern in electronic systems. Formal verification tools can provide a guarantee that a design is free of specific flaws. This paper surveys algorithms that perform automatic static analysis of software to detect programming errors or prove their absence. The three techniques considered are static analysis with abstract domains, model checking, and bounded model checking. A short tutorial on these techniques is provided, highlighting their differences when applied to practical problems. This paper also surveys tools implementing these techniques and describes their merits and shortcomings.},
  Booktitle                = {Computer-Aided Design of Integrated Circuits and Systems, IEEE Transactions on},
  File                     = {:A Survey of Automated Techniques for Formal Software Verification.pdf:PDF},
  ISSN                     = {0278-0070},
  Keywords                 = {electronic engineering computing, program diagnostics, program verification, abstract domains, automated techniques, automatic static analysis, bounded model checking, electronic systems, formal software verification, formal verification tools, programming error detection},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09}
}

@InProceedings{Dam1996,
  Title                    = {Model Checking Mobile Processes},
  Author                   = {Dam, M.},
  Year                     = {1996},
  Number                   = {1},
  Pages                    = {35-52--},
  Volume                   = {129},

  Comment                  = {Model Checking Mobile Processes
197433539
0890-5401},
  Journal                  = {INFORMATION AND COMPUTATION},
  Owner                    = {lvyi},
  Refid                    = {77},
  Timestamp                = {2008.06.11}
}

@InProceedings{Das2004,
  Title                    = {Formal verification coverage: computing the coverage gap between temporal specifications},
  Author                   = {A. Das and P. Basu and A. Banerjee and P. Dasgupta and P. P. Chakrabarti and C. Rama Mohan and L. Fix and R. Armoni},
  Booktitle                = {ICCAD '04: Proceedings of the 2004 IEEE/ACM International conference on Computer-aided design},
  Year                     = {2004},

  Address                  = {Washington, DC, USA},
  Pages                    = {198--203},
  Publisher                = {IEEE Computer Society},

  Doi                      = {http://dx.doi.org/10.1109/ICCAD.2004.1382571},
  File                     = {:Formal verification coverage- computing the coverage gap between temporal specifications.pdf:PDF},
  ISBN                     = {0-7803-8702-3},
  Timestamp                = {2008.08.08}
}

@InProceedings{Das1999,
  Title                    = {Experience with Predicate Abstraction},
  Author                   = {Das, Satyaki and Dill, David and Park, Seungjoon},
  Year                     = {1999},
  Pages                    = {687--687},

  Abstract                 = {This reports some experiences with a recently-implemented prototype system for verification using predicate abstraction, based on the method of Graf and Saïdi [9]. Systems are described using a language of iterated guarded commands, called Murø -- (since it is a simplified version of our Murø protocol description language). The system makes use of two libraries: SVC [1] (an efficient decision procedure for quantifier- free first-order logic) and the CMU BDD library. The use of these libraries increases the scope of problems that can be handled by predicate abstraction through increased efficiency, especially in SVC, which is typically called thousands of times. The verification system also provides limited support for quantifiers in formulas. The system has been applied successfully to two nontrivial examples: the Flash multiprocessor cache coherence protocol, and a concurrent garbage collection algorithm. Verification of the garbage collector algorithm required proving properties simple of graphs, which was also done using predicate abstraction.},
  File                     = {:Experience with Predicate Abstraction.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/3-540-48683-6_16}
}

@Article{Daum2009,
  Title                    = {Proving Fairness and Implementation Correctness of a Microkernel Scheduler},
  Author                   = {Daum, Matthias and DÃ¶rrenbÃ¤cher, Jan and Wolff, Burkhart},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {349--388},
  Volume                   = {42},

  Abstract                 = {We report on the formal proof of a microkernelâs key property, namely that its multi-priority process scheduler guarantees progress, i.e., strong fairness. The proof architecture links a layer of behavioral reasoning over system-trace sets with a concrete, fairly realistic implementation written in C. Our microkernel provides an infrastructure for memory virtualization, for communication with hardware devices, for processes (represented as a sequence of assembly instructions, which are executed concurrently over an underlying, formally defined processor), and for inter-process communication (IPC) via synchronous message passing. The kernel establishes process switches according to IPCs and timer-events; the scheduling of process switches, however, follows a hierarchy of priorities, favoring, e.g., system processes over application processes over maintenance processes. Besides the quite substantial models developed in Isabelle/HOL and the formal clarification of their relationship, we provide a detailed analysis what formal requirements a microkernel imposes on the key ingredients (hardware, timers, machine-dependent code) in order to establish the correct operation of the overall system. On the methodological side, we show how early modeling with foresight to the later verification has substantially helped our project.},
  File                     = {:Proving Fairness and Implementation Correctness of a Microkernel Scheduler.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9119-8}
}

@Other{Daws1998,
  Title                    = {Model checking of real-time reachability properties using abstractions},
  Abstract                 = {Practical real-time model checking suffers from the stateexplosion problem: the size of the state space grows exponentially with many system parameters: number of clocks, size of constants, number of system components. To cope with state explosion, we propose to use abstractions reducing the state-space while preserving reachability properties. Four exact, plus one safe abstractions are defined. In the main abstraction (simulation) a concrete state is mapped to a symbolic abstract state (a set of concrete states). The other four abstractions are defined on top of the simulation one. They can be computed on-the-fly in a completely orthogonal manner and thus can be combined to yield better reductions. A prototype implementation in the tool Kronos has permitted to verify two benchmark examples with a significant scale-up in size.},
  Author                   = {Daws, Conrado and Tripakis, Stavros},
  Booktitle                = {Lecture Notes in Computer Science},
  Editor                   = {Steffen, Bernhard},
  File                     = {:D\:\\papers\\Model Checking of Real-Time Reachability Properties Using Abstractions.pdf:PDF},
  Owner                    = {lvyi},
  Pages                    = {313--329},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2011.06.10},
  Url                      = {http://dx.doi.org/10.1007/BFb0054180},
  Volume                   = {1384},
  Year                     = {1998}
}

@InProceedings{DePaula2008,
  Title                    = {BackSpace: Formal Analysis for Post-Silicon Debug},
  Author                   = {De Paula, F.M. and Gort, M. and Hu, A.J. and Wilton, S. and Yang, Jin},
  Booktitle                = {Formal Methods in Computer-Aided Design, 2008. FMCAD '08.},
  Year                     = {2008},
  Pages                    = {1--10},

  Abstract                 = {Post-silicon debug is the problem of determining what's wrong when the fabricated chip of a new design behaves incorrectly. This problem now consumes over half of the overall verification effort on large designs, and the problem is growing worse. We introduce a new paradigm for using formal analysis, augmented with some on-chip hardware support, to automatically compute error traces that lead to an observed buggy state, thereby greatly simplifying the post-silicon debug problem. Our preliminary simulation experiments demonstrate the potential of our approach: we can "backspace" hundreds of cycles from randomly selected states of some sample designs. Our preliminary architectural studies propose some possible implementations and show that the on-chip overhead can be reasonable. We conclude by surveying future research directions.},
  File                     = {:BackSpace- Formal Analysis for Post-Silicon Debug.pdf:PDF},
  Keywords                 = {formal verification, integrated circuit design, integrated circuit testing, BackSpace, design error, formal analysis, on-chip hardware support, postsilicon debug},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.13}
}

@InProceedings{Delzanno2000,
  Title                    = {Automatic Verification of Parameterized Cache Coherence Protocols},
  Author                   = {Delzanno, Giorgio},
  Year                     = {2000},
  Pages                    = {53--68},

  Abstract                 = {We propose a new method for the verification of parameterized cache coherence protocols. Cache coherence protocols are used to maintain data consistency in multiprocessor systems equipped with local fast caches. In our approach we use arithmetic constraints to model possibly infinite sets of global states of a multiprocessor system with many identical caches. In preliminary experiments using symbolic model checkers for infinite-state systems based on real arithmetics (HyTech [HHW97] and DMC [DP99])) we have automatically verified safety properties for parameterized versions of widely implemented write-invalidate and write-update cache coherence policies like the Mesi, Berkeley, Illinois, Firefly and Dragon protocols [Han93]. With this application, we show that symbolic model checking tools originally designed for hybrid and concurrent systems can be applied successfully to a new class of infinite-state systems of practical interest.},
  File                     = {:Automatic Verification of Parameterized Cache Coherence Protocols.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/10722167_8}
}

@InProceedings{DeOrio2009,
  Title                    = {Dacota: Post-silicon validation of the memory subsystem in multi-core designs},
  Author                   = {DeOrio, A. and Wagner, I. and Bertacco, V.},
  Booktitle                = {High Performance Computer Architecture, 2009. HPCA 2009. IEEE 15th International Symposium on},
  Year                     = {2009},
  Pages                    = {405--416},

  File                     = {:Dacota- Post-silicon validation of the memory subsystem in multi-core designs.pdf:PDF},
  ISSN                     = {1530-0897},
  Keywords                 = {cache storage, circuit CAD, formal verification, integrated circuit design, microprocessor chips, Dacota, cache storage, chip multiprocessors, customer shipment, data coloring scheme, design verification, distributed algorithm, functional errors, functional validation, internal node observability, log memory access, memory operation ordering validation, modern processor designs, multicore designs, nondeterministic memory subsystems, post-silicon validation, production schedules},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.02}
}

@InProceedings{Dijkstra1975,
  Title                    = {Guarded commands, nondeterminacy and formal derivation of programs},
  Author                   = {Dijkstra, E.W.},
  Year                     = {1975},
  Number                   = {8},
  Pages                    = {453--457},
  Publisher                = {ACM New York, NY, USA},
  Volume                   = {18},

  File                     = {:Guarded commands, nondeterminacy and formal derivation of programs.pdf:PDF},
  Journal                  = {Communications of the ACM},
  Timestamp                = {2009.02.19}
}

@InCollection{Dill1996,
  Title                    = {The Murphi verification system},
  Author                   = {Dill, DavidL.},
  Booktitle                = {CAV},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {1996},
  Editor                   = {Alur, Rajeev and Henzinger, ThomasA.},
  Pages                    = {390-393},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {1102},

  Doi                      = {10.1007/3-540-61474-5_86},
  ISBN                     = {978-3-540-61474-6},
  Owner                    = {lvyi},
  Timestamp                = {2013.01.09},
  Url                      = {http://dx.doi.org/10.1007/3-540-61474-5_86}
}

@Article{Dong2008,
  Title                    = {Timed Automata Patterns},
  Author                   = {Dong, Jin Song and Hao, Ping and Qin, Shengchao and Sun, Jun and Yi, Wang},
  Journal                  = {IEEE Trans. Softw. Eng.},
  Year                     = {2008},
  Number                   = {6},
  Pages                    = {844--859},
  Volume                   = {34},

  Doi                      = {10.1109/TSE.2008.52},
  File                     = {:Timed Automata Patterns.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {IEEE Press},
  Timestamp                = {2011.06.13}
}

@Article{Draeger2009,
  Title                    = {Directed model checking with distance-preserving abstractions},
  Author                   = {Dräger, Klaus and Finkbeiner, Bernd and Podelski, Andreas},
  Journal                  = {International Journal on Software Tools for Technology Transfer (STTT)},
  Year                     = {2009},

  Month                    = feb,
  Number                   = {1},
  Pages                    = {27--37},
  Volume                   = {11},

  Abstract                 = {Abstract&nbsp;&nbsp;In directed model checking, the traversal of the state space is guided by an estimate of the distance from the current state to the nearest error state. This paper presents a distance-preserving abstraction for concurrent systems that allows one to compute an interesting estimate of the error distance without hitting the state explosion problem. Our experiments show a dramatic reduction both in the number of states explored by the model checker and in the total runtime.},
  File                     = {:Directed model checking with distance-preserving abstractions.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.10.04},
  Url                      = {http://dx.doi.org/10.1007/s10009-008-0092-z}
}

@Article{Dubois1988,
  Title                    = {Synchronization, coherence, and event ordering in multiprocessors},
  Author                   = {Dubois, M. and Scheurich, C. and Briggs, F.A.},
  Journal                  = {Computer},
  Year                     = {1988},
  Number                   = {2},
  Pages                    = {9--21},
  Volume                   = {21},

  Booktitle                = {Computer},
  ISSN                     = {0018-9162},
  Keywords                 = {multiprocessing systems, operating systems (computers), synchronisation, user interfaces, cache coherence problem, coherence, event ordering, multiprocessors, operating-system, speedup-oriented multiprocessor systems, synchronization, throughput oriented systems, user interface, user level, weak ordering},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.07}
}

@InProceedings{Dubois1986,
  Title                    = {Memory access buffering in multiprocessors},
  Author                   = {Dubois, M. and Scheurich, C. and Briggs, F.},
  Year                     = {1986},
  Number                   = {2},
  Pages                    = {434--442},
  Publisher                = {ACM},
  Volume                   = {14},

  File                     = {:Memory access buffering in multiprocessors.pdf:PDF},
  Journal                  = {SIGARCH Comput. Archit. News},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Dwyer2005,
  Title                    = {Building Your Own Software Model Checker Using the Bogor Extensible Model Checking Framework},
  Author                   = {Dwyer, M. B. and Hatcliff, J. and Hoosier, M. and Robby},
  Year                     = {2005},
  Number                   = {3576},
  Pages                    = {148-152--},

  Comment                  = {Building Your Own Software Model Checker Using the Bogor Extensible Model Checking Framework
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {21},
  Timestamp                = {2008.06.11}
}

@InProceedings{E1991,
  Title                    = {A primer on Galois connections},
  Author                   = {M. Ern E and J. Koslowski and A. Melton and G. E. Strecker},
  Booktitle                = {York Academy of Science},
  Year                     = {1991},

  File                     = {:A primer on Galois connections.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@Article{Ebert2009,
  Title                    = {Embedded Software: Facts, Figures, and Future},
  Author                   = {Ebert, C. and Jones, C.},
  Journal                  = {Computer DOI - 10.1109/MC.2009.118},
  Year                     = {2009},
  Number                   = {4},
  Pages                    = {42--52},
  Volume                   = {42},

  Booktitle                = {Computer},
  File                     = {:Embedded Software- Facts, Figures, and Future.pdf:PDF},
  ISSN                     = {0018-9162},
  Keywords                 = {embedded systems, software engineering, benchmarking data, embedded-software engineering},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09}
}

@InProceedings{Emerson1991,
  Title                    = {Tree automata, mu-calculus and determinacy Tree automata, mu-calculus and determinacy},
  Author                   = {Emerson, E. A. and Emerson, E. A. and Jutla, C. S.},
  Booktitle                = {Foundations of Computer Science, 1991. Proceedings., 32nd Annual Symposium on},
  Year                     = {1991},
  Pages                    = {368-377--},

  Comment                  = {Tree automata, mu-calculus and determinacy Tree automata, mu-calculus and determinacy},
  Keywords                 = {decidability finite automata trees (mathematics) complementation decidability determinacy equivalence finite automata infinite games infinite trees mu-calculus online algorithms},
  Owner                    = {lvyi},
  Refid                    = {47},
  Timestamp                = {2008.06.11}
}

@InProceedings{Emerson1999,
  Title                    = {The Complexity of Tree Automata and Logics of Programs},
  Author                   = {Emerson, E. A. and Jutla, C. S.},
  Year                     = {1999},
  Pages                    = {132-158--},
  Volume                   = {29},

  Comment                  = {The Complexity of Tree Automata and Logics of Programs
193863370
0097-5397},
  Journal                  = {SIAM JOURNAL ON COMPUTING},
  Owner                    = {lvyi},
  Refid                    = {46},
  Timestamp                = {2008.06.11}
}

@InProceedings{Emerson2003,
  Title                    = {Exact and Efficient Verification of Parameterized Cache Coherence Protocols},
  Author                   = {Emerson, E. A. and Kahlon, V.},
  Year                     = {2003},
  Number                   = {2860},
  Pages                    = {247-262--},

  Comment                  = {Exact and Efficient Verification of Parameterized Cache Coherence Protocols
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {42},
  Timestamp                = {2008.06.11}
}

@InProceedings{Emerson1986,
  Title                    = {Efficient Model Checking in Fragments of the Propositional Mu-Calculus (Extended Abstract)},
  Author                   = {Emerson, E. Allen and Lei, Chin-Laung},
  Booktitle                = {LICS},
  Year                     = {1986},
  Pages                    = {267-278--},

  Comment                  = {Efficient Model Checking in Fragments of the Propositional Mu-Calculus (Extended Abstract)
Emerson1986
inproceedings DBLP:conf/lics/LICS1},
  Owner                    = {lvyi},
  Refid                    = {48},
  Timestamp                = {2008.06.11}
}

@InProceedings{Emerson2000,
  Author                   = {Emerson, E. and Kahlon, Vineet},
  Booktitle                = {Automated Deduction - CADE-17},
  Year                     = {2000},
  Pages                    = {236-254--},

  Comment                  = {Reducing Model Checking of the Many to the Few},
  Owner                    = {lvyi},
  Refid                    = {26},
  Timestamp                = {2009.03.11},
  Url                      = {http://dx.doi.org/10.1007/10721959_19}
}

@InProceedings{Emerson2000a,
  Title                    = {Reducing Model Checking of the Many to the Few
},
  Author                   = {Emerson, E. and Kahlon, Vineet},
  Booktitle                = {Automated Deduction - CADE-17},
  Year                     = {2000},
  Pages                    = {236-254--},

  Abstract                 = {The Parameterized Model Checking Problem (PMCP) is to determine whether a temporal property is true for every size instance of a system comprised of many homogenous processes. Unfortunately, it is undecidable in general. We are able to establish, nonetheless, decidability of the PMCP in quite a broad framework. We consider asynchronous systems comprised of an arbitrary number of homogeneous copies of a generic process template. The process template is represented as a synchronization skeleton while correctness properties are expressed using Indexed CTL*∖ X. We reduce model checking for systems of arbitrary size n to model checking for systems of size up to (of) a small cutoff size c. This establishes decidability of PMCP as it is only necessary to model check a finite number of relatively small systems. Efficient decidability can be obtained in some cases. The results generalize to systems comprised of multiple heterogeneous classes of processes, where each class is instantiated by many homogenous copies of the class template (e.g., m readers and n writers).},
  File                     = {:Reducing Model Checking of the Many to the Few.pdf:PDF},
  Owner                    = {lvyi},
  Refid                    = {40},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/10721959_19}
}

@InCollection{Emerson2006,
  Title                    = {Reducing Model Checking of the Few to the One: Formal Methods and Software Engineering},
  Author                   = {Emerson, E. and Trefler, Richard and Wahl, Thomas},
  Booktitle                = {Lecture Notes in Computer Science},
  Publisher                = {Springer Berlin / Heidelberg},
  Year                     = {2006},
  Editor                   = {Liu, Zhiming and He, Jifeng},
  Pages                    = {94--113},
  Volume                   = {4260},

  Abstract                 = {Verification of parameterized systems for an arbitrary number of instances is generally undecidable. Existing approaches resort to non-trivial restrictions on the system or lack automation. In practice, applications can often provide a suitable bound on the parameter size. We propose a new technique toward the bounded formulation of parameterized reasoning: how to efficiently verify properties of a family of systems over a large finite parameter range. We show how to accomplish this with a single verification run on a model that aggregates the individual instances. Such a run takes significantly less time than if the systems were considered one by one. Our method is applicable to a completely inhomogeneous family of systems, where properties may not even be preserved across instances. In this case the method exposes the parameter values for which the verification fails. If symmetry is present in the systems, it is inherited by the aggregate representation, allowing for verification over a reduced model. Our technique is fully automatic and requires no approximation.},
  File                     = {:Reducing Model Checking of the Few to the One.pdf:PDF},
  ISSN                     = {978-3-540-47460-9},
  Owner                    = {lvyi},
  Timestamp                = {2011.09.26},
  Url                      = {http://dx.doi.org/10.1007/11901433_6}
}

@Article{Ernst2007,
  Title                    = {The Daikon system for dynamic detection of likely invariants},
  Author                   = {Michael D. Ernst and Jeff H. Perkins and Philip J. Guo and Stephen McCamant and Carlos Pacheco and Matthew S. Tschantz and Chen Xiao},
  Journal                  = {Science of Computer Programming},
  Year                     = {2007},
  Note                     = {Special issue on Experimental Software and Toolkits},
  Number                   = {1–3},
  Pages                    = {35 - 45},
  Volume                   = {69},
  Doi                      = {10.1016/j.scico.2007.01.015},
  File                     = {:The Daikon system for dynamic detection of likely invariants.pdf:PDF},
  ISSN                     = {0167-6423},
  Keywords                 = {Daikon},
  Owner                    = {lvyi},
  Timestamp                = {2013.05.09},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S016764230700161X}
}

@Article{Fan2012,
  Title                    = {Godson-T: An Efficient Many-Core Processor Exploring Thread-Level Parallelism},
  Author                   = {Fan, Dongrui and Zhang, Hao and Wang, Da and Ye, Xiaochun and Song, Fenglong and Li, Guojie and Sun, Ninghui},
  Journal                  = {Micro, IEEE},
  Year                     = {2012},
  Number                   = {2},
  Pages                    = {38--47},
  Volume                   = {32},

  Booktitle                = {Micro, IEEE},
  File                     = {:Godson-T- An Efficient Many-Core Processor Exploring Thread-Level Parallelism.pdf:PDF},
  ISSN                     = {0272-1732},
  Keywords                 = {Coherence, Instruction sets, Process control, Programming, Registers, Synchronization, System-on-a-chip, microprocessor chips, multi-threading, multiprocessing systems, performance evaluation, resource allocation, scientific information systems, software libraries, system-on-chip, GODSON-T, Pthreads-like programming model, data transfer agents, flexible programmability, hardware-supported synchronization mechanism, highly efficient runtime system, many-core processor design, on-chip resource utilization, parallel libraries, parallel scientific computing, performance efficiency, region-based cache coherence protocol, thread-level parallelism, Godson-T, Pthreads, many-core processor, microarchitecture, parallel computing},
  Owner                    = {lvyi},
  Timestamp                = {2013.01.07}
}

@InProceedings{Fan2011,
  Title                    = {The Highly-Efficient Architecture of Godson-T Many-Core Processor},
  Author                   = {Dongrui Fan and Hao Zhang and Da Wang and Xiaochun Ye and Fenglong Song and Junchao Zhang and Lingjun Fan},
  Booktitle                = {The 23rd Hot Chips: A Symp. High Performance Chips(HotChips)},
  Year                     = {2011},

  Owner                    = {lvyi},
  Timestamp                = {2012.12.21}
}

@Article{Fan2009,
  Title                    = {Godson-T: An Efficient Many-Core Architecture for Parallel Program Executions},
  Author                   = {Fan, Dong-Rui and Yuan, Nan and Zhang, Jun-Chao and Zhou, Yong-Bin and Lin, Wei and Song, Feng-Long and Ye, Xiao-Chun and Huang, He and Yu, Lei and Long, Guo-Ping and Zhang, Hao and Liu, Lei},
  Journal                  = {Journal of Computer Science and Technology},
  Year                     = {2009},
  Number                   = {6},
  Pages                    = {1061-1073},
  Volume                   = {24},

  Doi                      = {10.1007/s11390-009-9295-3},
  File                     = {:Godson-T-An Efficient Many-Core Architecture for Parallel Program Executions.pdf:PDF},
  ISSN                     = {1000-9000},
  Keywords                 = {many-core; parallel computing; multithread; data communication; thread synchronization; runtime system},
  Language                 = {English},
  Owner                    = {lvyi},
  Publisher                = {Springer US},
  Timestamp                = {2014.01.24},
  Url                      = {http://dx.doi.org/10.1007/s11390-009-9295-3}
}

@Article{Feng2009,
  Title                    = {Certifying Low-Level Programs with Hardware Interrupts and Preemptive Threads},
  Author                   = {Feng, Xinyu and Shao, Zhong and Guo, Yu and Dong, Yuan},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {301--347},
  Volume                   = {42},

  Abstract                 = {Hardware interrupts are widely used in the worldâs critical software systems to support preemptive threads, device drivers, operating system kernels, and hypervisors. Handling interrupts properly is an essential component of low-level system programming. Unfortunately, interrupts are also extremely hard to reason about: they dramatically alter the program control flow and complicate the invariants in low-level concurrent code (e.g., implementation of synchronization primitives). Existing formal verification techniquesâincluding Hoare logic, typed assembly language, concurrent separation logic, and the assume-guarantee methodâhave consistently ignored the issues of interrupts; this severely limits the applicability and power of todayâs program verification systems. In this paper we present a novel Hoare-logic-like framework for certifying low-level system programs involving both hardware interrupts and preemptive threads. We show that enabling and disabling interrupts can be formalized precisely using simple ownership-transfer semantics, and the same technique also extends to the concurrent setting. By carefully reasoning about the interaction among interrupt handlers, context switching, and synchronization libraries, we are able toâfor the first timeâsuccessfully certify a preemptive thread implementation and a large number of common synchronization primitives. Our work provides a foundation for reasoning about interrupt-based kernel programs and makes an important advance toward building fully certified operating system kernels and hypervisors.},
  File                     = {:Certifying Low-Level Programs with Hardware Interrupts and Preemptive Threads.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9118-9}
}

@Conference{Ferreira,
  Title                    = {Verifying Intel flash file system core specification},
  Author                   = {Ferreira, MA and Silva, SS and Oliveira, JN},
  Booktitle                = {Modelling and Analysis in VDM: Proceedings of the Fourth VDM/Overture Workshop},
  Pages                    = {54},

  File                     = {:Verifying Intel Flash File System Core Specification.pdf:PDF},
  Timestamp                = {2009.06.11}
}

@Article{Flanagan2005,
  Title                    = {Dynamic partial-order reduction for model checking software},
  Author                   = {Flanagan, Cormac and Godefroid, Patrice},
  Journal                  = {SIGPLAN Not.},
  Year                     = {2005},
  Number                   = {1},
  Pages                    = {110--121},
  Volume                   = {40},

  Doi                      = {http://doi.acm.org/10.1145/1047659.1040315},
  File                     = {:Dynamic partial-order reduction for model checking software.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2010.04.22}
}

@Article{Gallardo2009,
  Title                    = {Model Checking Dynamic Memory Allocation in Operating Systems},
  Author                   = {Gallardo, MarÃ­a del Mar and Merino, Pedro and SanÃ¡n, David},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {229--264},
  Volume                   = {42},

  Abstract                 = {Most system software, including operating systems, contains dynamic data structures whose shape and contents should satisfy design requirements during execution. Model checking technology, a powerful tool for automatic verification based on state exploration, should be adapted to deal with this kind of structure. This paper presents a method to specify and verify properties of C programs with dynamic memory management. The proposal contains two main contributions. First, we present a novel method to extend explicit model checking of C programs with dynamic memory management. The approach consists of defining a canonical representation of the heap , moving most of the information from the state vector to a global structure. We provide a formal semantics of the method that allows us to prove the soundness of the representation. Secondly, we combine temporal LTL and CTL logic to define a two-dimensional logic, in time and space, which is suitable to specify complex properties of programs with dynamic data structures. We also define the model checking algorithms for this logic. The whole method has been implemented in the well known model checker SPIN, and illustrated with an example where a typical memory reader/writer driver is modelled and analyzed.},
  File                     = {:Model Checking Dynamic Memory Allocation in Operating Systems.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9124-y}
}

@InCollection{Galloway2009,
  Title                    = {Model-Checking the Linux Virtual File System: Verification, Model Checking, and Abstract Interpretation},
  Author                   = {Galloway, Andy and LÃ¼ttgen, Gerald and MÃ¼hlberg, Jan and Siminiceanu, Radu},
  Booktitle                = {Lecture Notes in Computer Science},
  Publisher                = {Springer Berlin / Heidelberg},
  Year                     = {2009},
  Editor                   = {Jones, Neil and MÃ¼ller-Olm, Markus},
  Pages                    = {74--88},
  Volume                   = {5403},

  Abstract                 = {This paper presents a case study in modelling and verifying the Linux Virtual File System (VFS). Our work is set in the context of Hoareâs verification grand challenge and, in particular, Joshi and Holzmannâs mini-challenge to build a verifiable file system. The aim of the study is to assess the viability of retrospective verification of a VFS implementation using model-checking technology. We show how to extract an executable model of the Linux VFS implementation, validate the model by employing the simulation capabilities of SPIN, and analyse it for adherence to data integrity constraints and deadlock freedom using the SMART model checker.},
  File                     = {:Model-Checking the Linux Virtual File System.pdf:PDF},
  ISSN                     = {978-3-540-93899-6},
  Owner                    = {lvyi},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-93900-9_10}
}

@Other{Galloway2009a,
  Title                    = {Model-Checking the Linux Virtual File System},
  Abstract                 = {This paper presents a case study in modelling and verifying the Linux Virtual File System (VFS). Our work is set in the context of Hoare’s verification grand challenge and, in particular, Joshi and Holzmann’s mini-challenge to build a verifiable file system. The aim of the study is to assess the viability of retrospective verification of a VFS implementation using model-checking technology. We show how to extract an executable model of the Linux VFS implementation, validate the model by employing the simulation capabilities of SPIN, and analyse it for adherence to data integrity constraints and deadlock freedom using the SMART model checker.},
  Author                   = {Galloway, Andy and Lüttgen, Gerald and Mühlberg, Jan and Siminiceanu, Radu},
  File                     = {:Model-Checking the Linux Virtual File System.pdf:PDF},
  Journal                  = {Verification, Model Checking, and Abstract Interpretation},
  Owner                    = {lvyi},
  Pages                    = {74--88},
  Timestamp                = {2009.06.11},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-93900-9_10},
  Year                     = {2009}
}

@TechReport{Galloway2007,
  Title                    = {Model-checking part of a Linux file system},
  Author                   = {Galloway, A. and M{\"u}hlberg, J.T. and Siminiceanu, R. and L{\"u}ttgen, G.},
  Institution              = {Technical Report YCS-2007-423, Department of Computer Science, University of York, UK},
  Year                     = {2007},

  File                     = {:Model-checking part of a Linux file system.pdf:PDF},
  Timestamp                = {2009.06.11}
}

@InProceedings{Ganai2005,
  Title                    = {Verification of embedded memory systems using efficient memory modeling},
  Author                   = {Ganai, M.K. and Gupta, A. and Ashar, P.},
  Booktitle                = {Design, Automation and Test in Europe, 2005. Proceedings},
  Year                     = {2005},
  Pages                    = {1096--1101 Vol. 2},

  File                     = {:Verification of embedded memory systems using efficient memory modeling.pdf:PDF},
  ISSN                     = {1530-1591},
  Keywords                 = {embedded systems, formal verification, integrated circuit design, integrated circuit modelling, logic design, semiconductor storage, system-on-chip, SoC, bounded model checking, control logic, correctness proofs, efficient memory modeling, embedded memory system verification, formal verification, inductive proofs, industry designs, multiple memories, multiple read ports, multiple write ports, software programs},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@Article{Gao2000,
  Title                    = {Location consistency: a new memory model and cache consistency protocol},
  Author                   = {Gao, G.R. and Sarkar, V.},
  Journal                  = {Computers, IEEE Transactions on},
  Year                     = {2000},
  Number                   = {8},
  Pages                    = {798-813},
  Volume                   = {49},

  Doi                      = {10.1109/12.868026},
  File                     = {:Location consistency-a new memory model and cache consistency protocol.pdf:PDF},
  ISSN                     = {0018-9340},
  Keywords                 = {memory protocols;parallel programming;synchronisation;cache consistency protocol;location consistency;memory consistency model;memory model;parallel programs;single write ownership;snooping;write operations;Coherence;Computer architecture;Design optimization;Electronic mail;Hardware;Multiprocessing systems;Optimizing compilers;Parallel processing;Protocols;Writing},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.29}
}

@Book{Gehrke2007,
  Title                    = {Distributed Services with OpenAFS: for Enterprise and Education},
  Author                   = {Gehrke, W.A. and Milicchio, F.},
  Publisher                = {Springer-Verlag New York, Inc. Secaucus, NJ, USA},
  Year                     = {2007},

  Timestamp                = {2008.08.08}
}

@InProceedings{German2004,
  Title                    = {Tutorial on verification of distributed cache memory protocols},
  Author                   = {Steven M. German},
  Booktitle                = {FMCAD 2004},
  Year                     = {2004},

  Owner                    = {lvyi},
  Timestamp                = {2013.01.03}
}

@Other{Ghafari2009,
  Title                    = {Verification of Parameterized Systems with Combinations of Abstract Domains},
  Abstract                 = {We present a framework for verifying safety properties of parameterized systems. Our framework is based on a combination of Abstract Interpretation and a backward-reachability algorithm. A parameterized system is a family of systems in which n processes execute the same program concurrently. The problem of parameterized verification is to decide whether for all values of n the system with n processes is correct. Despite well-known difficulties in analyzing such systems, they are of significant interest as they can describe a wide range of protocols from mutual-exclusion to transactional memory. We assume that neither the number of processes nor their statespaces are bounded a priori. Hence, each process may be infinte-state. Our key contribution is an abstract domain in which each element (a) represents the lower bound on the number of processes at a control location and (b) employs a numeric abstract domain to capture arithmetic relations between variables of the processes. We also provide an extrapolation operator for the domain to guarantee sound termination of the backward-reachability algorithm. Our abstract domain is generic enough to be instantiated by different well-known numeric abstract domains such as octagons and polyhedra. This makes the framework applicable to a wide range of parameterized systems.},
  Author                   = {Ghafari, Naghmeh and Gurfinkel, Arie and Trefler, Richard},
  File                     = {:Verification of Parameterized Systems with Combinations of Abstract Domains.pdf:PDF},
  Journal                  = {Formal Techniques for Distributed Systems},
  Owner                    = {lvyi},
  Pages                    = {57--72},
  Timestamp                = {2009.10.06},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-02138-1_4},
  Year                     = {2009}
}

@PhdThesis{Gharachorloo1996,
  Title                    = {Memory consistency models for shared-memory multiprocessors},
  Author                   = {Kourosh Gharachorloo},
  Year                     = {1996},

  Address                  = {Stanford, CA, USA},

  File                     = {:Memory Consistency Models for Shared-Memory Multiprocessors.pdf:PDF},
  Order_no                 = {UMI Order No. GAX96-20480},
  Publisher                = {Stanford University},
  Timestamp                = {2008.08.08}
}

@InProceedings{Gharachorloo1990,
  Title                    = {Memory consistency and event ordering in scalable shared-memory multiprocessors},
  Author                   = {Gharachorloo, Kourosh and Lenoski, Daniel and Laudon, James and Gibbons, Phillip and Gupta, Anoop and Hennessy, John},
  Booktitle                = {Proceedings of the 17th annual international symposium on Computer Architecture},
  Year                     = {1990},

  Address                  = {Seattle, Washington, United States},
  Pages                    = {15--26},
  Publisher                = {ACM},

  File                     = {:Memory consistency and event ordering in scalable shared-memory multiprocessors.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.27}
}

@InCollection{Ghilardi2008,
  Title                    = {Towards SMT Model Checking of Array-Based Systems},
  Author                   = {Ghilardi, Silvio and Nicolini, Enrica and Ranise, Silvio and Zucchelli, Daniele},
  Booktitle                = {Automated Reasoning},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2008},
  Editor                   = {Armando, Alessandro and Baumgartner, Peter and Dowek, Gilles},
  Pages                    = {67-82},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {5195},

  Doi                      = {10.1007/978-3-540-71070-7_6},
  File                     = {:Towards SMT Model Checking of Array-Based Systems.pdf:PDF},
  ISBN                     = {978-3-540-71069-1},
  Owner                    = {lvyi},
  Timestamp                = {2013.05.07},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-71070-7_6}
}

@InCollection{Ghilardi2010,
  Title                    = {MCMT: A Model Checker Modulo Theories},
  Author                   = {Ghilardi, Silvio and Ranise, Silvio},
  Booktitle                = {IJCAR 2010},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2010},
  Editor                   = {Giesl, Jürgen and Hähnle, Reiner},
  Pages                    = {22-29},
  Series                   = {LNAI},
  Volume                   = {6173},

  Doi                      = {10.1007/978-3-642-14203-1_3},
  File                     = {:MCMT- a Model Checker Modulo Theories.pdf:PDF},
  ISBN                     = {978-3-642-14202-4},
  Journal                  = {Automated Reasoning},
  Owner                    = {lvyi},
  Timestamp                = {2012.12.17},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-14203-1_3}
}

@Article{Ghilardi2010a,
  Title                    = {Backward Reachability of Array-based Systems by SMT solving: Termination and Invariant Synthesis},
  Author                   = {Silvio Ghilardi and Silvio Ranise},
  Journal                  = {Logical Methods in Computer Science},
  Year                     = {2010},
  Number                   = {4},
  Volume                   = {6},

  Bibsource                = {DBLP, http://dblp.uni-trier.de},
  Ee                       = {http://dx.doi.org/10.2168/LMCS-6(4:10)2010},
  File                     = {:Backward Reachability of Array-based Systems by SMT solving- Termination and Invariant Synthesis.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2014.04.07}
}

@Article{Ghughal2000,
  Title                    = {Verification Methods for Weaker Shared Memory Consistency Models},
  Author                   = {Ghughal, Rajnish and Gopalakrishnan, Ganesh},
  Journal                  = {Parallel and Distributed Processing},
  Year                     = {2000},
  Pages                    = {985--992},

  Abstract                 = {The problem of verifying finite-state models of shared memory multiprocessor coherence protocols for conformance to weaker memory consistency models is examined. We start with W.W. Collier’s architectural testing methods and extend it in several non-trivial ways in order to be able to handle weaker memory models. This, our first contribution, presents the construction of architectural testing programs similar to those constructed by Collier (e.g. the Archtest suite) suited for weaker memory models. Our on primary emphasis has, how ever, been to adapt these methods to the realm of model-checking. In an earlier effort (joint work with Nalumasu and Mokkedem), we had demonstrated how to adapt Collier’s architectural testing methods to model-checking. Our verification approach consisted of abstracting executions that violate memory orderings into a fixed collection of automata (called Test Automata) that depend only on the memory model. The main advantage of this approach, called Test Model-checking, is that the test automata remain fixed during the iterative design cycle when different coherence protocols that (presumably) implement a given memory model are being compared for performance. This facilitates ‘push-button’ re-verification when each new protocol is being considered. Our second contribution is to extend the methods of constructing test automata to be able to handle architectural tests for weaker memory models. After reviewing prior work, in this paper we mainly focus on architectural tests for weaker memory models and the new abstraction methods thereof to construct test automata for weaker memory models.},
  File                     = {:Verification Methods for Weaker Shared Memory Consistency Models.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.10.21},
  Url                      = {http://dx.doi.org/10.1007/3-540-45591-4_135}
}

@InProceedings{Giannakopoulou2008,
  Title                    = {Special issue on learning techniques for compositional reasoning},
  Author                   = {Giannakopoulou, Dimitra and Păsăreanu, Corina},
  Year                     = {2008},
  Month                    = jun,
  Number                   = {3},
  Pages                    = {173--174},
  Volume                   = {32},

  File                     = {:Special issue on learning techniques for compositional.pdf:PDF},
  Journal                  = {Formal Methods in System Design},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.09},
  Url                      = {http://dx.doi.org/10.1007/s10703-008-0054-9}
}

@InProceedings{Gibbons1997,
  Title                    = {Testing Shared Memories},
  Author                   = {Gibbons, Phillip B. and Korach, Ephraim},
  Year                     = {1997},
  Number                   = {4},
  Pages                    = {1208--1244},
  Publisher                = {Society for Industrial and Applied Mathematics},
  Volume                   = {26},

  File                     = {:Testing Shared Memories.pdf:PDF},
  Journal                  = {SIAM J. Comput.},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.27}
}

@InProceedings{Gibbons1994,
  Title                    = {On testing cache-coherent shared memories},
  Author                   = {Gibbons, Phillip B. and Korach, Ephraim},
  Booktitle                = {Proceedings of the sixth annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {1994},

  Address                  = {Cape May, New Jersey, United States},
  Pages                    = {177--188},
  Publisher                = {ACM},

  File                     = {:On testing cache-coherent shared memories.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Gluska2009,
  Title                    = {Shortening the verification cycle with synthesizable abstract models},
  Author                   = {Gluska, Alon and Libis, Lior},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {454--459},
  Publisher                = {ACM},

  File                     = {:Shortening the verification cycle with synthesizable abstract models.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@InProceedings{Gnesi2000,
  Title                    = {An Automatic SPIN Validation of a Safety Critical Railway Control System},
  Author                   = {Gnesi, S. and Latella, D. and Lenzini, G. and Abbaneo, C. and Amendola, A. and Marmo, P.},
  Year                     = {2000},
  Pages                    = {119--},
  Volume                   = {00},

  Comment                  = {An Automatic SPIN Validation of a Safety Critical Railway Control System
0-7695-0707-7},
  Keywords                 = {safety-critical systems dependable protocols formal verification model checking},
  Owner                    = {lvyi},
  Refid                    = {66},
  Timestamp                = {2008.06.11}
}

@InProceedings{Godefroid1997,
  Title                    = {Model checking for programming languages using VeriSoft},
  Author                   = {Godefroid, Patrice},
  Booktitle                = {Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  Year                     = {1997},

  Address                  = {Paris, France},
  Pages                    = {174--186},
  Publisher                = {ACM},

  File                     = {:Model checking for programming languages using VeriSoft.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.26}
}

@InProceedings{Godlin2009,
  Title                    = {Regression verification},
  Author                   = {Godlin, Benny and Strichman, Ofer},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {466--471},
  Publisher                = {ACM},

  File                     = {:Regression verification.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@TechReport{Goodman1989,
  Title                    = {Cache Consistency and Sequential Consistency},
  Author                   = {J. R. Goodman},
  Year                     = {1989},
  Number                   = {61},

  File                     = {:Cache Consistency And Sequential Consistency.ps:PostScript},
  Timestamp                = {2008.08.08},
  Url                      = {citeseer.ist.psu.edu/619902.html}
}

@InProceedings{Gopalakrishnan2004,
  Title                    = {QB or Not QB: An Efficient Execution Verification Tool for Memory Orderings},
  Author                   = {Gopalakrishnan, Ganesh and Yang, Yue and Sivaraj, Hemanthkumar},
  Year                     = {2004},
  Pages                    = {401--413},

  Abstract                 = {We study the problem of formally verifying shared memory multiprocessor executions against memory consistency models—an important step during post-silicon verification of multiprocessor machines. We employ our previously reported style of writing formal specifications for shared memory models in higher order logic (HOL), obtaining intuitive as well as modular specifications. Our specification consists of a conjunction of rules that constrain the global visibility order. Given an execution to be checked, our algorithm generates Boolean constraints that capture the conditions under which the execution is legal under the visibility order. We initially took the approach of specializing the memory model HOL axioms into equivalent (for the execution to be checked) quantified boolean formulae (QBF). As this technique proved inefficient, we took the alternative approach of converting the HOL axioms into a program that generates a SAT instance when run on an execution. In effect, the quantifications in our memory model specification were realized as iterations in the program. The generated Boolean constraints are satisfiable if and only if the given execution is legal under the memory model. We evaluate two different approaches to encode the Boolean constraints, and also incremental techniques to generate and solve Boolean constraints. Key results include a demonstration that we can handle executions of realistic lengths for the modern Intel Itanium memory model. Further research into proper selection of Boolean encodings, incremental SAT checking, efficient handling of transitivity, and the generation of unsatisfiable cores for locating errors are expected to make our technique practical.},
  File                     = {:QB or Not QB- An Efficient Execution Verification Tool for Memory Orderings.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26},
  Url                      = {http://www.springerlink.com/content/7l5v935fkh7xb7q0}
}

@InProceedings{Gorai2006,
  Title                    = {Directed-simulation assisted formal verification of serial protocol and bridge},
  Author                   = {Gorai, Saurav and Biswas, Saptarshi and Bhatia, Lovleen and Tiwari, Praveen and Mitra, Raj S.},
  Booktitle                = {Proceedings of the 43rd annual conference on Design automation},
  Year                     = {2006},

  Address                  = {San Francisco, CA, USA},
  Pages                    = {731--736},
  Publisher                = {ACM},

  File                     = {:Directed-simulation assisted formal verification of serial protocol and bridge.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.14}
}

@InProceedings{Gothel2010,
  Title                    = {Towards the Semi-Automatic Verification of Parameterized Real-Time Systems Using Network Invariants},
  Author                   = {Gothel, Thomas and Glesner, Sabine},
  Booktitle                = {Proceedings of the 2010 8th IEEE International Conference on Software Engineering and Formal Methods},
  Year                     = {2010},
  Pages                    = {310--314},
  Publisher                = {IEEE Computer Society},

  Abstract                 = {Real-time systems often have to cope with an unbounded number of components. For example, an operating system scheduler has to be able to manage an arbitrary number of threads. At the same time, the correctness of central control units such as schedulers is crucial for the correctness of the whole system. However, the comprehensive and semi-automatic verification of real-time systems that are parameterized with an unbounded number of components is still an open problem. In this paper, we propose an approach in which parameterized systems can be verified using a combination of theorem proving and model checking. The interactive theorem prover is used for the overall verification task delegating subsequent proof-goals to automatic verification tools. The central proof method is based on network invariants. The idea of network invariants is to over approximate all instances of a parameterized system and to perform the verification on the abstract model. We have adopted an existing network invariant approach for the verification of centralized real-time systems such as schedulers and formalized the theory in the Isabelle/HOL theorem prover. Preliminary results on applying our framework to small examples are promising and make it worth to evaluate the approach with larger case studies in future work.},
  Doi                      = {10.1109/SEFM.2010.38},
  File                     = {:D\:\\papers\\Towards the Semi-Automatic Verification of Parameterized Real-Time Systems Using Network Invariants.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.10}
}

@Other{Goethel2010,
  Title                    = {An approach for machine-assisted verification of Timed CSP specifications},
  Abstract                 = {The real-time process calculus Timed CSP is capable of expressing properties such as deadlock-freedom and real-time constraints. It is therefore well-suited to model and verify embedded software. However, proofs about Timed CSP specifications are not ensured to be correct since comprehensive machine-assistance for Timed CSP is not yet available. In this paper, we present our formalization of Timed CSP in the Isabelle/HOL theorem prover, which we have formulated as an operational coalgebraic semantics together with bisimulation equivalences and coalgebraic invariants. This allows for semi-automated and mechanically checked proofs about Timed CSP specifications. Mechanically checked proofs enhance confidence in verification because corner cases cannot be overlooked. We additionally apply our formalization to an abstract specification with real-time constraints. This is the basis for our current work, in which we verify a simple real-time operating system deployed on a satellite. As this operating system has to cope with arbitrarily many threads, we use verification techniques from the area of parameterized systems for which we outline their formalization.},
  Author                   = {Göthel, Thomas and Glesner, Sabine},
  File                     = {:An approach for machine-assisted verification of Timed CSP specifications.pdf:PDF},
  ISSN                     = {1614-5046},
  Journal                  = {Innovations in Systems and Software Engineering},
  Keywords                 = {Computer Science},
  Number                   = {3},
  Owner                    = {lvyi},
  Pages                    = {181--193},
  Publisher                = {Springer London},
  Timestamp                = {2011.06.10},
  Url                      = {http://dx.doi.org/10.1007/s11334-010-0126-z},
  Volume                   = {6},
  Year                     = {2010}
}

@Article{Graaf2003,
  Title                    = {Embedded Software Engineering: The State of the Practice},
  Author                   = {Graaf, Bas},
  Journal                  = {IEEE Software},
  Year                     = {2003},

  Month                    = nov,
  Pages                    = {61--69},
  Volume                   = {20},

  Editor                   = {Lormans, Marco and Toetenel, Hans},
  File                     = {:Embedded Software Engineering- The State of the Practice.pdf:PDF},
  ISSN                     = {0740-7459},
  Keywords                 = {embedded systems, software engineering, requirements engineering, architecture design},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09},
  Url                      = {http://doi.ieeecomputersociety.org/10.1109/MS.2003.1241368}
}

@InProceedings{Graf1997,
  Title                    = {Construction of abstract state graphs with PVS},
  Author                   = {Graf, Susanne and Saidi, Hassen},
  Year                     = {1997},
  Pages                    = {72--83},

  Abstract                 = {In this paper, we propose a method for the automatic construction of an abstract state graph of an arbitrary system using the Pvs theorem prover.},
  File                     = {:Construction of abstract state graphs with PVS.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.23},
  Url                      = {http://dx.doi.org/10.1007/3-540-63166-6_10}
}

@InProceedings{Grieskamp2002,
  Title                    = {Generating finite state machines from abstract state machines},
  Author                   = {Grieskamp, Wolfgang and Gurevich, Yuri and Schulte, Wolfram and Veanes, Margus},
  Booktitle                = {Proceedings of the 2002 ACM SIGSOFT international symposium on Software testing and analysis},
  Year                     = {2002},

  Address                  = {Roma, Italy},
  Pages                    = {112--122},
  Publisher                = {ACM},

  File                     = {:Generating finite state machines from abstract state machines.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07}
}

@InProceedings{Groce2006,
  Title                    = {Adaptive Model Checking},
  Author                   = {Groce, A. and Peled, D. and Yannakakis, M.},
  Year                     = {2006},
  Number                   = {5},
  Pages                    = {729},
  Publisher                = {Oxford Univ Press},
  Volume                   = {14},

  File                     = {:Adaptive Model Checking.pdf:PDF},
  Journal                  = {Logic Journal of IGPL},
  Timestamp                = {2009.02.17}
}

@InProceedings{Grossman2008,
  Title                    = {Hierarchical simulation-based verification of Anton, a special-purpose parallel machine},
  Author                   = {Grossman, J.P. and Salmon, J.K. and Ho, C.R. and Ierardi, D.J. and Towles, B. and Batson, B. and Spengler, J. and Wang, S.C. and Mueller, R. and Theobald, M. and Young, C. and Gagliardo, J. and Deneroff, M.M. and Dror, R.O. and Shaw, D.E.},
  Booktitle                = {Computer Design, 2008. ICCD 2008. IEEE International Conference on},
  Year                     = {2008},
  Pages                    = {340--347},

  Abstract                 = {One of the major design verification challenges in the development of Anton, a massively parallel special-purpose machine for molecular dynamics, was to provide evidence that computations spanning more than a quadrillion clock cycles will produce valid scientific results. Our verification methodology addressed this problem by using a hierarchy of RTL, architectural, and numerical simulations. Block- and chip-level RTL models were verified by means of extensive co-simulation with a detailed C++ architectural simulator, ensuring that the RTL models could perform the same molecular dynamics computations as the architectural simulator. The output of the architectural simulator was compared to a parallelized numerical simulator that produces bitwise identical results to Anton, and is fast enough to verify the long-term numerical stability of computations on Anton. These explicit couplings between adjacent levels of the simulation hierarchy created a continuous verification chain from molecular dynamics to individual logic gates.},
  File                     = {:Hierarchical simulation-based verification of Anton, a special-purpose parallel machine.pdf:PDF},
  ISSN                     = {1063-6404},
  Keywords                 = {parallel machines, C++ architectural simulator, chip-level RTL models, hierarchical simulation-based verification, molecular dynamics, parallelized numerical simulator, quadrillion clock cycles, special-purpose parallel machine},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.11}
}

@InProceedings{Guerraoui2008a,
  Title                    = {Model checking transactional memories},
  Author                   = {Guerraoui, Rachid and Henzinger, Thomas A. and Jobstmann, Barbara and Singh, Vasu},
  Booktitle                = {Proceedings of the 2008 ACM SIGPLAN conference on Programming language design and implementation},
  Year                     = {2008},

  Address                  = {Tucson, AZ, USA},
  Pages                    = {372--382},
  Publisher                = {ACM},

  File                     = {:Model checking transactional memories.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@InProceedings{Guerraoui2008,
  Title                    = {On the correctness of transactional memory},
  Author                   = {Guerraoui, Rachid and Kapalka, Michal},
  Booktitle                = {Proceedings of the 13th ACM SIGPLAN Symposium on Principles and practice of parallel programming},
  Year                     = {2008},

  Address                  = {Salt Lake City, UT, USA},
  Pages                    = {175--184},
  Publisher                = {ACM},

  File                     = {:C\:\\papers\\Exploiting architecture for verification to streamline the verification process.pdf:PDF;:On the correctness of transactional memory.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.08}
}

@InProceedings{Guo2008,
  Title                    = {Hierarchical memory system design for a heterogeneous multi-core processor},
  Author                   = {Guo, Jianjun and Lai, Mingche and Pang, Zhengyuan and Huang, Libo and Chen, Fangyuan and Dai, Kui and Wang, Zhiying},
  Booktitle                = {Proceedings of the 2008 ACM symposium on Applied computing},
  Year                     = {2008},

  Address                  = {Fortaleza, Ceara, Brazil},
  Pages                    = {1504--1508},
  Publisher                = {ACM},

  File                     = {:Hierarchical memory system design for a heterogeneous multi-core processor.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@InProceedings{Gupta2008,
  Title                    = {Automated assumption generation for compositional verification},
  Author                   = {Gupta, Anubhav and McMillan, K. and Fu, Zhaohui},
  Year                     = {2008},
  Month                    = jun,
  Number                   = {3},
  Pages                    = {285--301},
  Volume                   = {32},

  Abstract                 = {Abstract&nbsp;&nbsp;We describe a method for computing a minimum-state automaton to act as an intermediate assertion in assume-guarantee reasoning, using a sampling approach and a Boolean satisfiability solver. For a set of synthetic benchmarks intended to mimic common situations in hardware verification, this is shown to be significantly more effective than earlier approximate methods based on Angluin’s L* algorithm. For many of these benchmarks, this method also outperforms BDD-based model checking and interpolation-based model checking. We also demonstrate how domain knowledge can be incorporated into our algorithm to improve its performance.},
  File                     = {:Automated assumption generation for compositional verification.pdf:PDF},
  Journal                  = {Formal Methods in System Design},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.09},
  Url                      = {http://dx.doi.org/10.1007/s10703-008-0050-0}
}

@InProceedings{Gurevich1982,
  Title                    = {Trees, Automata, and Games},
  Author                   = {Gurevich, Yuri and Harrington, Leo},
  Booktitle                = {STOC},
  Year                     = {1982},
  Pages                    = {60-65--},

  Comment                  = {Trees, Automata, and Games
Gurevich1982
inproceedings DBLP:conf/stoc/STOC14},
  Owner                    = {lvyi},
  Refid                    = {52},
  Timestamp                = {2008.06.11}
}

@InProceedings{Hackenberg2009,
  Title                    = {Comparing cache architectures and coherency protocols on x86-64 multicore SMP systems},
  Author                   = {Hackenberg, Daniel and Molka, Daniel and Nagel, Wolfgang E.},
  Booktitle                = {Proceedings of the 42nd Annual IEEE/ACM International Symposium on Microarchitecture},
  Year                     = {2009},

  Address                  = {New York, New York},
  Pages                    = {413--422},
  Publisher                = {ACM},

  Doi                      = {10.1145/1669112.1669165},
  File                     = {:Comparing cache architectures and coherency protocols on x86-64 multicore SMP systems.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@InProceedings{Hammond2000,
  Title                    = {The Stanford Hydra CMP},
  Author                   = {Lance Hammond and Benedict A. Hubbert and Michael Siu and Manohar K. Prabhu and Michael Chen and Kunle Olukotun},
  Year                     = {2000},

  Address                  = {Los Alamitos, CA, USA},
  Number                   = {2},
  Pages                    = {71-84},
  Publisher                = {IEEE Computer Society},
  Volume                   = {20},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/40.848474},
  File                     = {:The Stanford Hydra CMP.pdf:PDF},
  ISSN                     = {0272-1732},
  Journal                  = {IEEE Micro},
  Timestamp                = {2008.08.08}
}

@InProceedings{Hammond2004,
  Title                    = {Transactional memory coherence and consistency},
  Author                   = {Hammond, L. and Wong, V. and Chen, M. and Carlstrom, BD and Davis, JD and Hertzberg, B. and Prabhu, MK and Wijaya, H. and Kozyrakis, C. and Olukotun, K.},
  Booktitle                = {Computer Architecture, 2004. Proceedings. 31st Annual International Symposium on},
  Year                     = {2004},
  Pages                    = {102--113},

  File                     = {:Transactional Memory Coherence and Consistency.pdf:PDF},
  Timestamp                = {2009.03.07}
}

@InProceedings{Han2004,
  Title                    = {An efficient scalable and flexible data transfer architecture for multiprocessor SoC with massive distributed memory},
  Author                   = {Han, Sang-Il and Baghdadi, Amer and Bonaciu, Marius and Chae, Soo-Ik and Jerraya, Ahmed A.},
  Booktitle                = {Proceedings of the 41st annual conference on Design automation},
  Year                     = {2004},

  Address                  = {San Diego, CA, USA},
  Pages                    = {250--255},
  Publisher                = {ACM},

  File                     = {:An Efficient Scalable and Flexible Data Transfer Architecture for Multiprocessor SoC with Massive Distributed Memory.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Hangal2005,
  Title                    = {IODINE: a tool to automatically infer dynamic invariants for hardware designs},
  Author                   = {Hangal, Sudheendra and Narayanan, Sridhar and Chandra, Naveen and Chakravorty, Sandeep},
  Booktitle                = {Design Automation Conference, 2005. Proceedings. 42nd},
  Year                     = {2005},
  Pages                    = {775--778},

  File                     = {:IODINE- A Tool to Automatically Infer Dynamic Invariants for Hardware Design.pdf:PDF},
  Keywords                 = {formal verification, logic CAD, IODINE, circuit CAD, dynamic analysis, dynamic invariant detection, dynamic invariants, formal verification, hardware design, logic CAD},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Hangal2004,
  Title                    = {TSOtool: A Program for Verifying Memory Systems Using the Memory Consistency Model},
  Author                   = {Hangal, Sudheendra and Vahia, Durgam and Manovit, Chaiyasit and Lu, Juin-Yeu Joseph},
  Booktitle                = {Proceedings of the 31st Annual International Symposium on Computer Architecture},
  Year                     = {2004},

  Address                  = {Washington, DC, USA},
  Pages                    = {114--123},
  Publisher                = {IEEE Computer Society},
  Series                   = {ISCA '04},

  Acmid                    = {1006710},
  File                     = {:TSOtool- A Program for Verifying Memory Systems Using the Memory Consistency Model.pdf:PDF},
  ISBN                     = {0-7695-2143-6},
  Keywords                 = {Memory consistency models, Multiprocessor verification, Sequential Consistency, Total Store Order},
  Location                 = {M\&\#252;nchen, Germany},
  Owner                    = {lvyi},
  Timestamp                = {2014.02.09},
  Url                      = {http://dl.acm.org/citation.cfm?id=998680.1006710}
}

@Article{Hansson2009,
  Title                    = {CoMPSoC: A template for composable and predictable multi-processor system on chips},
  Author                   = {Hansson, Andreas and Goossens, Kees and Bekooij, Marco and Huisken, Jos},
  Journal                  = {ACM Trans. Des. Autom. Electron. Syst.},
  Year                     = {2009},

  Month                    = jan,
  Number                   = {1},
  Pages                    = {2:1--2:24},
  Volume                   = {14},

  Acmid                    = {1455231},
  Address                  = {New York, NY, USA},
  Articleno                = {2},
  Doi                      = {10.1145/1455229.1455231},
  File                     = {:CoMPSoC- A template for composable and predictable multi-processor system on chips.pdf:PDF},
  ISSN                     = {1084-4309},
  Issue_date               = {January 2009},
  Keywords                 = {Composable, model of computation, network on chip, predictable, system on chip},
  Numpages                 = {24},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2013.07.21},
  Url                      = {http://doi.acm.org/10.1145/1455229.1455231}
}

@Conference{Haring2011,
  Title                    = {IBM Blue Gene/Q Compute chip},
  Author                   = {Ruud A. Haring},
  Booktitle                = {23rd Hot Chips Symposium},
  Year                     = {2011},

  Address                  = {Stanford University, Palo Alto, California},
  Month                    = {August 17-19},

  Owner                    = {lvyi},
  Timestamp                = {2012.10.07}
}

@Article{Havelund2000,
  Title                    = {Model checking JAVA programs using JAVA PathFinder},
  Author                   = {Havelund, Klaus and Pressburger, Thomas},
  Journal                  = {International Journal on Software Tools for Technology Transfer (STTT)},
  Year                     = {2000},

  Month                    = mar,
  Number                   = {4},
  Pages                    = {366--381},
  Volume                   = {2},

  Abstract                 = {Abstract. &nbsp;&nbsp;This paper describes a translator called Java PathFinder (Jpf), which translates from Java to Promela, the modeling language of the Spin model checker. Jpf translates a given Java program into a Promela model, which then can be model checked using Spin. The Java program may contain assertions, which are translated into similar assertions in the Promela model. The Spin model checker will then look for deadlocks and violations of any stated assertions. Jpf generates a Promela model with the same state space characteristics as the Java program. Hence, the Java program must have a finite and tractable state space. This work should be seen in a broader attempt to make formal methods applicable within NASA’s areas such as space, aviation, and robotics. The work is a continuation of an effort to formally analyze, using Spin, a multi-threaded operating system for the Deep-Space 1 space craft, and of previous work in applying existing model checkers and theorem provers to real applications.},
  File                     = {:Model checking JAVA programs using JAVA PathFinder.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.29},
  Url                      = {http://dx.doi.org/10.1007/s100090050043}
}

@InProceedings{Havelund1996,
  Title                    = {Experiments in theorem proving and model checking for protocol verification},
  Author                   = {Havelund, Klaus and Shankar, Natarajan},
  Year                     = {1996},
  Pages                    = {662--681},

  Abstract                 = {Communication protocols pose interesting and difficult challenges for verification technologies. The state spaces of interesting protocols are either infinite or too large for finite-state verification techniques like model checking and state exploration. Theorem proving is also not effective since the formal correctness proofs of these protocols can be long and complicated. We describe a series of protocol verification experiments culminating in a methodology where theorem proving is used to abstract out the sources of unboundedness in the protocol to yield a skeletal protocol that can be verified using model checking.},
  File                     = {:Experiments in theorem proving and model checking for protocol verification.pdf:PDF},
  Journal                  = {FME'96: Industrial Benefit and Advances in Formal Methods},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07},
  Url                      = {http://dx.doi.org/10.1007/3-540-60973-3_113}
}

@InProceedings{Heljanko2006,
  Title                    = {Bounded Model Checking for Weak Alternating Buchi Automata},
  Author                   = {Heljanko, K. and Junttila, T. and Keinanen, M. and Lange, M. and Latvala, T.},
  Year                     = {2006},
  Number                   = {4144},
  Pages                    = {95-108--},

  Comment                  = {Bounded Model Checking for Weak Alternating Buchi Automata
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {73},
  Timestamp                = {2008.06.11}
}

@InProceedings{Henzinger2003,
  Author                   = {Henzinger, Thomas and Jhala, Ranjit and Majumdar, Rupak and Sutre, Grégoire},
  Booktitle                = {Model Checking Software},
  Year                     = {2003},
  Pages                    = {624-624--},

  Comment                  = {Software Verification with BLAST},
  Owner                    = {lvyi},
  Refid                    = {37},
  Timestamp                = {2009.03.11},
  Url                      = {http://dx.doi.org/10.1007/3-540-44829-2_17}
}

@InProceedings{Henzinger2003a,
  Title                    = {Software Verification with BLAST},
  Author                   = {Henzinger, Thomas and Jhala, Ranjit and Majumdar, Rupak and Sutre, Grégoire},
  Booktitle                = {Model Checking Software},
  Year                     = {2003},
  Pages                    = {624-624},

  Abstract                 = {Blast (the Berkeley Lazy Abstraction Software verification Tool) is a verification system for checking safety properties of C programs using automatic property-driven construction and model checking of software abstractions. Blast implements an abstract-model check-refine loop to check for reachability of a specified label in the program. The abstract model is built on the fly using predicate abstraction. This model is then checked for reachability. If there is no (abstract) path to the specified error label, Blast reports that the system is safe and produces a succinct proof. Otherwise, it checks if the path is feasible using symbolic execution of the program. If the path is feasible, Blast outputs the path as an error trace, otherwise, it uses the infeasibility of the path to refine the abstract model. Blast short-circuits the loop from abstraction to verification to refinement, integrating the three steps tightly through “lazy abstraction” [5]. This integration can offer significant advantages in performance by avoiding the repetition of work from one iteration of the loop to the next.},
  Owner                    = {lvyi},
  Refid                    = {13},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/3-540-44829-2_17}
}

@InProceedings{Henzinger1999,
  Title                    = {Verifying Sequential Consistency on Shared-Memory Multiprocessor Systems},
  Author                   = {Henzinger, Thomas and Qadeer, Shaz and Rajamani, Sriram},
  Year                     = {1999},
  Pages                    = {684--684},

  Abstract                 = {In shared-memory multiprocessors sequential consistency offers a natural tradeoff between the flexibility afforded to the implementor and the complexity of the programmer’s view of the memory. Sequential consistency requires that some interleaving of the local temporal orders of read/write events at different processors be a trace of serial memory. We develop a systematic methodology for proving sequential consistency for memory systems with three parameters —number of processors, number of memory locations, and number of data values. From the definition of sequential consistency it suffices to construct a non-interfering observer that watches and reorders read/write events so that a trace of serial memory is obtained. While in general such an observer must be unbounded even for fixed values of the parameters —checking sequential consistency is undecidable!— we show that for two paradigmatic protocol classes—lazy caching and snoopy cache coherence—there exist finite-state observers. In these cases, sequential consistency for fixed parameter values can thus be checked by language inclusion between finite automata.},
  File                     = {:Verifying Sequential Consistency on Shared-Memory Multiprocessor Systems.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.10},
  Url                      = {http://dx.doi.org/10.1007/3-540-48683-6_27}
}

@InProceedings{Herlihy1993,
  Title                    = {Transactional memory: architectural support for lock-free data structures},
  Author                   = {Herlihy, Maurice and Moss, J. Eliot B.},
  Booktitle                = {Proceedings of the 20th annual international symposium on computer architecture},
  Year                     = {1993},

  Address                  = {San Diego, California, United States},
  Pages                    = {289--300},
  Publisher                = {ACM},

  Doi                      = {10.1145/165123.165164},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.07}
}

@InProceedings{Herlihy1990,
  Title                    = {Linearizability: a correctness condition for concurrent objects},
  Author                   = {Herlihy, Maurice P. and Wing, Jeannette M.},
  Year                     = {1990},
  Number                   = {3},
  Pages                    = {463--492},
  Publisher                = {ACM},
  Volume                   = {12},

  File                     = {:Linearizability- a correctness condition for concurrent objects.pdf:PDF},
  Journal                  = {ACM Trans. Program. Lang. Syst.},
  Owner                    = {lvyi},
  Timestamp                = {2008.08.05}
}

@InProceedings{Ho2000,
  Title                    = {Smart simulation using collaborative formal and simulation engines},
  Author                   = {Ho, Pei Hsin and Shiple, Thomas and Harer, Kevin and Kukula, James and Damiano, Robert and Bertacco, Valeria and Taylor, Jerry and Long, Jiang},
  Booktitle                = {Proceedings of the 2000 IEEE/ACM international conference on Computer-aided design},
  Year                     = {2000},

  Address                  = {San Jose, California},
  Pages                    = {120--126},
  Publisher                = {IEEE Press},

  File                     = {:Smart simulation using collaborative formal and simulation engines.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.14}
}

@InProceedings{Holzmann2007,
  Title                    = {Conquering Complexity},
  Author                   = {Holzmann, Gerard J.},
  Year                     = {2007},
  Number                   = {12},
  Pages                    = {111--113},
  Publisher                = {IEEE Computer Society Press},
  Volume                   = {40},

  File                     = {:Conquering Complexity.pdf:PDF},
  Journal                  = {Computer},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.12}
}

@Book{Holzmann2004,
  Author                   = {Holzmann, Gerard J.},
  Publisher                = {Addison-Wesley},
  Year                     = {2004},

  Address                  = {Boston},

  Booktitle                = {The spin model checker : primer and reference manual},
  Comment                  = {The spin model checker : primer and reference manual
52547714},
  ISSN                     = {0321228626 9780321228628},
  Owner                    = {lvyi},
  Pages                    = {--},
  Refid                    = {62},
  Timestamp                = {2008.06.11}
}

@InProceedings{Holzmann1997,
  Title                    = {The Model Checker SPIN},
  Author                   = {Holzmann, G. J.},
  Year                     = {1997},
  Number                   = {5},
  Pages                    = {279-295--},
  Volume                   = {23},

  Comment                  = {The Model Checker SPIN
203364885
0098-5589},
  Journal                  = {IEEE TRANSACTIONS ON SOFTWARE ENGINEERING SE},
  Owner                    = {lvyi},
  Refid                    = {63},
  Timestamp                = {2008.06.11}
}

@Book{Holzmann1991,
  Title                    = {Design and validation of computer protocols
},
  Author                   = {Holzmann, Gerard J. and Telephone, American and Telegraph, Company},
  Publisher                = {Prentice Hall},
  Year                     = {1991},

  Address                  = {Englewood Cliffs, N.J.},

  Booktitle                = {Prentice Hall software series},
  ISSN                     = {0135399254 9780135399255},
  Owner                    = {lvyi},
  Pages                    = {--},
  Refid                    = {61},
  Timestamp                = {2008.06.11}
}

@Article{Hsiung2000,
  Title                    = {Embedded software verification in hardware-software codesign},
  Author                   = {Hsiung, Pao-Ann},
  Journal                  = {Journal of Systems Architecture},
  Year                     = {2000},

  Month                    = dec,
  Number                   = {15},
  Pages                    = {1435--1450},
  Volume                   = {46},

  Abstract                 = {Concurrent Embedded Real-Time Software (CERTS) is intrinsically different from traditional, sequential, independent, and temporally unconstrained software. The verification of software is more complex than hardware due to inherent flexibilities (dynamic behavior) that incur a multitude of possible system states. The verification of CERTS is all the more difficult due to its concurrency and embeddedness. The work presented here shows how the complexity of CERTS verification can be reduced significantly through answering common engineering questions such as when, where, and how one must verify embedded software. First, a new Schedule-Verify-Map strategy is proposed to answer the when question. Second, verification under system concurrency is proposed to answer the where question. Finally, a complete symbolic model checking procedure is proposed for CERTS verification. Several application examples illustrate the usefulness of our technique in increasing verification scalability.},
  File                     = {:Embedded software verification in hardware–software codesign.pdf:PDF},
  ISSN                     = {1383-7621},
  Keywords                 = {Embedded software, Software verification, Symbolic model checking, System/process concurrency, Quasi-static scheduling, Software synthesis},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S1383762100000345}
}

@PhdThesis{Hu1996,
  Title                    = {Shared Memory Architecture},
  Author                   = {Weiwu Hu},
  School                   = {Institute of Computing Technology, Chinese Academy of Sciences},
  Year                     = {1996},

  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@Article{Hu2012,
  Title                    = {Linear Time Memory Consistency Verification},
  Author                   = {Weiwu Hu and Yunji Chen and Tianshi Chen and Cheng Qian and Lei Li},
  Journal                  = {Computers, IEEE Transactions on},
  Year                     = {2012},
  Number                   = {4},
  Pages                    = {502-516},
  Volume                   = {61},

  Doi                      = {10.1109/TC.2011.41},
  File                     = {:Linear Time Memory Consistency Verification.pdf:PDF},
  ISSN                     = {0018-9340},
  Keywords                 = {formal verification;microprocessor chips;multiprocessing systems;optimisation;parallel memories;software reusability;NP-hard problem;XCHECK;chip multiprocessor;industrial multicore processor;linear-time software based approach;memory consistency model;memory consistency verification;parallel program;reusable cycle checking;Clocks;Complexity theory;Hardware;Memory management;Multiprocessing systems;Program processors;Memory consistency;global clock;pending period;physical time order;reusable cycle checking.;verification},
  Owner                    = {lvyi},
  Timestamp                = {2013.07.21}
}

@InProceedings{Hu2008,
  Title                    = {Micro-architecture of Godson-3 Multi-Core Processor},
  Author                   = {Weiwu Hu and J. Wang and X. Gao and Y. Chen},
  Booktitle                = {Proceedings of the 20th Hot Chips Symposium},
  Year                     = {2008},

  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Hu2009,
  Title                    = {Godson-3: A Multi-core RISC Processor with X86 Emulation Support},
  Author                   = {Weiwu Hu and Jian Wang and Xiang Gao and Yunji Chen and Qi Liu and Guojie Li},
  Year                     = {2009},
  Number                   = {2},
  Volume                   = {29},

  Journal                  = {IEEE Micro},
  Owner                    = {lvyi},
  Timestamp                = {2009.01.29}
}

@InProceedings{Hu2005,
  Title                    = {Microarchitecture of the Godson-2 Processor},
  Author                   = {Hu, Wei-Wu and Zhang, Fu-Xin and Li, Zu-Song},
  Year                     = {2005},
  Month                    = mar,
  Number                   = {2},
  Pages                    = {243--249},
  Volume                   = {20},

  Abstract                 = {The Godson project is the first attempt to design high performance general-purpose microprocessors in China. This paper introduces the microarchitecture of the Godson-2 processor which is a 64-bit, 4-issue, out-of-order execution RISC processor that implements the 64-bit MIPS-like instruction set. The adoption of the aggressive out-of-order execution techniques (such as register mapping, branch prediction, and dynamic scheduling) and cache techniques (such as non-blocking cache, load speculation, dynamic memory disambiguation) helps the Godson-2 processor to achieve high performance even at not so high frequency. The Godson-2 processor has been physically implemented on a 6-metal 0.18µm CMOS technology based on the automatic placing and routing flow with the help of some crafted library cells and macros. The area of the chip is 6,700 micrometers by 6,200 micrometers and the clock cycle at typical corner is 2.3ns.},
  Journal                  = {Journal of Computer Science and Technology},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29},
  Url                      = {http://dx.doi.org/10.1007/s11390-005-0243-6}
}

@Article{Iftode1998,
  Title                    = {Scope Consistency: A Bridge between Release Consistency and Entry Consistency},
  Author                   = {Iftode, L. and Singh, J. P. and Li, K.},
  Journal                  = {Theory of Computing Systems},
  Year                     = {1998},
  Number                   = {4},
  Pages                    = {451--473},
  Volume                   = {31},

  File                     = {:Scope Consistency- A Bridge between Release Consistency and Entry Consistency.pdf:PDF},
  ISSN                     = {1432-4350},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer New York},
  Timestamp                = {2012.10.07},
  Url                      = {http://dx.doi.org/10.1007/s002240000097}
}

@Manual{ict2011,
  Title                    = {Godson-T Architecture Programming Manual V1.0},
  Author                   = {Institute of Computing Technology, CAS},
  Month                    = {3},
  Organization             = {Institute of Computing Technology, Chinese Academey of Sciences},
  Year                     = {2011},

  Owner                    = {lvyi},
  Timestamp                = {2014.01.14}
}

@Manual{ict2010,
  Title                    = {Design Document For Godson-T Memory System V1.2},
  Author                   = {Institute of Computing Technology, CAS},
  Month                    = {10},
  Organization             = {Institute of Computing Technology, Chinese Academey of Sciences},
  Year                     = {2010},

  Owner                    = {lvyi},
  Timestamp                = {2014.01.14}
}

@InProceedings{Jackson2007,
  Title                    = {A Compact Linear Translation for Bounded Model Checking},
  Author                   = {Jackson, P. B. and Sheridan, D.},
  Year                     = {2007},
  Number                   = {3},
  Pages                    = {17-30--},
  Volume                   = {174},

  Comment                  = {A Compact Linear Translation for Bounded Model Checking
208452751
1571-0661},
  Journal                  = {ELECTRONIC NOTES IN THEORETICAL COMPUTER SCIENCE},
  Owner                    = {lvyi},
  Refid                    = {74},
  Timestamp                = {2008.06.11}
}

@Article{Jagadish1990,
  Title                    = {A compression technique to materialize transitive closure},
  Author                   = {Jagadish, H. V.},
  Journal                  = {ACM Trans. Database Syst.},
  Year                     = {1990},
  Number                   = {4},
  Pages                    = {558--598},
  Volume                   = {15},

  Doi                      = {10.1145/99935.99944},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2012.02.24}
}

@InProceedings{Jain2006,
  Title                    = {Using Statically Computed Invariants Inside the Predicate Abstraction and Refinement Loop},
  Author                   = {Jain, Himanshu and Ivančić, Franjo and Gupta, Aarti and Shlyakhter, Ilya and Wang, Chao},
  Year                     = {2006},
  Pages                    = {137--151},

  Abstract                 = {Predicate abstraction is a powerful technique for extracting finite-state models from often complex source code. This paper reports on the usage of statically computed invariants inside the predicate abstraction and refinement loop. The main idea is to selectively strengthen (conjoin) the concrete transition relation at a given program location by efficiently computed invariants that hold at that program location. We experimentally demonstrate the usefulness of transition relation strengthening in the predicate abstraction and refinement loop. We use invariants of the form x y ≤c where c is a constant and x,y are program variables. These invariants can be discovered efficiently at each program location using the octagon abstract domain. We observe that the abstract models produced by predicate abstraction of strengthened transition relation are more precise leading to fewer spurious counterexamples, thus, decreasing the total number of abstraction refinement iterations. Furthermore, the length of relevant fragments of spurious traces needing refinement shortens. This leads to an addition of fewer predicates for refinement. We found a consistent reduction in the total number of predicates, maximum number of predicates tracked at a given program location, and the overall verification time.},
  File                     = {:Using Statically Computed Invariants Inside the Predicate Abstraction and Refinement Loop.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07},
  Url                      = {http://dx.doi.org/10.1007/11817963_15}
}

@InProceedings{Jain2007,
  Title                    = {VCEGAR: Verilog CounterExample Guided Abstraction Refinement},
  Author                   = {Jain, H. and Kroening, D. and Sharygina, N. and Clarke, E.},
  Year                     = {2007},
  Number                   = {4424},
  Pages                    = {583-586--},

  Comment                  = {VCEGAR: Verilog CounterExample Guided Abstraction Refinement
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {22},
  Timestamp                = {2008.06.11}
}

@Article{Jhala2009,
  Title                    = {Software model checking},
  Author                   = {Jhala, Ranjit and Majumdar, Rupak},
  Journal                  = {ACM Comput. Surv.},
  Year                     = {2009},
  Number                   = {4},
  Pages                    = {1--54},
  Volume                   = {41},

  File                     = {:Software model checking.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2010.03.11}
}

@InProceedings{Jin2009,
  Title                    = {3-HOP: a high-compression indexing scheme for reachability query},
  Author                   = {Jin, Ruoming and Xiang, Yang and Ruan, Ning and Fuhry, David},
  Booktitle                = {Proceedings of the 35th SIGMOD international conference on Management of data},
  Year                     = {2009},

  Address                  = {Providence, Rhode Island, USA},
  Pages                    = {813--826},
  Publisher                = {ACM},

  Doi                      = {10.1145/1559845.1559930},
  Owner                    = {lvyi},
  Timestamp                = {2012.02.24}
}

@InProceedings{Jurdzinski2000,
  Title                    = {Small Progress Measures for Solving Parity Games},
  Author                   = {Jurdzinski, M.},
  Year                     = {2000},
  Number                   = {1770},
  Pages                    = {290-301--},

  Comment                  = {Small Progress Measures for Solving Parity Games
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {54},
  Timestamp                = {2008.06.11}
}

@InProceedings{Jurdzinski1998,
  Title                    = {Deciding the winner in parity games is in UP intersection co-UP},
  Author                   = {Jurdzinski, M.},
  Year                     = {1998},
  Number                   = {3},
  Pages                    = {119-124--},
  Volume                   = {68},

  Comment                  = {Deciding the winner in parity games is in UP intersection co-UP
206177214
0020-0190},
  Journal                  = {INFORMATION PROCESSING LETTERS},
  Owner                    = {lvyi},
  Refid                    = {53},
  Timestamp                = {2008.06.11}
}

@InProceedings{Jurdzinski2006,
  Title                    = {A deterministic subexponential algorithm for solving parity games},
  Author                   = {Jurdzinski, Marcin and Paterson, Mike and Zwick, Uri},
  Booktitle                = {Proceedings of the seventeenth annual ACM-SIAM symposium on Discrete algorithm},
  Year                     = {2006},

  Address                  = {Miami, Florida},
  Pages                    = {--},
  Publisher                = {ACM},

  Comment                  = {1109571 117-123},
  Owner                    = {lvyi},
  Refid                    = {90},
  Timestamp                = {2008.06.11}
}

@InCollection{Kaiser2010,
  Title                    = {Dynamic Cutoff Detection in Parameterized Concurrent Programs},
  Author                   = {Kaiser, Alexander and Kroening, Daniel and Wahl, Thomas},
  Booktitle                = {Computer Aided Verification},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2010},
  Editor                   = {Touili, Tayssir and Cook, Byron and Jackson, Paul},
  Pages                    = {645-659},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {6174},

  Doi                      = {10.1007/978-3-642-14295-6_55},
  File                     = {:Dynamic Cutoff Detection in Parameterized Concurrent Programs.pdf:PDF},
  ISBN                     = {978-3-642-14294-9},
  Owner                    = {lvyi},
  Timestamp                = {2013.05.03},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-14295-6_55}
}

@Other{Kang2008,
  Title                    = {Formal Modeling and Analysis of a Flash Filesystem in Alloy},
  Abstract                 = {This paper describes the formal modeling and analysis of a design for a flash-based filesystem in Alloy. We model the basic operations of a filesystem as well as features that are crucial to NAND flash hardware, such as wear-leveling and erase-unit reclamation. In addition, we address the issue of fault tolerance by modeling a mechanism for recovery from interrupted filesystem operations due to unexpected power loss. We analyze the correctness of our flash filesystem model by checking trace inclusion against a POSIX-compliant abstract filesystem, in which a file is modeled simply as an array of data elements. The analysis is fully automatic and complete within a finite scope.},
  Author                   = {Kang, Eunsuk and Jackson, Daniel},
  File                     = {:Formal Modeling and Analysis of a Flash Filesystem in Alloy.pdf:PDF},
  Journal                  = {Abstract State Machines, B and Z},
  Owner                    = {lvyi},
  Pages                    = {294--308},
  Timestamp                = {2009.06.11},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-87603-8_23},
  Year                     = {2008}
}

@Article{Karsai2003,
  Title                    = {Model-integrated development of embedded software},
  Author                   = {Karsai, G. and Sztipanovits, J. and Ledeczi, A. and Bapty, T.},
  Journal                  = {Proceedings of the IEEE DOI - 10.1109/JPROC.2002.805824},
  Year                     = {2003},
  Number                   = {1},
  Pages                    = {145--164},
  Volume                   = {91},

  Abstract                 = {The paper describes a model-integrated approach for embedded software development that is based on domain-specific, multiple-view models used in all phases of the development process. Models explicitly represent the embedded software and the environment it operates in, and capture the requirements and the design of the application, simultaneously. Models are descriptive , in the sense that they allow the formal analysis, verification, and validation of the embedded system at design time. Models are also generative, in the sense that they carry enough information for automatically generating embedded systems using the techniques of program generators. Because of the widely varying nature of embedded systems, a single modeling language may not be suitable for all domains; thus, modeling languages are often domain-specific. To decrease the cost of defining and integrating domain-specific modeling languages and corresponding analysis and synthesis tools, the model-integrated approach is applied in a metamodeling architecture, where formal models of domain-specific modeling languages-called metamodels-play a key role in customizing and connecting components of tool chains. This paper discusses the principles and techniques of model-integrated embedded software development in detail, as well as the capabilities of the tools supporting the process. Examples in terms of real systems will be given that illustrate how the model-integrated approach addresses the physical nature, the assurance issues, and the dynamic structure of embedded software.},
  Booktitle                = {Proceedings of the IEEE},
  File                     = {:Model-integrated development of embedded software.pdf:PDF},
  ISSN                     = {0018-9219},
  Keywords                 = {embedded systems, formal verification, software engineering, design-space exploration, domain-specific modeling languages, embedded software development, embedded systems, formal analysis, formal validation, formal verification, model verification, model-based development, model-integrated computing, modeling language, software engineering, software generators, system engineering},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09}
}

@PhdThesis{Keleher1995,
  Title                    = {Lazy release consistency for distributed shared memory},
  Author                   = {Keleher, Peter John},
  School                   = {Rice University},
  Year                     = {1995},

  File                     = {:Lazy release consistency for distributed shared memory.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2012.03.28}
}

@InProceedings{Kesten2000,
  Title                    = {Control and Data Abstraction: The Cornerstones of Practical Formal Verification},
  Author                   = {Yonit Kesten and Amir Pnueli},
  Year                     = {2000},
  Number                   = {4},
  Pages                    = {328-342},
  Volume                   = {2},

  File                     = {:Control and Data Abstraction- The Cornerstones of Practical Formal Verification.pdf:PDF},
  Journal                  = {International Journal on Software Tools for Technology Transfer},
  Timestamp                = {2008.08.08},
  Url                      = {citeseer.ist.psu.edu/kesten00control.html}
}

@Article{Kesten2000a,
  Title                    = {Verification by augmented finitary abstraction},
  Author                   = {Yonit Kesten and Amir Pnueli},
  Journal                  = {Information and Computation},
  Year                     = {2000},
  Number                   = {1},
  Pages                    = {203-243},
  Volume                   = {163},

  File                     = {:Verification by Augmented Finitary Abstraction.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@InProceedings{Kesten2001,
  Title                    = {Verification by Augmented Abstraction: The Automata-Theoretic View},
  Author                   = {Kesten, Yonit and Pnueli, Amir and Vardi, Moshe Y.},
  Year                     = {2001},
  Month                    = jun,
  Number                   = {4},
  Pages                    = {668--690},
  Volume                   = {62},

  Abstract                 = {This paper deals with the proof method of verification by finitary abstraction (), which presents an alternative approach to the verification of (potentially infinite-state) reactive systems. We assume that the negation of the property to be verified is given by the user in the form of an infinite-state nondeterministic B�chi discrete system (). The method consists of a two-step process by which, in a first step, the system and its (negated) specification are combined into a single infinite-state fair discrete system (, which is similar to a but with Streett acceptance conditions), which is abstracted into a finite-state automaton. The second step uses model checking to establish that the abstracted automaton is infeasible, i.e., has no computations. �The method can be considered as a viable alternative to verification by temporal deduction, which, up to now, has been the main method generally applicable for verification of infinite-state systems. �The paper presents a general recipe for an abstraction, which is shown to be sound, where soundness means that infeasibility of the abstracted implies infeasibility of the unabstracted one, implying in turn the validity of the property over the concrete (infinite-state) system. To make the method applicable for the verification of liveness properties, pure abstraction is sometimes no longer adequate. We show that by augmenting the system with an appropriate (and standardly constructible) progress monitor, we obtain an augmented system, whose computations are essentially the same as those of the original system and which may now be abstracted while preserving the desired liveness properties. We refer to the extended method as verification by augmented abstraction (). �We then proceed to show that the method is sound and complete for proving all properties whose negations are expressible by a . Given that every linear temporal logic () property can be translated to a , this establishes that the method is sound and complete for proving the validity of all properties, including both safety and liveness.},
  File                     = {:Verification by Augmented Abstraction- The Automata–Theoretic View.pdf:PDF},
  Journal                  = {Journal of Computer and System Sciences},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.14},
  Url                      = {http://www.sciencedirect.com/science/article/B6WJ0-45B65MB-7/2/991b11782bf653da06a34e5956a279f5}
}

@Article{King1976,
  Title                    = {Symbolic execution and program testing},
  Author                   = {King, James C.},
  Journal                  = {Commun. ACM},
  Year                     = {1976},
  Number                   = {7},
  Pages                    = {385--394},
  Volume                   = {19},

  Doi                      = {10.1145/360248.360252},
  File                     = {:Symbolic execution and program testing.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2011.05.25}
}

@Article{Klein2009,
  Title                    = {Operating system verification - An overview},
  Author                   = {Klein, Gerwin},
  Journal                  = {Sadhana},
  Year                     = {2009},

  Month                    = feb,
  Number                   = {1},
  Pages                    = {27--69},
  Volume                   = {34},

  Abstract                 = {This paper gives a high-level introduction to the topic of formal, interactive, machine-checked software verification in general, and the verification of operating systems code in particular. We survey the state of the art, the advantages and limitations of machine-checked code proofs, and describe two specific ongoing larger-scale verification projects in more detail.},
  File                     = {:Operating system verification—An overview.pdf:PDF},
  ISSN                     = {0256-2499},
  Keywords                 = {Engineering},
  Owner                    = {lvyi},
  Publisher                = {Springer India, in co-publication with Indian Academy of Sciences},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s12046-009-0002-4}
}

@Article{Klein2010,
  Title                    = {seL4: formal verification of an operating-system kernel},
  Author                   = {Klein, Gerwin and Andronick, June and Elphinstone, Kevin and Heiser, Gernot and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and Sewell, Thomas and Tuch, Harvey and Winwood, Simon},
  Journal                  = {Commun. ACM},
  Year                     = {2010},
  Number                   = {6},
  Pages                    = {107--115},
  Volume                   = {53},

  Doi                      = {10.1145/1743546.1743574},
  File                     = {:seL4- formal verification of an operating-system kernel.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2011.10.10}
}

@Article{Klein2009a,
  Title                    = {Operating System Verification},
  Author                   = {Klein, Gerwin and Huuck, Ralf and Schlich, Bastian},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {123--124},
  Volume                   = {42},

  File                     = {:Operating System Verification.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9126-9}
}

@InProceedings{Koo2006,
  Title                    = {Test generation using SAT-based bounded model checking for validation of pipelined processors},
  Author                   = {Koo, Heon-Mo and Mishra, Prabhat},
  Booktitle                = {Proceedings of the 16th ACM Great Lakes symposium on VLSI},
  Year                     = {2006},

  Address                  = {Philadelphia, PA, USA},
  Pages                    = {362--365},
  Publisher                = {ACM},

  File                     = {:Test generation using SAT-based bounded model checking for validation of pipelined processors.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.10}
}

@Book{Kozen1982,
  Author                   = {Kozen, D. C.},
  Year                     = {1982},

  Booktitle                = {Results on the propositional mu-calculus},
  Comment                  = {Results on the propositional mu-calculus
123317194},
  Owner                    = {lvyi},
  Pages                    = {--},
  Refid                    = {55},
  Timestamp                = {2008.06.11}
}

@InProceedings{Krioukov2008,
  Title                    = {Parity lost and parity regained},
  Author                   = {Krioukov, Andrew and Bairavasundaram, Lakshmi N. and Goodson, Garth R. and Srinivasan, Kiran and Thelen, Randy and Arpaci-Dusseau, Andrea C. and Arpaci-Dussea, Remzi H.},
  Booktitle                = {Proceedings of the 6th USENIX Conference on File and Storage Technologies},
  Year                     = {2008},

  Address                  = {San Jose, California},
  Pages                    = {1--15},
  Publisher                = {USENIX Association},

  File                     = {:Parity Lost and Parity Regained.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2011.10.10}
}

@InProceedings{Krstic2005,
  Title                    = {Parametrized System Verification with Guard Strengthening and Parameter Abstraction},
  Author                   = {Sava Krstic},
  Booktitle                = {AVIS 2005},
  Year                     = {2005},

  Journal                  = {AVIS},
  Owner                    = {lvyi},
  Timestamp                = {2013.01.08}
}

@InProceedings{Kumar2005,
  Title                    = {Interconnections in multi-core architectures: understanding mechanisms, overheads and scaling},
  Author                   = {Kumar, R. and Zyuban, V. and Tullsen, D.M.},
  Booktitle                = {Computer Architecture, 2005. ISCA '05. Proceedings. 32nd International Symposium on},
  Year                     = {2005},
  Pages                    = {408--419},

  File                     = {:Interconnections in multi-core architectures- understanding mechanisms, overheads and scaling.pdf:PDF},
  ISSN                     = {1063-6897},
  Keywords                 = {cache storage, microprocessor chips, multiprocessor interconnection networks, parallel architectures, performance evaluation, system buses, chip multiprocessor, hierarchical bus structure, interconnect architectures, interconnect bandwidth, interconnections, multicore architectures, multicore design, on-chip interconnects},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@Article{Kuperstein2012,
  Title                    = {Automatic inference of memory fences},
  Author                   = {Kuperstein, Michael and Vechev, Martin and Yahav, Eran},
  Journal                  = {SIGACT News},
  Year                     = {2012},

  Month                    = jun,
  Number                   = {2},
  Pages                    = {108--123},
  Volume                   = {43},

  Acmid                    = {2261438},
  Address                  = {New York, NY, USA},
  Doi                      = {10.1145/2261417.2261438},
  File                     = {:Automatic inference of memory fences.pdf:PDF},
  ISSN                     = {0163-5700},
  Issue_date               = {June 2012},
  Numpages                 = {16},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2013.08.20},
  Url                      = {http://doi.acm.org/10.1145/2261417.2261438}
}

@Other{Kurshan2008,
  Title                    = {Scaling Commercial Verification to Larger Systems},
  Abstract                 = {Simulation test coverage does not scale gracefully with growing system design size. Component interactions grow exponentially with the number of system components, while conventional system test at best can increase coverage as a linear function of allotted test time.},
  Author                   = {Kurshan, Robert},
  File                     = {:Scaling Commercial Verification to Larger Systems.pdf:PDF},
  Journal                  = {Hardware and Software: Verification and Testing},
  Owner                    = {lvyi},
  Pages                    = {8--13},
  Timestamp                = {2010.03.08},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-77966-7_2},
  Year                     = {2008}
}

@InProceedings{Kuskin1994,
  Title                    = {The Stanford FLASH multiprocessor},
  Author                   = {Kuskin, J. and Ofelt, D. and Heinrich, M. and Heinlein, J. and Simoni, R. and Gharachorloo, K. and Chapin, J. and Nakahira, D. and Baxter, J. and Horowitz, M. and Gupta, A. and Rosenblum, M. and Hennessy, J.},
  Booktitle                = {Computer Architecture, 1994., Proceedings the 21st Annual International Symposium on},
  Year                     = {1994},
  Pages                    = {302--313},

  Abstract                 = {The FLASH multiprocessor efficiently integrates support for cache-coherent shared memory and high-performance message passing, while minimizing both hardware and software overhead. Each node in FLASH contains a microprocessor, a portion of the machine's global memory, a port to the interconnection network, The MAGIC chip handles all communication both within the node and among nodes, using hardwired data paths for efficient data movement and a programmable processor optimized for executing protocol operations. The use of the protocol processor makes FLASH very flexible-it can support a variety of different communication mechanisms-and simplifies the design and implementation. This paper presents the architecture of FLASH and MAGIC, and discusses the base cache-coherence and message-passing protocols. Latency and occupancy numbers, which are derived from our system-level simulator and our Verilog code, are given for several common protocol operations. The paper also describes our software strategy and FLASH's current status},
  Keywords                 = {message passing, microprocessor chips, parallel architectures, protocols, shared memory systems, MAGIC chip, Stanford FLASH multiprocessor, Verilog code, cache coherent shared memory, hardwired data paths, latency, message passing protocols, occupancy},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@InCollection{LaTorre2010,
  Title                    = {Model-Checking Parameterized Concurrent Programs Using Linear Interfaces},
  Author                   = {La Torre, Salvatore and Madhusudan, P. and Parlato, Gennaro},
  Booktitle                = {Computer Aided Verification},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2010},
  Editor                   = {Touili, Tayssir and Cook, Byron and Jackson, Paul},
  Pages                    = {629-644},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {6174},

  Doi                      = {10.1007/978-3-642-14295-6_54},
  File                     = {:Model-Checking Parameterized Concurrent Program Using Linear Interfaces.pdf:PDF},
  ISBN                     = {978-3-642-14294-9},
  Owner                    = {lvyi},
  Timestamp                = {2013.05.07},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-14295-6_54}
}

@Article{Labs1998,
  Title                    = {Cadence SMV},
  Author                   = {Cadence Berkeley Labs},
  Journal                  = {http://www.kenmcmil.com/smv.html},
  Year                     = {1998},

  Owner                    = {lvyi},
  Timestamp                = {2013.01.07},
  Url                      = {http://www.kenmcmil.com/smv.html}
}

@InProceedings{Ladan-Mozes2008,
  Title                    = {A consistency architecture for hierarchical shared caches},
  Author                   = {Ladan-Mozes, Edya and Leiserson, Charles E.},
  Booktitle                = {Proceedings of the twentieth annual symposium on Parallelism in algorithms and architectures},
  Year                     = {2008},

  Address                  = {Munich, Germany},
  Pages                    = {11--22},
  Publisher                = {ACM},

  File                     = {:A consistency architecture for hierarchical shared caches.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26}
}

@InProceedings{Lafuente2007,
  Title                    = {Towards Model Checking Spatial Properties with SPIN},
  Author                   = {Lafuente, A. L.},
  Year                     = {2007},
  Number                   = {4595},
  Pages                    = {223-242--},

  Comment                  = {Towards Model Checking Spatial Properties with SPIN
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {84},
  Timestamp                = {2008.06.11}
}

@InProceedings{Lahiri2004,
  Title                    = {Indexed Predicate Discovery for Unbounded System Verification},
  Author                   = {Lahiri, Shuvendu K. and Bryant, Randal E.},
  Year                     = {2004},
  Pages                    = {135--147},

  Abstract                 = {Predicate abstraction has been proved effective for verifying several infinite-state systems. In predicate abstraction, an abstract system is automatically constructed given a set of predicates. Predicate abstraction coupled with automatic predicate discovery provides for a completely automatic verification scheme. For systems with unbounded integer state variables (e.g. software), counterexample guided predicate discovery has been successful in identifying the necessary predicates. For verifying systems with function state variables, which include systems with unbounded memories (microprocessors), arrays in programs, and parameterized systems, an extension to predicate abstraction has been suggested which uses predicates with free (index) variables. Unfortunately, counterexample guidedpredicate discovery is not applicable to this method. In this paper, we propose a simple heuristic for discovering indexed predicates. We illustrate the effectiveness of the approach for verifying safety properties of two systems: (i) a version of the Bakery mutual exclusion protocol, and (ii) a directory-based cache coherence protocol with unbounded FIFO channels per client.},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.11},
  Url                      = {http://www.springerlink.com/content/tay30b4ngbjt7lrb}
}

@Other{Lamport2005,
  Title                    = {Real-Time Model Checking Is Really Simple},
  Abstract                 = {It is easy to write and verify real-time specifications with existing languages and methods; one just represents time as an ordinary variable and expresses timing requirements with special timer variables. The resulting specifications can be verified with an ordinary model checker. This basic idea and some less obvious details are explained, and results are presented for two examples.},
  Author                   = {Lamport, Leslie},
  Booktitle                = {Lecture Notes in Computer Science},
  Editor                   = {Borrione, Dominique and Paul, Wolfgang},
  File                     = {:D\:\\papers\\Real-Time Model Checking is Really Simple.pdf:PDF},
  Owner                    = {lvyi},
  Pages                    = {162-175--175},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2011.06.10},
  Url                      = {http://dx.doi.org/10.1007/11560548_14},
  Volume                   = {3725},
  Year                     = {2005}
}

@InProceedings{Lamport1997,
  Title                    = {How to make a correct multiprocess program execute correctly on a multiprocessor},
  Author                   = {Lamport, L.},
  Booktitle                = {Computers, IEEE Transactions on},
  Year                     = {1997},
  Number                   = {7},
  Pages                    = {779--782},
  Volume                   = {46},

  Abstract                 = {A multiprocess program executing on a modern multiprocessor must issue explicit commands to synchronize memory accesses. A method is proposed for deriving the necessary commands from a correctness proof of the underlying algorithm in a formalism based on temporal relations among operation executions},
  File                     = {:How to make a correct multiprocess program execute correctly on amultiprocessor.pdf:PDF},
  ISSN                     = {0018-9340},
  Journal                  = {Computers, IEEE Transactions on},
  Keywords                 = {concurrency control, processor scheduling, program verification, synchronisation, correctness proof, memory accesses, multiprocess program, multiprocessor, operation executions, temporal relations},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.30}
}

@InProceedings{Lamport1979,
  Title                    = {How to Make a Multiprocessor Computer that Correctly Executes Multiprocess Programs},
  Author                   = {Lamport, Leslie},
  Year                     = {1979},
  Number                   = {9},
  Pages                    = {690-691--},
  Volume                   = {28},

  Comment                  = {September
How to Make a Multiprocessor Computer that Correctly Executes Multiprocess Programs},
  Journal                  = {IEEE Transactions on Computers},
  Owner                    = {lvyi},
  Refid                    = {3},
  Timestamp                = {2008.06.11}
}

@InProceedings{Lamport1978,
  Title                    = {Time, clocks, and the ordering of events in a distributed system},
  Author                   = {Lamport, Leslie},
  Year                     = {1978},
  Number                   = {7},
  Pages                    = {558--565},
  Publisher                = {ACM},
  Volume                   = {21},

  File                     = {:Time, clocks, and the ordering of events in a distributed system.pdf:PDF},
  Journal                  = {Commun. ACM},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.31}
}

@InProceedings{Landin1991,
  Title                    = {Race-free interconnection networks and multiprocessor consistency},
  Author                   = {Landin, Anders and Hagersten, Erik and Haridi, Seif},
  Year                     = {1991},
  Number                   = {3},
  Pages                    = {106--115},
  Publisher                = {ACM},
  Volume                   = {19},

  File                     = {:Race-free interconnection networks and multiprocessor consistency.pdf:PDF},
  Journal                  = {SIGARCH Comput. Archit. News},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@Other{Larsen1995,
  Title                    = {Model-checking for real-time systems},
  Abstract                 = {Efficient automatic model-checking algorithms for real-time systems have been obtained in recent years based on the state-region graph technique of Alur, Courcoubetis and Dill. However, these algorithms are faced with two potential types of explosion arising from parallel composition: explosion in the space of control nodes, and explosion in the region space over clock-variables.},
  Author                   = {Larsen, Kim and Pettersson, Paul and Yi, Wang},
  Booktitle                = {Lecture Notes in Computer Science},
  Editor                   = {Reichel, Horst},
  File                     = {:D\:\\papers\\Model-checking for real-time systems.pdf:PDF},
  Owner                    = {lvyi},
  Pages                    = {62-88--88},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2011.06.10},
  Url                      = {http://dx.doi.org/10.1007/3-540-60249-6_41},
  Volume                   = {965},
  Year                     = {1995}
}

@InProceedings{Larsen1997,
  Title                    = {Uppaal in a nutshell},
  Author                   = {Larsen, Kim G. and Pettersson, Paul and Yi, Wang},
  Year                     = {1997},
  Number                   = {1},
  Pages                    = {134-152--},
  Volume                   = {1},

  Abstract                 = {&nbsp;&nbsp;},
  Comment                  = {Uppaal in a nutshell
10.1007/s100090050010},
  Journal                  = {International Journal on Software Tools for Technology Transfer (STTT)},
  Owner                    = {lvyi},
  Refid                    = {64},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/s100090050010}
}

@Other{Larsen1995a,
  Title                    = {Compositional and symbolic model-checking of real-time systems},
  Abstract                 = {is permitted for educational or research use on condition that this copyright notice is included in any copy. See back inner page for a list of recent publications in the BRICS Report Series. Copies may be obtained by contacting: BRICS},
  Author                   = {Larsen, Kim G. and Pettersson, Paul and Yi, Wang},
  Comment                  = {CiteSeerX - Scientific Literature Digital Library and Search Engine [http://citeseerx.ist.psu.edu/oai2] (United States)},
  File                     = {:D\:\\papers\\Compositional and symbolic model-checking of real-time systems.pdf:PDF},
  Owner                    = {lvyi},
  Pages                    = {--},
  Publisher                = {IEEE Computer Society Press},
  Refid                    = {http://www.scientificcommons.org/43312710},
  Timestamp                = {2011.06.10},
  Year                     = {1995}
}

@InProceedings{Lee2010,
  Title                    = {Using memory mapping to support cactus stacks in work-stealing runtime systems},
  Author                   = {Lee, I-Ting Angelina and Boyd-Wickizer, Silas and Huang, Zhiyi and Leiserson, Charles E.},
  Booktitle                = {Proceedings of the 19th international conference on Parallel architectures and compilation techniques},
  Year                     = {2010},

  Address                  = {New York, NY, USA},
  Pages                    = {411--420},
  Publisher                = {ACM},
  Series                   = {PACT '10},

  Acmid                    = {1854324},
  Doi                      = {10.1145/1854273.1854324},
  File                     = {:Using Memory Mapping to Support Cactus Stacks in Work-Stealing Runtime Systems.pdf:PDF},
  ISBN                     = {978-1-4503-0178-7},
  Keywords                 = {cactus stack, cilk, interoperability, memory mapping, serial-parallel reciprocity, work stealing},
  Location                 = {Vienna, Austria},
  Numpages                 = {10},
  Owner                    = {lvyi},
  Timestamp                = {2013.01.25},
  Url                      = {http://doi.acm.org/10.1145/1854273.1854324}
}

@InProceedings{Leijen2009,
  Title                    = {The design of a task parallel library},
  Author                   = {Leijen, Daan and Schulte, Wolfram and Burckhardt, Sebastian},
  Booktitle                = {Proceedings of the 24th ACM SIGPLAN conference on Object oriented programming systems languages and applications},
  Year                     = {2009},

  Address                  = {New York, NY, USA},
  Pages                    = {227--242},
  Publisher                = {ACM},
  Series                   = {OOPSLA '09},

  Acmid                    = {1640106},
  Doi                      = {10.1145/1640089.1640106},
  File                     = {:The Design of a Task Parallel Library.pdf:PDF},
  ISBN                     = {978-1-60558-766-0},
  Keywords                 = {domain specific languages, duplicating queue, parallelism, work stealing},
  Location                 = {Orlando, Florida, USA},
  Numpages                 = {16},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.30},
  Url                      = {http://doi.acm.org/10.1145/1640089.1640106}
}

@InProceedings{Lenoski1990,
  Title                    = {The directory-based cache coherence protocol for the DASH multiprocessor},
  Author                   = {Lenoski, Daniel and Laudon, James and Gharachorloo, Kourosh and Gupta, Anoop and Hennessy, John},
  Booktitle                = {Proceedings of the 17th annual international symposium on Computer Architecture},
  Year                     = {1990},

  Address                  = {Seattle, Washington, United States},
  Pages                    = {148--159},
  Publisher                = {ACM},

  Doi                      = {10.1145/325164.325132},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@Article{Lenoski1992,
  Title                    = {The Stanford Dash multiprocessor},
  Author                   = {Lenoski, D. and Laudon, J. and Gharachorloo, K. and Weber, W.-D. and Gupta, A. and Hennessy, J. and Horowitz, M. and Lam, M.S.},
  Journal                  = {Computer},
  Year                     = {1992},
  Number                   = {3},
  Pages                    = {63--79},
  Volume                   = {25},

  Abstract                 = {The overall goals and major features of the directory architecture for shared memory (Dash) are presented. The fundamental premise behind the architecture is that it is possible to build a scalable high-performance machine with a single address space and coherent caches. The Dash architecture is scalable in that it achieves linear or near-linear performance growth as the number of processors increases from a few to a few thousand. This performance results from distributing the memory among processing nodes and using a network with scalable bandwidth to connect the nodes. The architecture allows shared data to be cached, significantly reducing the latency of memory accesses and yielding higher processor utilization and higher overall performance. A distributed directory-based protocol that provides cache coherence without compromising scalability is discussed in detail. The Dash prototype machine and the corresponding software support are described.<<ETX>>},
  Booktitle                = {Computer},
  ISSN                     = {0018-9162},
  Keywords                 = {multiprocessing systems, parallel architectures, Dash architecture, Dash prototype machine, Stanford Dash multiprocessor, cache coherence, coherent caches, directory architecture, distributed directory-based protocol, memory accesses, near-linear performance growth, processing nodes, processor utilization, scalability, scalable bandwidth, scalable high-performance machine, shared data, shared memory, single address space, software support},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@Article{Leroy2009,
  Title                    = {Formal verification of a realistic compiler},
  Author                   = {Leroy, Xavier},
  Journal                  = {Commun. ACM},
  Year                     = {2009},
  Number                   = {7},
  Pages                    = {107--115},
  Volume                   = {52},

  Doi                      = {10.1145/1538788.1538814},
  File                     = {:Formal verification of a realistic compiler.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2011.06.09}
}

@InProceedings{Leverich2007,
  Title                    = {Comparing memory systems for chip multiprocessors},
  Author                   = {Leverich, Jacob and Arakida, Hideho and Solomatnikov, Alex and Firoozshahian, Amin and Horowitz, Mark and Kozyrakis, Christos},
  Booktitle                = {Proceedings of the 34th annual international symposium on Computer architecture},
  Year                     = {2007},

  Address                  = {San Diego, California, USA},
  Pages                    = {358--368},
  Publisher                = {ACM},

  File                     = {:Comparing memory systems for chip multiprocessors.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26}
}

@InProceedings{Li2006,
  Title                    = {Microarchitecture and Performance Analysis of Godson-2 SMT Processor},
  Author                   = {Li, Zusong and Xu, Xianchao and Hu, Weiwu and Tang, Zhimin},
  Booktitle                = {Computer Design, 2006. ICCD 2006. International Conference on},
  Year                     = {2006},
  Pages                    = {485--490},

  Abstract                 = {This paper introduces the microarchitecture and logical implementation of SMT (Simultaneous Multithreading) improvement of Godson-2 processor which is a 64-bit, four-issue, out-of-order execution high performance processor. The condition for implementing correct memory consistency model in Godson-2 SMT processor is studied and a new register-level sharing and synchronization scheme is proposed. Godson-2 SMT processor has been implemented at the RTL level and simulated with the VstationPro of Mentor Graphics. The Linux operating system is ported to run in Godson-2 SMT processor and application programs such as SPEC CPU2000 benchmark suite are used to evaluate performance. Experimental results indicate that the performance of Godson-2 SMT processor is improved significantly by fully exploiting thread-level parallelism and optimized utilization of functional units. The average speedup is 31.3% with 18.8% area overhead.},
  File                     = {:Microarchitecture and Performance Analysis of Godson-2 SMT Processor.pdf:PDF},
  ISSN                     = {1063-6404},
  Keywords                 = {Linux, computer architecture, microprocessor chips, multi-threading, performance evaluation, synchronisation, Godson-2 SMT processor, Linux operating system, RTL level, SPEC CPU2000 benchmark suite, mentor graphics, register-level sharing, synchronization scheme, thread-level parallelism, Godson-2, Memory consistency model, Microarchitecture, Register sharing, Simultaneous multithreading},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@Article{Liggesmeyer2009,
  Title                    = {Trends in Embedded Software Engineering},
  Author                   = {Liggesmeyer, P. and Trapp, M.},
  Journal                  = {Software, IEEE DOI - 10.1109/MS.2009.80},
  Year                     = {2009},
  Number                   = {3},
  Pages                    = {19--25},
  Volume                   = {26},

  Abstract                 = {Software's importance in the development of embedded systems has been growing rapidly over the last 20 years. Because of current embedded systems' complexity, they require sophisticated engineering methods for systematically developing high-quality software. Embedded software development differs from IT system development in several ways. For example, IT systems developers can use standard hardware and software platforms and don't face the resource requirements that embedded systems developers must take into account. To meet embedded software's extrafunctional requirements, embedded systems development is shifting from programming to model-driven development. Another important trend is the emphasis on the quality assurance of safety-related systems.},
  Booktitle                = {Software, IEEE},
  File                     = {:Trends in Embedded Software Engineering.pdf:PDF},
  ISSN                     = {0740-7459},
  Keywords                 = {embedded systems, software quality, IT system development, embedded software development, embedded software engineering, embedded systems, quality assurance, safety-related systems},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09}
}

@InProceedings{Lin2005,
  Title                    = {Predicate mu-Calculus for Mobile Ambients},
  Author                   = {Lin, Huimin},
  Year                     = {2005},
  Number                   = {1},
  Pages                    = {95-104--},
  Volume                   = {20},

  Comment                  = {Predicate mu-Calculus for Mobile Ambients
Lin2005
article},
  Journal                  = {J. Comput. Sci. Technol.},
  Owner                    = {lvyi},
  Refid                    = {83},
  Timestamp                = {2008.06.11}
}

@InCollection{Linden2011,
  Title                    = {A Verification-Based Approach to Memory Fence Insertion in Relaxed Memory Systems},
  Author                   = {Linden, Alexander and Wolper, Pierre},
  Booktitle                = {Model Checking Software},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2011},
  Editor                   = {Groce, Alex and Musuvathi, Madanlal},
  Pages                    = {144-160},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {6823},

  Doi                      = {10.1007/978-3-642-22306-8_10},
  File                     = {:A Verification-Based Approach to Memory Fence Insertion in Relaxed Memory Systems.pdf:PDF},
  ISBN                     = {978-3-642-22305-1},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-22306-8_10}
}

@InProceedings{Linder1994,
  Title                    = {Access graphs: a model for investigating memory consistency},
  Author                   = {Linder, D.H. and Harden, J.C.},
  Year                     = {1994},
  Month                    = {Jan},
  Number                   = {1},
  Pages                    = {39-52},
  Volume                   = {5},

  Abstract                 = {Computer architectures supporting shared memory continue to increase in complexity as designers seek to improve memory performance. This is especially true of proposals for massively parallel systems with distributed, yet shared, memory. The need to maintain a reasonably simple memory model for programmers, in spite of enhancements like caches and access pipelining, is responsible for many of the complications. We develop a novel graph model, access graphs, for visualizing processor/memory interaction. Access graphs symbolically represent the causal relationships between load, store, and synchronization events. The focus is on two classes of access graphs: pseudo and real. A pseudo access graph describes an execution in terms of abstract events familiar to the programmer. If the pseudo access graph is acyclic, then memory consistency is preserved during the execution. A real access graph describes an execution in terms of physical events known to the hardware designer. A real access graph must be acyclic since hardware cannot violate causality. Memory consistency can be verified for a given computer system by proving that for any acyclic real access graph describing a program's execution on that computer, an acyclic pseudo access graph can be derived describing the same execution},
  Doi                      = {10.1109/71.262587},
  File                     = {:Access graphs- a model for investigating memory consistency.pdf:PDF},
  ISSN                     = {1045-9219},
  Journal                  = {Parallel and Distributed Systems, IEEE Transactions on},
  Keywords                 = {computer architecture, shared memory systems, synchronisationaccess pipelining, caches, computer architectures, massively parallel systems, memory consistency, synchronization},
  Timestamp                = {2008.08.08}
}

@InProceedings{Lisa2007,
  Title                    = {Specifying memory consistency of write buffer multiprocessors},
  Author                   = {Lisa, Higham and Lillanne, Jackson and Jalal, Kawash},
  Year                     = {2007},
  Number                   = {1},
  Pages                    = {1--},
  Volume                   = {25},

  Comment                  = {Specifying memory consistency of write buffer multiprocessors
1189737},
  ISSN                     = {0734-2071},
  Journal                  = {ACM Trans. Comput. Syst.},
  Owner                    = {lvyi},
  Refid                    = {6},
  Timestamp                = {2008.06.11}
}

@InProceedings{Long1994,
  Title                    = {An Improved Algorithm for the Evaluation of Fixpoint Expressions},
  Author                   = {Long, D. E. and Browne, A. and Clarke, E. M. and Jha, S.},
  Year                     = {1994},
  Number                   = {818},
  Pages                    = {338--},

  Comment                  = {An Improved Algorithm for the Evaluation of Fixpoint Expressions
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {56},
  Timestamp                = {2008.06.11}
}

@InProceedings{Long2009,
  Title                    = {Architectural Support for Cilk Computations on Many-core Architectures},
  Author                   = {Long, Guoping and Fan, Dongrui and Zhang, Junchao},
  Booktitle                = {Proceedings of the 14th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
  Year                     = {2009},

  Address                  = {New York, NY, USA},
  Pages                    = {285--286},
  Publisher                = {ACM},
  Series                   = {PPoPP '09},

  Acmid                    = {1504217},
  Doi                      = {10.1145/1504176.1504217},
  File                     = {:Architectural support for cilk computations on many-core architectures.pdf:PDF},
  ISBN                     = {978-1-60558-397-6},
  Keywords                 = {cilk, many-core, memory consistency, parallel programming},
  Location                 = {Raleigh, NC, USA},
  Numpages                 = {2},
  Owner                    = {lvyi},
  Timestamp                = {2014.01.24},
  Url                      = {http://doi.acm.org/10.1145/1504176.1504217}
}

@InProceedings{Lu2008,
  Title                    = {Learning from mistakes: a comprehensive study on real world concurrency bug characteristics},
  Author                   = {Lu, Shan and Park, Soyeon and Seo, Eunsoo and Zhou, Yuanyuan},
  Year                     = {2008},
  Number                   = {3},
  Pages                    = {329--339},
  Publisher                = {ACM},
  Volume                   = {43},

  File                     = {:Learning from mistakes- a comprehensive study on real world concurrency bug characteristics.pdf:PDF},
  Journal                  = {SIGPLAN Not.},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@Article{Lu2007,
  Title                    = {AVIO: Detecting Atomicity Violations via Access-Interleaving Invariants},
  Author                   = {Lu, S. and Tucek, J. and Feng Qin and Yuanyuan Zhou},
  Journal                  = {Micro, IEEE},
  Year                     = {2007},

  Month                    = {Jan},
  Number                   = {1},
  Pages                    = {26-35},
  Volume                   = {27},

  Doi                      = {10.1109/MM.2007.5},
  ISSN                     = {0272-1732},
  Keywords                 = {multi-threading;multiprocessing programs;program debugging;access-interleaving invariant;atomicity violation bug detection;concurrent program;Computer bugs;Concurrent computing;Hardware;Interleaved codes;Multicore processing;Programming profession;Software testing;Software tools;Web server;Yarn;atomicity violation;bug detection;concurrency bug;concurrent program;debugging;hardware support;program invariant;reliability;testing},
  Owner                    = {lvyi},
  Timestamp                = {2014.02.09}
}

@InProceedings{Lu2006,
  Title                    = {AVIO: detecting atomicity violations via access interleaving invariants},
  Author                   = {Lu, Shan and Tucek, Joseph and Qin, Feng and Zhou, Yuanyuan},
  Year                     = {2006},
  Number                   = {11},
  Pages                    = {37--48},
  Publisher                = {ACM},
  Volume                   = {41},

  File                     = {:AVIO- detecting atomicity violations via access interleaving invariants.pdf:PDF},
  Journal                  = {SIGPLAN Not.},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Lu2004,
  Title                    = {Verifying a gigabit ethernet switch using SMV},
  Author                   = {Lu, Yuan and Jorda, Mike},
  Booktitle                = {Proceedings of the 41st annual conference on Design automation},
  Year                     = {2004},

  Address                  = {San Diego, CA, USA},
  Pages                    = {230--233},
  Publisher                = {ACM},

  File                     = {:Verifying a Gigabit Ethernet Switch Using SMV.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Ludden2002,
  Title                    = {Functional verification of the POWER4 microprocessor and POWER4 multiprocessor systems},
  Author                   = {J. M. Ludden},
  Year                     = {2002},
  Number                   = {1},
  Pages                    = {53--76},
  Publisher                = {IBM Corp.},
  Volume                   = {46},

  File                     = {:Functional verification of the POWER4 microprocessor and POWER4 multiprocessor systems.pdf:PDF},
  Journal                  = {IBM J. Res. Dev.},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.30}
}

@InProceedings{Ludden2002a,
  Title                    = {Functional verification of the POWER4 microprocessor and POWER4 multiprocessor systems},
  Author                   = {J. M. Ludden and W. Roesner and G. M. Heiling and J. R. Reysa and J. R. Jackson and B.-L. Chu and M. L. Behm and J. R. Baumgartner and R. D. Peterson and J. Abdulhafiz and W. E. Bucy and J. H. Klaus and D. J. Klema and T. N. Le and F. D. Lewis and P. E. Milling and L. A. McConville and B. S. Nelson and V. Paruthi and T. W. Pouarz and A. D. Romonosky and J. Stuecheli and K. D. Thompson and D. W. Victor and B. Wile},
  Year                     = {2002},
  Number                   = {1},
  Pages                    = {53--76},
  Publisher                = {IBM Corp.},
  Volume                   = {46},

  File                     = {:Functional verification of the POWER4 microprocessor and POWER4 multiprocessor systems.pdf:PDF},
  Journal                  = {IBM J. Res. Dev.},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.30}
}

@InProceedings{Lv2007,
  Title                    = {Computing Invariants for Parameter Abstraction},
  Author                   = {Yi Lv and Huimin Lin and Hong Pan},
  Booktitle                = {MEMOCODE 2007},
  Year                     = {2007},
  Pages                    = {29-38},
  Publisher                = {IEEE Computer Society},

  Abstract                 = {A new approach to combining invariants computing and guard strengthening methods is presented in the context of parameter abstraction for parameterized model checking of cache coherence protocols. The approach uses a small instance of a parameterized protocol as a "reference model" to compute candidate invariants. References to a specific node in these candidate invariants are then abstracted away, and the resulting formulas are used to strengthen guards of the transition rules in the abstract node. The correctness of the approach is guaranteed by symmetry which exists in many parameterized systems. A number of case studies have been carried out to illustrate the effectiveness of the approach. During the process a data consistency error was identified and fixed in the German 2004 cache coherence protocol.},
  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/MEMCOD.2007.371252},
  File                     = {:Computing Invariants for Parameter Abstraction.pdf:PDF},
  ISBN                     = {1-4244-1050-9},
  Journal                  = { 5th IEEE/ACM International Conference on Formal Methods and Models for Codesign},
  Timestamp                = {2008.08.08}
}

@TechReport{Lv2014,
  Title                    = {Efficiently and Completely Verifying Synchronized Consistency Models},
  Author                   = {Yi Lv and Luming Sun and Xiaochun Ye and Dongrui Fan and Peng Wu},
  Institution              = {State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences},
  Year                     = {2014},
  Number                   = {ISCAS-SKLCS-14-07},

  Owner                    = {lvyi},
  Timestamp                = {2014.04.11}
}

@InProceedings{Ma2011,
  Title                    = {Model Checking for Protocols Using Verds},
  Author                   = {Ma, Ming},
  Booktitle                = {Theoretical Aspects of Software Engineering (TASE), 2011 Fifth International Symposium on DOI - 10.1109/TASE.2011.17},
  Year                     = {2011},
  Pages                    = {231--234},

  Abstract                 = {We present the techniques of ternary boolean diagram-based model checking together with bounded semantics model checking used in the model checker called Verds, which is developed in our laboratory. In the experiment of protocol verification under different scenarios, we compare the performance of Verds against those of model checkers CMurphi and NuSMV, showing that Verds overall compares favorably to NuSMV and CMurphi.},
  Keywords                 = {Boolean algebra, formal verification, protocols, ternary logic, Verds model checker, bounded semantics model checking, protocol verification, ternary Boolean diagram-based model checking technique},
  Owner                    = {lvyi},
  Timestamp                = {2012.01.05}
}

@InCollection{Mador-Haim2012,
  Title                    = {An Axiomatic Memory Model for POWER Multiprocessors},
  Author                   = {Mador-Haim, Sela and Maranget, Luc and Sarkar, Susmit and Memarian, Kayvan and Alglave, Jade and Owens, Scott and Alur, Rajeev and Martin, MiloM.K. and Sewell, Peter and Williams, Derek},
  Booktitle                = {Computer Aided Verification},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2012},
  Editor                   = {Madhusudan, P. and Seshia, SanjitA.},
  Pages                    = {495-512},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7358},

  Doi                      = {10.1007/978-3-642-31424-7_36},
  File                     = {:An Axiomatic Memory Model for POWER Multiprocessors.pdf:PDF},
  ISBN                     = {978-3-642-31423-0},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-31424-7_36}
}

@InProceedings{Manferdelli2008,
  Title                    = {Challenges and Opportunities in Many-Core Computing},
  Author                   = {Manferdelli, J.L. and Govindaraju, N.K. and Crall, C.},
  Booktitle                = {Proceedings of the IEEE},
  Year                     = {2008},
  Number                   = {5},
  Pages                    = {808--815},
  Volume                   = {96},

  File                     = {:Challenges and Opportunities in Many-Core Computing.pdf:PDF},
  ISSN                     = {0018-9219},
  Journal                  = {Proceedings of the IEEE},
  Keywords                 = {knowledge engineering, multiprocessing systems, operating systems (computers), program compilers, programming languages, scheduling, software architecture, software libraries, software reusability, commodity hardware, concurrency, domain-specific knowledge, many-core architecture, many-core computing, operating system scheduling, program compiler, programming language, reusable component, software development, software library, Compilers, many-core computing, operating systems, parallel applications},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@InProceedings{Manovit2006,
  Title                    = {Completely verifying memory consistency of test program executions},
  Author                   = {Manovit, C. and Hangal, S.},
  Booktitle                = {High-Performance Computer Architecture, 2006. The Twelfth International Symposium on},
  Year                     = {2006},
  Pages                    = {166-175},

  Doi                      = {10.1109/HPCA.2006.1598123},
  File                     = {:Completely verifying memory consistency of test program executions.pdf:PDF},
  Keywords                 = {microprogramming;parallel architectures;performance evaluation;shared memory systems;NP-complete;Sun Microsystems;commercial-grade shared memory multiprocessor;data race;memory consistency verification;pseudo-random test program execution;Algorithm design and analysis;Computer bugs;Lamps;Multiprocessing systems;Performance analysis;Software testing;Spine;Sun;System testing;Vehicle crash testing},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Manovit2005,
  Title                    = {Efficient algorithms for verifying memory consistency},
  Author                   = {Manovit, C. and Hangal, S.},
  Booktitle                = {Proceedings of the seventeenth annual ACM symposium on Parallelism in algorithms and architectures},
  Year                     = {2005},

  Address                  = {Las Vegas, Nevada, USA},
  Pages                    = {245--252},
  Publisher                = {ACM},

  File                     = {:Efficient algorithms for verifying memory consistency.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Martin2001,
  Title                    = {Correctly implementing value prediction in microprocessors that support multithreading or multiprocessing},
  Author                   = {Martin, Milo M. K. and Sorin, Daniel J. and Cain, Harold W. and Hill, Mark D. and Lipasti, Mikko H.},
  Booktitle                = {Proceedings of the 34th annual ACM/IEEE international symposium on Microarchitecture},
  Year                     = {2001},

  Address                  = {Austin, Texas},
  Pages                    = {328--337},
  Publisher                = {IEEE Computer Society},

  File                     = {:Correctly implementing value prediction in microprocessors that support multithreading or multiprocessing.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.10}
}

@Article{Marurngsith2010,
  Title                    = {Specification-based Verification in a Distributed Shared Memory Simulation Model},
  Author                   = {Marurngsith, Worawan and Ibbett, Roland N.},
  Journal                  = {Simulation},
  Year                     = {2010},
  Number                   = {4},
  Pages                    = {229--245},
  Volume                   = {86},

  Doi                      = {10.1177/0037549709349843},
  File                     = {:Specification-based Verification in a Distributed Shared Memory Simulation Model.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {Society for Computer Simulation International},
  Timestamp                = {2011.11.16}
}

@InProceedings{Matsushita2002,
  Title                    = {Design experience of a chip multiprocessor merlot and expectation to functional verification},
  Author                   = {Matsushita, Satoshi},
  Booktitle                = {Proceedings of the 15th international symposium on System Synthesis},
  Year                     = {2002},

  Address                  = {Kyoto, Japan},
  Pages                    = {103--108},
  Publisher                = {ACM},

  File                     = {:Design Experience of a Chip Multiprocessor Merlot and Expectation to Functional Verification.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@Other{Mazurkiewicz1989,
  Title                    = {Basic notions of trace theory},
  Abstract                 = {The concept of traces has been introduced for describing non-sequential behaviour of concurrent systems via its sequential observations. Traces represent concurrent processes in the same way as strings represent sequential ones. The theory of traces can be used as a tool for reasoning about nets and it is hoped that applying this theory one can get a calculus of the concurrent processes analogous to that available for sequential systems. The following topics will be discussed: algebraic properties of traces, trace models of some concurrency phenomena, fixed-point calculus for finding the behaviour of nets, modularity, and some applications of the presented theory.},
  Author                   = {Mazurkiewicz, Antoni},
  File                     = {:Basic Notions of Trace Theory.pdf:PDF},
  Journal                  = {Linear Time, Branching Time and Partial Order in Logics and Models for Concurrency},
  Owner                    = {lvyi},
  Pages                    = {285--363},
  Timestamp                = {2010.04.22},
  Url                      = {http://dx.doi.org/10.1007/BFb0013025},
  Year                     = {1989}
}

@Other{Mazurkiewicz1987,
  Title                    = {Trace theory},
  Abstract                 = {The concept of traces has been introduced for describing non-sequential behaviour of concurrent systems via its sequential observations. Traces represent concurrent processes in the same way as strings represent sequential ones. The theory of traces can be used as a tool for reasoning about nets and it is hoped that applying this theory one can get a calculus of the concurrent processes anologous to that available for sequential systems. The following topics will be discussed: algebraic properties of traces, trace models of some concurrency phenomena, fixed-point calculus for finding the behaviour of nets, modularity, and some applications of the presented theory.},
  Author                   = {Mazurkiewicz, Antoni},
  File                     = {:Trace Theory.pdf:PDF},
  Journal                  = {Petri Nets: Applications and Relationships to Other Models of Concurrency},
  Owner                    = {lvyi},
  Pages                    = {278--324},
  Timestamp                = {2010.04.22},
  Url                      = {http://dx.doi.org/10.1007/3-540-17906-2_30},
  Year                     = {1987}
}

@InProceedings{McMillan2001,
  Title                    = {Parameterized Verification of the FLASH Cache Coherence Protocol by Compositional Model Checking},
  Author                   = {McMillan, K.},
  Year                     = {2001},
  Pages                    = {179--195},

  Abstract                 = {We consider the formal verification of the cache coherence protocol of the Stanford FLASH multiprocessor for N processors. The proof uses the SMV proof assistant, a proof system based on symbolic model checking. The proof process is described step by step. The protocol model is derived from an earlier proof of the FLASH protocol, using the PVS system, allowing a direct comparison between the two methods.},
  File                     = {:parameterized Verification of the FLASH Cache Coherence Protocol by Compositional Model Checking.pdf:PDF},
  Journal                  = {Correct Hardware Design and Verification Methods},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/3-540-44798-9_17}
}

@InProceedings{Mcmillan2009,
  Title                    = {What's in Common between Test, Model Checking, and Decision Procedures?},
  Author                   = {Mcmillan, Ken L.},
  Booktitle                = {Proceedings of the 14th International Workshop on Formal Methods for Industrial Critical Systems},
  Year                     = {2009},

  Address                  = {Eindhoven, The Netherlands},
  Pages                    = {35--36},
  Publisher                = {Springer-Verlag},

  File                     = {:Whats in Common between Test, Model Checking, and Decision Procedures.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.10}
}

@Book{McMillan1993,
  Title                    = {Symbolic Model Checking},
  Author                   = {McMillan, Kenneth L.},
  Publisher                = {Kluwer Academic Publishers},
  Year                     = {1993},
  Note                     = {Norwell, MA, USA},

  ISBN                     = {0792393805},
  Owner                    = {lvyi},
  Timestamp                = {2013.01.14}
}

@Article{Meixner2009,
  Title                    = {Dynamic Verification of Memory Consistency in Cache-Coherent Multithreaded Computer Architectures},
  Author                   = {Meixner, A. and Sorin, D.J.},
  Journal                  = {Dependable and Secure Computing, IEEE Transactions on},
  Year                     = {2009},

  Month                    = {Jan},
  Number                   = {1},
  Pages                    = {18-31},
  Volume                   = {6},

  Doi                      = {10.1109/TDSC.2007.70243},
  File                     = {:Dynamic Verification of Memory Consistency in Cache-Coherent Multithreaded Computer Architectures.pdf:PDF},
  ISSN                     = {1545-5971},
  Keywords                 = {error detection;SPARCv9 architecture;cache-coherent multithreaded computer architectures;dynamic verification of memory consistency;memory consistency;specified consistency model;Error-checking;Multi-core/single-chip multiprocessors},
  Owner                    = {lvyi},
  Timestamp                = {2014.02.09}
}

@InProceedings{Meixner2007,
  Title                    = {Error Detection via Online Checking of Cache Coherence with Token Coherence Signatures},
  Author                   = {Albert Meixner and Daniel J. Sorin},
  Year                     = {2007},

  Address                  = {Los Alamitos, CA, USA},
  Pages                    = {145-156},
  Publisher                = {IEEE Computer Society},
  Volume                   = {0},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/HPCA.2007.346193},
  File                     = {:Error Detection via Online Checking of Cache Coherence with Token Coherence Signatures.pdf:PDF},
  ISBN                     = {1-4244-0804-0},
  Journal                  = {hpca},
  Timestamp                = {2008.08.08}
}

@InProceedings{Meixner2006,
  Title                    = {Dynamic Verification of Memory Consistency in Cache-Coherent Multithreaded Computer Architectures},
  Author                   = {Albert Meixner and Daniel J. Sorin},
  Year                     = {2006},

  Address                  = {Los Alamitos, CA, USA},
  Pages                    = {73-82},
  Publisher                = {IEEE Computer Society},
  Volume                   = {0},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/DSN.2006.29},
  File                     = {:Dynamic Verification of Memory Consistency in Cache-Coherent Multithreaded Computer Architectures.pdf:PDF},
  ISBN                     = {0-7695-2607-1},
  Journal                  = {dsn},
  Timestamp                = {2008.08.08}
}

@InProceedings{Meixner2005,
  Title                    = {Dynamic Verification of Sequential Consistency},
  Author                   = {Meixner, Albert and Sorin, Daniel J.},
  Booktitle                = {Proceedings of the 32nd annual international symposium on Computer Architecture},
  Year                     = {2005},
  Pages                    = {482--493},
  Publisher                = {IEEE Computer Society},

  File                     = {:Dynamic Verification of Sequential Consistency.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26}
}

@InProceedings{Melton1986,
  Title                    = {Galois connections and computer science applications},
  Author                   = {Melton, A. and Schmidt, D. and Strecker, G.},
  Year                     = {1986},
  Pages                    = {299--312},

  Abstract                 = {We have presented an existence theorem and some important properties of Galois connections. We have also shown how data structures problems can be simplified and better understood when Galois insertions are used. In particular, the proof of correctness of an implementation follows simply from the construction of a Galois insertion. We plan further applications of Galois connections theory to computing-related problems.},
  File                     = {:Galois connections and computer science applications.pdf:PDF},
  Journal                  = {Category Theory and Computer Programming},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.14},
  Url                      = {http://dx.doi.org/10.1007/3-540-17162-2_130}
}

@InProceedings{Meyer1972,
  Title                    = {The equivalence problem for regular expressions with squaring requires exponential space},
  Author                   = {Meyer, A. R. and Stockmeyer, L. J.},
  Booktitle                = {Switching and Automata Theory, 1972., IEEE Conference Record of 13th Annual Symposium on DOI - 10.1109/SWAT.1972.29},
  Year                     = {1972},
  Pages                    = {125--129},

  ISSN                     = {0272-4847},
  Owner                    = {lvyi},
  Timestamp                = {2012.02.25}
}

@InProceedings{Meyer1972a,
  Title                    = {The equivalence problem for regular expressions with squaring requires exponential space},
  Author                   = {Meyer, A. R. and Stockmeyer, L. J.},
  Booktitle                = {Proceedings of the 13th Annual Symposium on Switching and Automata Theory (swat 1972)},
  Year                     = {1972},
  Pages                    = {125--129},
  Publisher                = {IEEE Computer Society},

  Doi                      = {10.1109/SWAT.1972.29},
  Owner                    = {lvyi},
  Timestamp                = {2012.02.24}
}

@InProceedings{Michael2009,
  Title                    = {Idempotent work stealing},
  Author                   = {Michael, Maged M. and Vechev, Martin T. and Saraswat, Vijay A.},
  Booktitle                = {Proceedings of the 14th ACM SIGPLAN symposium on Principles and practice of parallel programming},
  Year                     = {2009},

  Address                  = {New York, NY, USA},
  Pages                    = {45--54},
  Publisher                = {ACM},
  Series                   = {PPoPP '09},

  Acmid                    = {1504186},
  Doi                      = {10.1145/1504176.1504186},
  File                     = {:Idempotent Work Stealing.pdf:PDF},
  ISBN                     = {978-1-60558-397-6},
  Keywords                 = {atomic, memory barrier, memory fence, work stealing},
  Location                 = {Raleigh, NC, USA},
  Numpages                 = {10},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.30},
  Url                      = {http://doi.acm.org/10.1145/1504176.1504186}
}

@Article{Mignolet2009,
  Title                    = {Embedded Multiprocessor Systems-on-Chip Programming},
  Author                   = {Mignolet, J.-Y. and Wuyts, R.},
  Journal                  = {Software, IEEE DOI - 10.1109/MS.2009.64},
  Year                     = {2009},
  Number                   = {3},
  Pages                    = {34--41},
  Volume                   = {26},

  Abstract                 = {We have demonstrated the toolflow developed at IMEC for the MPEG-4 encoder on different platforms. In the future, we want to integrate the different tools in the flow even more, because they are mainly used separately today. Furthermore, we are in the process of validating the flow on more applications, particularly in the wireless-communication domain.},
  Booktitle                = {Software, IEEE},
  File                     = {:Embedded Multiprocessor Systems-on-Chip Programming.pdf:PDF},
  ISSN                     = {0740-7459},
  Keywords                 = {system-on-chip, IMEC, MPEG-4 encoder, embedded multiprocessor systems-on-chip programming, toolflow, wireless-communication domain},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.13}
}

@InProceedings{Mony2004,
  Title                    = {Scalable Automated Verification via Expert-System Guided Transformations},
  Author                   = {Mony, Hari and Baumgartner, Jason and Paruthi, Viresh and Kanzelman, Robert and Kuehlmann, Andreas},
  Year                     = {2004},
  Pages                    = {159--173},

  Abstract                 = {Transformation-based verification has been proposed to synergistically leverage various transformations to successively simplify and decompose large problems to ones which may be formally discharged. While powerful, such systems require a fair amount of user sophistication and experimentation to yield greatest benefits â every verification problem is different, hence the most efficient transformation flow differs widely from problem to problem. Finding an efficient proof strategy not only enables exponential reductions in computational resources, it often makes the difference between obtaining a conclusive result or not. In this paper, we propose the use of an expert system to automate this proof strategy development process. We discuss the types of rules used by the expert system, and the type of feedback necessary between the algorithms and expert system, all oriented towards yielding a conclusive result with minimal resources. Experimental results are provided to demonstrate that such a system is able to automatically discover efficient proof strategies, even on large and complex problems with more than 100,000 state elements in their respective cones of influence. These results also demonstrate numerous types of algorithmic synergies that are critical to the automation of such complex proofs.},
  File                     = {:Scalable Automated Verification via Expert-System Guided Transformations.pdf:PDF},
  Journal                  = {Formal Methods in Computer-Aided Design},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.14},
  Url                      = {http://www.springerlink.com/content/dc5j1xbaf1nakvfw}
}

@InProceedings{Mustaque1993,
  Title                    = {The power of processor consistency},
  Author                   = {Mustaque, Ahamad and Rida, A. Bazzi and Ranjit, John and Prince, Kohli and Gil, Neiger},
  Booktitle                = {Proceedings of the fifth annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {1993},

  Address                  = {Velen, Germany},
  Pages                    = {--},
  Publisher                = {ACM},

  Comment                  = {165264 251-260},
  File                     = {:The power of processor consistency.pdf:PDF},
  Owner                    = {lvyi},
  Refid                    = {4},
  Timestamp                = {2008.06.11}
}

@InProceedings{Musuvathi2004,
  Title                    = {Model checking large network protocol implementations},
  Author                   = {Musuvathi, Madanlal and Engler, Dawson R.},
  Booktitle                = {Proceedings of the 1st conference on Symposium on Networked Systems Design and Implementation - Volume 1},
  Year                     = {2004},

  Address                  = {San Francisco, California},
  Pages                    = {12--12},
  Publisher                = {USENIX Association},

  File                     = {:Model checking large network protocol implementations.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.29}
}

@InProceedings{Musuvathi2008,
  Title                    = {Fair stateless model checking},
  Author                   = {Musuvathi, Madanlal and Qadeer, Shaz},
  Booktitle                = {Proceedings of the 2008 ACM SIGPLAN conference on Programming language design and implementation},
  Year                     = {2008},

  Address                  = {Tucson, AZ, USA},
  Pages                    = {362--371},
  Publisher                = {ACM},

  File                     = {:Fair stateless model checking.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.29}
}

@InProceedings{Musuvathi2007,
  Title                    = {Iterative context bounding for systematic testing of multithreaded programs},
  Author                   = {Musuvathi, Madanlal and Qadeer, Shaz},
  Booktitle                = {Proceedings of the 2007 ACM SIGPLAN conference on Programming language design and implementation},
  Year                     = {2007},

  Address                  = {San Diego, California, USA},
  Pages                    = {446--455},
  Publisher                = {ACM},

  File                     = {:Iterative context bounding for systematic testing of multithreaded programs.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.30}
}

@Article{Naeem2010,
  Title                    = {Scalability of relaxed consistency models in NoC based multicore architectures},
  Author                   = {Naeem, Abdul and Chen, Xiaowen and Lu, Zhonghai and Jantsch, Axel},
  Journal                  = {SIGARCH Comput. Archit. News},
  Year                     = {2010},
  Number                   = {5},
  Pages                    = {8--15},
  Volume                   = {37},

  Doi                      = {10.1145/1755235.1755238},
  File                     = {:Scalability of relaxed consistency models in NoC based multicore architectures.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2012.05.16}
}

@Article{Naeem2013,
  Title                    = {Scalability Analysis of Memory Consistency Models in NoC-Based Distributed Shared Memory SoCs},
  Author                   = {Naeem, A. and Jantsch, A. and Zhonghai Lu},
  Journal                  = {Computer-Aided Design of Integrated Circuits and Systems, IEEE Transactions on},
  Year                     = {2013},
  Number                   = {5},
  Pages                    = {760-773},
  Volume                   = {32},

  Doi                      = {10.1109/TCAD.2012.2235914},
  File                     = {:Scalability Analysis of Memory Consistency Models in NoC-Based Distributed Shared Memory SoCs.pdf:PDF},
  ISSN                     = {0278-0070},
  Keywords                 = {distributed shared memory systems;network-on-chip;distributed shared memory SoC;network-on-chip;partial store ordering;protected release consistency;scalability analysis;sequential consistency;six memory consistency models;total store ordering;weak consistency;Distributed shared memory;memory consistency;network-on-chip;performance;scalability},
  Owner                    = {lvyi},
  Timestamp                = {2013.07.21}
}

@InProceedings{Nam2008,
  Title                    = {Automatic symbolic compositional verification by learning assumptions},
  Author                   = {Nam, Wonhong and Madhusudan, P. and Alur, Rajeev},
  Year                     = {2008},
  Month                    = jun,
  Number                   = {3},
  Pages                    = {207--234},
  Volume                   = {32},

  Abstract                 = {Abstract&nbsp;&nbsp;Compositional reasoning aims to improve scalability of verification tools by reducing the original verification task into subproblems. The simplification is typically based on assume-guarantee reasoning principles, and requires user guidance to identify appropriate assumptions for components. In this paper, we propose a fully automated approach to compositional reasoning that consists of automated decomposition using a hypergraph partitioning algorithm for balanced clustering of variables, and discovering assumptions using the L * algorithm for active learning of regular languages. We present a symbolic implementation of the learning algorithm, and incorporate it in the model checker NuSmv. In some cases, our experiments demonstrate significant savings in the computational requirements of symbolic model checking.},
  File                     = {:Automatic symbolic compositional verification by learning assumptions.pdf:PDF},
  Journal                  = {Formal Methods in System Design},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.09},
  Url                      = {http://dx.doi.org/10.1007/s10703-008-0055-8}
}

@InProceedings{Namjoshi2007,
  Title                    = {Symmetry and Completeness in the Analysis of Parameterized Systems},
  Author                   = {Namjoshi, Kedar},
  Year                     = {2007},
  Pages                    = {299--313},

  Abstract                 = {It is shown that the cutoff method—which summarizes a parameterized system by a finite set of its instances—is complete for proving safety properties. This implies completeness of other, less stringent, proof methods for parameterized verification. It is shown that the cutoff method is equivalent to determining a (parameterized) inductive invariant. The second part of the paper describes a new algorithm to construct universally quantified, parameterized inductive invariants. This algorithm is shown to compute the strongest invariant of a given shape, and is complete under certain conditions. A key observation is a previously unnoticed connection between inductiveness, small model theorems, and compositional analysis.},
  File                     = {:Symmetry and Completeness in the Analysis of Parameterized Systems.pdf:PDF},
  Journal                  = {Verification, Model Checking, and Abstract Interpretation},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.13},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-69738-1_22}
}

@InCollection{Namjoshi2012,
  Title                    = {Local Symmetry and Compositional Verification},
  Author                   = {Namjoshi, KedarS. and Trefler, RichardJ.},
  Booktitle                = {Verification, Model Checking, and Abstract Interpretation},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2012},
  Editor                   = {Kuncak, Viktor and Rybalchenko, Andrey},
  Pages                    = {348-362},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7148},

  Doi                      = {10.1007/978-3-642-27940-9_23},
  File                     = {:Local Symmetry and Compositional Verification.pdf:PDF},
  ISBN                     = {978-3-642-27939-3},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-27940-9_23}
}

@InProceedings{Nanshi2009,
  Title                    = {Constraints in one-to-many concretization for abstraction refinement},
  Author                   = {Nanshi, Kuntal and Somenzi, Fabio},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {569--574},
  Publisher                = {ACM},

  File                     = {:Constraints in one-to-many concretization for abstraction refinement.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@InProceedings{Nanshi2008,
  Title                    = {Improved Visibility in One-to-Many Trace Concretization},
  Author                   = {Nanshi, K. and Somenzi, F.},
  Booktitle                = {Design, Automation and Test in Europe, 2008. DATE '08},
  Year                     = {2008},
  Pages                    = {819--824},

  Abstract                 = {We present an improved algorithm for concretization of abstract error traces in abstraction refinement-based invariant checking. The proposed algorithm maps each transition of the abstract error trace to one or more transitions in the concrete model by using a combination of simulation and satisfiability checking. Prior simulation- based approaches were hindered by limited visibility, which often resulted in excessive backtracking or refinements. The proposed technique addresses this issue in three ways: By identifying variables whose addition to the abstract trace significantly improves its predictive power at a low computational cost; by combining SAT checks with pseudo-random simulation in the construction of the concrete trace; and by a more flexible budgeting of simulation vectors that accounts for the progress made in concretization.},
  File                     = {:Improved Visibility in One-to-Many Trace Concretization.pdf:PDF},
  Keywords                 = {computability, program diagnostics, program verification, SAT checks, abstract error traces, abstraction refinement-based invariant checking, one-to-many trace concretization, pseudorandom simulation, satisfiability checking},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@InProceedings{Nanshi2006,
  Title                    = {Guiding simulation with increasingly refined abstract traces},
  Author                   = {Nanshi, Kuntal and Somenzi, Fabio},
  Booktitle                = {Proceedings of the 43rd annual Design Automation Conference},
  Year                     = {2006},

  Address                  = {San Francisco, CA, USA},
  Pages                    = {737--742},
  Publisher                = {ACM},

  File                     = {:Guiding simulation with increasingly refined abstract traces.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@InProceedings{Navarro-Perez2007,
  Title                    = {Encodings of Bounded LTL Model Checking in Effectively Propositional Logic},
  Author                   = {Navarro-Perez, J. A. and Voronkov, A.},
  Year                     = {2007},
  Number                   = {4603},
  Pages                    = {346-361--},

  Comment                  = {Encodings of Bounded LTL Model Checking in Effectively Propositional Logic
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {75},
  Timestamp                = {2008.06.11}
}

@InProceedings{Ng2008,
  Title                    = {Challenges in using system-level models for RTL verification},
  Author                   = {Ng, Kelvin},
  Booktitle                = {Proceedings of the 45th annual Design Automation Conference},
  Year                     = {2008},

  Address                  = {Anaheim, California},
  Pages                    = {812--815},
  Publisher                = {ACM},

  File                     = {:Challenges in using system-level models for RTL verification.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@InProceedings{Niwinski1997,
  Title                    = {Fixed point characterization of infinite behavior of finite-state systems},
  Author                   = {Niwinski, D.},
  Year                     = {1997},
  Number                   = {1/2},
  Pages                    = {1-70--},
  Volume                   = {189},

  Comment                  = {Fixed point characterization of infinite behavior of finite-state systems
203122394
0304-3975},
  Journal                  = {THEORETICAL COMPUTER SCIENCE -AMSTERDAM-},
  Owner                    = {lvyi},
  Refid                    = {58},
  Timestamp                = {2008.06.11}
}

@InProceedings{OLeary2009,
  Title                    = {Model Checking Transactional Memory with Spin},
  Author                   = {O'Leary, John},
  Booktitle                = {Distributed Computing Systems, International Conference on},
  Year                     = {2009},
  Editor                   = {Saha, Bratin and Tuttle, Mark R.},
  Month                    = jun,
  Pages                    = {335--342},
  Volume                   = {0},

  File                     = {:Model checking transactional memory with spin.pdf:PDF},
  ISSN                     = {1063-6927},
  Keywords                 = {Transactional memory, model checking, Spin},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.08},
  Url                      = {http://doi.ieeecomputersociety.org/10.1109/ICDCS.2009.72}
}

@InProceedings{OLeary2009a,
  Title                    = {Protocol verification using flows: An industrial experience},
  Author                   = {O'Leary, J. and Talupur, M. and Tuttle, M.R.},
  Booktitle                = {Formal Methods in Computer-Aided Design, 2009. FMCAD 2009},
  Year                     = {2009},
  Pages                    = {172--179},

  Abstract                 = {We prove the parameterized correctness of one of the largest cache coherence protocols being used in modern multi-core processors today. Our approach is a generalization of a method we described last year that uses data type reduction and compositional reasoning to iteratively abstract and refine the protocol and uses invariants derived from protocol Â¿flowsÂ¿ to make the abstraction-refinement loop converge. Our prior work demonstrated the value of sequencing information that appeared within the linear flows describing a protocol in design documents. This paper extends the notion of flows to capture intricate scenarios seen in real industrial protocols and demonstrates that there is also valuable information in the interaction among flows. We further show that judicious use of flows is required to make the method converge and identify which flows are most suitable.},
  File                     = {:Protocol verification using flows- An inductrial experience.pdf:PDF},
  Keywords                 = {data reduction, protocols, cache coherence protocol, compositional reasoning, data type reduction, flows interaction, industrial protocol, parameterized correctness, protocol flows, protocol verification, sequencing information value},
  Owner                    = {lvyi},
  Timestamp                = {2010.02.25}
}

@Article{Ousterhout2011,
  Title                    = {The Case for RAMCloud},
  Author                   = {Ousterhout, John and Agrawal, Parag and Erickson, David and Kozyrakis, Christos and Leverich, Jacob and Mazi\`{e}res, David and Mitra, Subhasish and Narayanan, Aravind and Ongaro, Diego and Parulkar, Guru and Rosenblum, Mendel and Rumble, Stephen M. and Stratmann, Eric and Stutsman, Ryan},
  Journal                  = {Commun. ACM},
  Year                     = {2011},

  Month                    = jul,
  Number                   = {7},
  Pages                    = {121--130},
  Volume                   = {54},

  __markedentry            = {[lvyi:6]},
  Acmid                    = {1965751},
  Address                  = {New York, NY, USA},
  Doi                      = {10.1145/1965724.1965751},
  ISSN                     = {0001-0782},
  Issue_date               = {July 2011},
  Numpages                 = {10},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2014.10.16},
  Url                      = {http://doi.acm.org/10.1145/1965724.1965751}
}

@InCollection{Owens2009,
  Title                    = {A Better x86 Memory Model: x86-TSO},
  Author                   = {Owens, Scott and Sarkar, Susmit and Sewell, Peter},
  Booktitle                = {Theorem Proving in Higher Order Logics},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2009},
  Editor                   = {Berghofer, Stefan and Nipkow, Tobias and Urban, Christian and Wenzel, Makarius},
  Pages                    = {391-407},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {5674},

  Doi                      = {10.1007/978-3-642-03359-9_27},
  File                     = {:A Better x86 Memory Model- x86-TSO.pdf:PDF},
  ISBN                     = {978-3-642-03358-2},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-03359-9_27}
}

@InProceedings{Owicki1976,
  Title                    = {Verifying properties of parallel programs: an axiomatic approach},
  Author                   = {Owicki, Susan and Gries, David},
  Year                     = {1976},
  Number                   = {5},
  Pages                    = {279--285},
  Publisher                = {ACM New York, NY, USA},
  Volume                   = {19},

  File                     = {:Verifying properties of parallel programs- an axiomatic approach.pdf:PDF},
  Journal                  = {Communications of the ACM},
  Timestamp                = {2009.02.19}
}

@InProceedings{Pacheco2007,
  Title                    = {Feedback-Directed Random Test Generation},
  Author                   = {Pacheco, Carlos and Lahiri, Shuvendu K. and Ernst, Michael D. and Ball, Thomas},
  Booktitle                = {Proceedings of the 29th international conference on Software Engineering},
  Year                     = {2007},
  Pages                    = {75--84},
  Publisher                = {IEEE Computer Society},

  File                     = {:Feedback-directed Random Test Generation.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.10}
}

@InProceedings{Pan2009,
  Title                    = {Environment Abstraction with State Clustering and Parameter Truncating},
  Author                   = {Pan, Hong and Lv, Yi and Lin, Huimin},
  Booktitle                = {Theoretical Aspects of Software Engineering, 2009. TASE 2009. Third IEEE International Symposium on DOI - 10.1109/TASE.2009.16},
  Year                     = {2009},
  Pages                    = {73--80},

  Abstract                 = {Environment abstraction enriches predicate abstraction by idea from counter abstraction to develop a framework for verification of parameterized systems. However, despite various effects, the constructed abstractions still go beyond the capability of the usual model checkers for many realistic systems. In this paper, a new technique, called state clustering, is proposed to group local states into a small number of clusters, by purely syntactic analysis. The size of array variables in the resulting abstractions are further reduced using parameter abstraction technique. By combining different abstraction techniques, real-life cache coherence protocols such as FLASH have been successfully verified.},
  File                     = {:Environment Abstraction with State Clustering and Parameter Truncating.pdf:PDF},
  Keywords                 = {abstract data types, pattern clustering, reachability analysis, counter abstraction, environment abstraction, parameter truncating, parameterized system verification, predicate abstraction, real life cache coherence protocol, realistic system, state clustering, syntactic analysis},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.12}
}

@InCollection{Pandav2005,
  Title                    = {Counterexample Guided Invariant Discovery for Parameterized Cache Coherence Verification},
  Author                   = {Pandav, Sudhindra and Slind, Konrad and Gopalakrishnan, Ganesh},
  Booktitle                = {Correct Hardware Design and Verification Methods},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2005},
  Editor                   = {Borrione, Dominique and Paul, Wolfgang},
  Pages                    = {317-331},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {3725},

  Doi                      = {10.1007/11560548_24},
  File                     = {:Counterexample Guided Invariant Discovery for Parameterized Cache Coherence Verification.pdf:PDF},
  ISBN                     = {978-3-540-29105-3},
  Owner                    = {lvyi},
  Timestamp                = {2013.05.30},
  Url                      = {http://dx.doi.org/10.1007/11560548_24}
}

@InProceedings{Papadimitriou1979,
  Title                    = {The serializability of concurrent database updates},
  Author                   = {Papadimitriou, Christos H.},
  Year                     = {1979},
  Number                   = {4},
  Pages                    = {631--653},
  Publisher                = {ACM},
  Volume                   = {26},

  File                     = {:The serializability of concurrent database updates.pdf:PDF},
  Journal                  = {J. ACM},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Papamarcos1984,
  Title                    = {A low-overhead coherence solution for multiprocessors with private cache memories},
  Author                   = {Papamarcos, Mark S. and Patel, Janak H.},
  Booktitle                = {Proceedings of the 11th annual international symposium on Computer architecture},
  Year                     = {1984},
  Pages                    = {348--354},
  Publisher                = {ACM},

  Doi                      = {10.1145/800015.808204},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@InProceedings{Park2000,
  Title                    = {Automatic checking of aggregation abstractions through state enumeration},
  Author                   = {Park, S. and Das, S. and Dill, D.L.},
  Year                     = {2000},
  Number                   = {10},
  Pages                    = {1202--1210},
  Publisher                = {IEEE INSTITUTE OF ELECTRICAL AND ELECTRONICS},
  Volume                   = {19},

  File                     = {:Automatic checking of aggregation abstractions through state enumeration.pdf:PDF},
  Journal                  = {IEEE Transactions on Computer Aided Design of Integrated Circuits and Systems},
  Timestamp                = {2009.03.10}
}

@InProceedings{Park1996,
  Title                    = {Protocol verification by aggregation of distributed transactions},
  Author                   = {Park, Seungjoon and Dill, David},
  Year                     = {1996},
  Pages                    = {300--310},

  Abstract                 = {We present a new approach for using a theorem-prover to verify the correctness of protocols and distributed algorithms. The method compares a state graph of the implementation with a specification which is a state graph representing the desired abstract behavior. The steps in the specification correspond to atomic transactions, which are not atomic in the implementation.},
  File                     = {:Protocol verification by aggregation of distributed transactions.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.10},
  Url                      = {http://dx.doi.org/10.1007/3-540-61474-5_78}
}

@InProceedings{Park1998,
  Title                    = {Verification of Cache Coherence Protocols by Aggregation of Distributed Transactions},
  Author                   = {Park, S. and Dill, D. L.},
  Year                     = {1998},
  Month                    = dec,
  Number                   = {4},
  Pages                    = {355--376},
  Volume                   = {31},

  Abstract                 = {Abstract. &nbsp;&nbsp; This paper presents a method to verify the correctness of protocols and distributed algorithms. The method compares a state graph of the implementation with a specification which is a state graph representing the desired abstract behavior. The steps in the specification correspond to atomic transactions, which are not atomic in the implementation.},
  File                     = {:Verification of Cache Coherence Protocols by Aggregation of Distributed Transactions.pdf:PDF},
  Journal                  = {Theory of Computing Systems},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.10},
  Url                      = {http://dx.doi.org/10.1007/s002240000093}
}

@InProceedings{Park1996a,
  Title                    = {Verification of FLASH cache coherence protocol by aggregation of distributed transactions},
  Author                   = {Park, Seungjoon and Dill, David L.},
  Booktitle                = {Proceedings of the eighth annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {1996},

  Address                  = {Padua, Italy},
  Pages                    = {288--296},
  Publisher                = {ACM},

  File                     = {:Verification of FLASH cache coherence protocol by aggregation of distributed transactions.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.10}
}

@InProceedings{Park1995,
  Title                    = {An executable specification, analyzer and verifier for RMO (relaxed memory order)},
  Author                   = {Park, Seungjoon and Dill, David L.},
  Booktitle                = {Proceedings of the seventh annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {1995},

  Address                  = {Santa Barbara, California, United States},
  Pages                    = {34--41},
  Publisher                = {ACM},

  File                     = {:An executable specification, analyzer and verifier for RMO.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Pasareanu2008,
  Title                    = {Learning to divide and conquer: applying the L* algorithm to automate assume-guarantee reasoning},
  Author                   = {Păsăreanu, Corina and Giannakopoulou, Dimitra and Bobaru, Mihaela and Cobleigh, Jamieson and Barringer, Howard},
  Year                     = {2008},
  Month                    = jun,
  Number                   = {3},
  Pages                    = {175--205},
  Volume                   = {32},

  Abstract                 = {Abstract&nbsp;&nbsp;Assume-guarantee reasoning enables a “divide-and-conquer” approach to the verification of large systems that checks system components separately while using assumptions about each component’s environment. Developing appropriate assumptions used to be a difficult and manual process. Over the past five years, we have developed a framework for performing assume-guarantee verification of systems in an incremental and fully automated fashion. The framework uses an off-the-shelf learning algorithm to compute the assumptions. The assumptions are initially approximate and become more precise by means of counterexamples obtained by model checking components separately. The framework supports different assume-guarantee rules, both symmetric and asymmetric. Moreover, we have recently introduced alphabet refinement, which extends the assumption learning process to also infer assumption alphabets. This refinement technique starts with assumption alphabets that are a subset of the minimal interface between a component and its environment, and adds actions to it as necessary until a given property is shown to hold or to be violated in the system. We have applied the learning framework to a number of case studies that show that compositional verification by learning assumptions can be significantly more scalable than non-compositional verification.},
  File                     = {:Learning to divide and conquer- applying the L algorithm to automate assume-guarantee reasoning.pdf:PDF},
  Journal                  = {Formal Methods in System Design},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.09},
  Url                      = {http://dx.doi.org/10.1007/s10703-008-0049-6}
}

@Article{Pasareanu2009,
  Title                    = {A survey of new trends in symbolic execution for software testing and analysis},
  Author                   = {Păsăreanu, Corina and Visser, Willem},
  Journal                  = {International Journal on Software Tools for Technology Transfer (STTT)},
  Year                     = {2009},
  Note                     = {10.1007/s10009-009-0118-1},
  Pages                    = {339-353},
  Volume                   = {11},

  Abstract                 = {Symbolic execution is a well-known program analysis technique which represents program inputs with symbolic values instead of concrete, initialized, data and executes the program by manipulating program expressions involving the symbolic values. Symbolic execution has been proposed over three decades ago but recently it has found renewed interest in the research community, due in part to the progress in decision procedures, availability of powerful computers and new algorithmic developments. We provide here a survey of some of the new research trends in symbolic execution, with particular emphasis on applications to test generation and program analysis. We first describe an approach that handles complex programming constructs such as input recursive data structures, arrays, as well as multithreading. Furthermore, we describe recent hybrid techniques that combine concrete and symbolic execution to overcome some of the inherent limitations of symbolic execution, such as handling native code or availability of decision procedures for the application domain. We follow with a discussion of techniques that can be used to limit the (possibly infinite) number of symbolic configurations that need to be analyzed for the symbolic execution of looping programs. Finally, we give a short survey of interesting new applications, such as predictive testing, invariant inference, program repair, analysis of parallel numerical programs and differential symbolic execution.},
  Affiliation              = {Carnegie Mellon University NASA Ames Research Center Moffett Field CA 94035 USA},
  File                     = {:A survey of new trends in symbolic execution for software testing and analysis.pdf:PDF},
  ISSN                     = {1433-2779},
  Issue                    = {4},
  Keyword                  = {Computer Science},
  Publisher                = {Springer Berlin / Heidelberg},
  Timestamp                = {2011.05.25},
  Url                      = {http://dx.doi.org/10.1007/s10009-009-0118-1}
}

@InProceedings{Paul2003,
  Title                    = {From simulink to SCADE/lustre to TTA: a layered approach for distributed embedded applications},
  Author                   = {Paul, Caspi and Adrian, Curic and Aude, Maignan and Christos, Sofronis and Stavros, Tripakis and Peter, Niebert},
  Year                     = {2003},
  Number                   = {7},
  Pages                    = {153-162--},
  Volume                   = {38},

  Comment                  = {From simulink to SCADE/lustre to TTA: a layered approach for distributed embedded applications
780754},
  ISSN                     = {0362-1340},
  Journal                  = {SIGPLAN Not.},
  Owner                    = {lvyi},
  Refid                    = {65},
  Timestamp                = {2008.06.11}
}

@InProceedings{Paula2006,
  Title                    = {EverLost: A Flexible Platform for Industrial-Strength Abstraction-Guided Simulation},
  Author                   = {de Paula, Flavio and Hu, Alan},
  Year                     = {2006},
  Pages                    = {282--285},

  Abstract                 = {Abstraction-guided simulation is a general framework for automatically harnessing, during simulation, information from abstraction and model checking. EverLost is our platform for industrial-strength abstraction-guided simulation. EverLost takes an RTL Verilog design and preimage/abstraction information from any BDD-based abstraction/model-checking tool, and automatically generates code that implements abstraction-guided simulation and directly compiles with the design under the widely-used Synopsys VCS simulator. The platform enables flexible exploration of abstraction-guided simulation — different formal tools and guidance heuristics are easily inserted — while providing the capacity, speed, and Verilog compatibility of a leading industry-standard tool.},
  File                     = {:EverLost- A Flexible Platform for Industrial-Strength Abstraction-Guided Simulation.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.13},
  Url                      = {http://dx.doi.org/10.1007/11817963_27}
}

@InProceedings{Paula2007,
  Title                    = {An effective guidance strategy for abstraction-guided simulation},
  Author                   = {Paula, Flavio M. De and Hu, Alan J.},
  Booktitle                = {Proceedings of the 44th annual conference on Design automation},
  Year                     = {2007},

  Address                  = {San Diego, California},
  Pages                    = {63--68},
  Publisher                = {ACM},

  File                     = {:An Effective Guidance Strategy for Abstraction-Guided Simulation.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Perfumo2008,
  Title                    = {The limits of software transactional memory (STM): dissecting Haskell STM applications on a many-core environment},
  Author                   = {Perfumo, Cristian and S\&\#246;nmez, Nehir and Stipic, Srdjan and Unsal, Osman and Cristal, Adri\&\#225;n and Harris, Tim and Valero, Mateo},
  Booktitle                = {Proceedings of the 5th conference on Computing frontiers},
  Year                     = {2008},

  Address                  = {Ischia, Italy},
  Pages                    = {67--78},
  Publisher                = {ACM},

  File                     = {:The limits of software transactional memory (STM)- dissecting Haskell STM applications on a many-core environment.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.03}
}

@InProceedings{Plakal1998,
  Title                    = {Lamport clocks: verifying a directory cache-coherence protocol},
  Author                   = {Plakal, Manoj and Sorin, Daniel J. and Condon, Anne E. and Hill, Mark D.},
  Booktitle                = {Proceedings of the tenth annual ACM symposium on Parallel algorithms and architectures},
  Year                     = {1998},

  Address                  = {Puerto Vallarta, Mexico},
  Pages                    = {67--76},
  Publisher                = {ACM},

  File                     = {:Lamport clocks- verifying a directory cache-coherence protocol.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.30}
}

@InProceedings{Pnueli2001,
  Title                    = {Automatic Deductive Verification with Invisible Invariants},
  Author                   = {Amir Pnueli and Sitvanit Ruah and Lenore D. Zuck},
  Booktitle                = {TACAS 2001: Proceedings of the 7th International Conference on Tools and Algorithms for the Construction and Analysis of Systems},
  Year                     = {2001},

  Address                  = {London, UK},
  Pages                    = {82--97},
  Publisher                = {Springer-Verlag},

  File                     = {:Automatic Deductive Verification with Invisible Invariants.pdf:PDF},
  ISBN                     = {3-540-41865-2},
  Timestamp                = {2008.08.08}
}

@InProceedings{Pnueli2002,
  Title                    = {Liveness with (0,1, infinity)- Counter Abstraction},
  Author                   = {Pnueli, Amir and Xu, Jessie and Zuck, Lenore},
  Year                     = {2002},
  Pages                    = {93--111},

  Abstract                 = {We introduce the (0, 1, infinity) -counter abstraction method by which a parameterized system of unbounded size is abstracted into a finite-state system. Assuming that each process in the parameterized system is finite-state, the abstract variables are limited counters which count, for each local states of a process, the number of processes which currently are in local state s. The counters are saturated at 2, which means that Îº(s) = 2 whenever 2 or more processes are at state s. The emphasis of the paper is on the derivation of an adequate and sound set of fairness requirements (both weak and strong) that enable proofs of liveness properties of the abstract system, from which we can safely conclude a corresponding liveness property of the original parameterized system. We illustrate the method on few parameterized systems, including Szymanskiâs Algorithm for mutual exclusion. The method is also extended to deal with parameterized systems whose processes may have infinitely many local states, such as the Bakery Algorithm, by choosing few âinterestingâ state assertions and (0, 1, â)-counting the number of processes satisfying them.},
  File                     = {:Liveness with (0,1, infinity)- Counter Abstraction.pdf:PDF},
  Journal                  = {Computer Aided Verification},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.08},
  Url                      = {http://dx.doi.org/10.1007/3-540-45657-0_9}
}

@InProceedings{Podelski2007,
  Title                    = {Transition predicate abstraction and fair termination},
  Author                   = {Podelski, Andreas and Rybalchenko, Andrey},
  Year                     = {2007},
  Number                   = {3},
  Pages                    = {15},
  Publisher                = {ACM},
  Volume                   = {29},

  File                     = {:Transition predicate abstraction and fair termination.pdf:PDF},
  Journal                  = {ACM Trans. Program. Lang. Syst.},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.26}
}

@InProceedings{Podelski2004,
  Title                    = {A Complete Method for the Synthesis of Linear Ranking Functions},
  Author                   = {Podelski, Andreas and Rybalchenko, Andrey},
  Year                     = {2004},
  Pages                    = {465--486},

  Abstract                 = {We present an automated method for proving the termination of an unnested program loop by synthesizing linear ranking functions. The method is complete. Namely, if a linear ranking function exists then it will be discovered by our method. The method relies on the fact that we can obtain the linear ranking functions of the program loop as the solutions of a system of linear inequalities that we derive from the program loop. The method is used as a subroutine in a method for proving termination and other liveness properties of more general programs via transition invariants; see [PR03].},
  File                     = {:A Complete Method for the Synthesis of Linear Ranking Functions.pdf:PDF},
  Journal                  = {Verification, Model Checking, and Abstract Interpretation},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.06},
  Url                      = {http://www.springerlink.com/content/0fc8ewqwcexp3yh9}
}

@InProceedings{Podelski2004a,
  Title                    = {Transition invariants},
  Author                   = {Podelski, A. and Rybalchenko, A.},
  Booktitle                = {Logic in Computer Science, 2004. Proceedings of the 19th Annual IEEE Symposium on},
  Year                     = {2004},
  Pages                    = {32--41},

  Abstract                 = {Proof rules for program verification rely on auxiliary assertions. We propose a (sound and relatively complete) proof rule whose auxiliary assertions are transition invariants. A transition invariant of a program is a binary relation over program states that contains the transitive closure of the transition relation of the program. A relation is disjunctively well-founded if it is a finite union of well-founded relations. We characterize the validity of termination or another liveness property by the existence of a disjunctively well-founded transition invariant. The main contribution of our proof rule lies in its potential for automation via abstract interpretation.},
  File                     = {:Transition invariants.pdf:PDF},
  ISSN                     = {1043-6871},
  Keywords                 = {program verification, theorem proving, abstract interpretation, auxiliary assertions, program states, program verification, proof rules, transition invariants, transition program relation, transitive closure},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.26}
}

@InProceedings{Pong1998,
  Title                    = {Formal verification of complex coherence protocols using symbolic state models},
  Author                   = {Fong Pong and Michel Dubois},
  Year                     = {1998},

  Address                  = {New York, NY, USA},
  Number                   = {4},
  Pages                    = {557--587},
  Publisher                = {ACM},
  Volume                   = {45},

  Doi                      = {http://doi.acm.org/10.1145/285055.285057},
  ISSN                     = {0004-5411},
  Journal                  = {J. ACM},
  Timestamp                = {2008.08.08}
}

@InProceedings{Prasad2005,
  Title                    = {A survey of recent advances in SAT-based formal verification},
  Author                   = {Prasad, M. R. and Biere, A. and Gupta, A.},
  Year                     = {2005},
  Number                   = {2},
  Pages                    = {156-173--},
  Volume                   = {7},

  Comment                  = {A survey of recent advances in SAT-based formal verification
205518126
1433-2779},
  Journal                  = {INTERNATIONAL JOURNAL ON SOFTWARE TOOLS FOR TECHNOLOGY TRANSFER},
  Owner                    = {lvyi},
  Refid                    = {86},
  Timestamp                = {2008.06.11}
}

@InProceedings{Praun2006,
  Title                    = {Conditional Memory Ordering},
  Author                   = {von Praun, Christoph and Cain, Harold W. and Choi, Jong-Deok and Ryu, Kyung Dong},
  Booktitle                = {Proceedings of the 33rd annual international symposium on Computer Architecture},
  Year                     = {2006},
  Pages                    = {41--52},
  Publisher                = {IEEE Computer Society},

  File                     = {:Conditional Memory Ordering.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.26}
}

@InProceedings{Prosenjit2002,
  Title                    = {A Specification and Verification Framework for Developing Weak Shared Memory Consistency Protocols},
  Author                   = {Prosenjit, Chatterjee and Ganesh, Gopalakrishnan},
  Booktitle                = {Proceedings of the 4th International Conference on Formal Methods in Computer-Aided Design},
  Year                     = {2002},
  Pages                    = {292--309},
  Publisher                = {Springer-Verlag},

  Comment                  = {683253 292-309},
  Owner                    = {lvyi},
  Refid                    = {11},
  Timestamp                = {2008.06.11}
}

@InProceedings{Qadeer2003,
  Title                    = {Verifying Sequential Consistency on Shared-Memory Multiprocessors by Model Checking},
  Author                   = {Shaz Qadeer},
  Year                     = {2003},

  Address                  = {Los Alamitos, CA, USA},
  Number                   = {8},
  Pages                    = {730-741},
  Publisher                = {IEEE Computer Society},
  Volume                   = {14},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/TPDS.2003.1225053},
  File                     = {:Verifying Sequential Consistency on Shared-Memory Multiprocessors by Model Checking.pdf:PDF},
  ISSN                     = {1045-9219},
  Journal                  = {IEEE Transactions on Parallel and Distributed Systems},
  Timestamp                = {2008.08.08}
}

@PhdThesis{Qadeer1999,
  Title                    = {Algorithms and methodology for scalable model checking},
  Author                   = {Qadeer, S.},
  School                   = {UNIVERSITY of CALIFORNIA at BERKELEY},
  Year                     = {1999},

  File                     = {:Algorithms and Methodology for Scalable Model Checking.pdf:PDF},
  Timestamp                = {2008.08.08}
}

@InProceedings{Qu2008,
  Title                    = {Efficient Verification of Parameterized Cache Coherence Protocols},
  Author                   = {Qu, WanXia and Guo, Yang and Pang, ZhengBin and Yang, XiaoDong},
  Booktitle                = {Young Computer Scientists, 2008. ICYCS 2008. The 9th International Conference for},
  Year                     = {2008},
  Pages                    = {154--159},

  File                     = {:Efficient Verification of Parameterized Cache Coherence Protocols.pdf:PDF},
  Keywords                 = {cache storage, formal verification, parallel programming, protocols, cache-coherent nonuniform memory architecture system, large scale cache protocol verification, memory block, model checking, parallel programs, parameterized cache coherence protocols, parameterized directory based cache protocol, parameterized directory-based cache protocol, protocol model optimization, pseudo-cutoff, state space optimisation},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@InProceedings{Rabin1968,
  Title                    = {Decidability of second-order theories and automata on infinite trees},
  Author                   = {Rabin, Michael O.},
  Year                     = {1968},
  Pages                    = {1025-1029--},
  Volume                   = {74},

  Comment                  = {Decidability of second-order theories and automata on infinite trees},
  Journal                  = {Bulletin of the American Mathematical Society},
  Owner                    = {lvyi},
  Refid                    = {59},
  Timestamp                = {2008.06.11}
}

@InProceedings{Ranjan2009,
  Title                    = {Beyond verification: leveraging formal for debugging},
  Author                   = {Ranjan, Rajeev K. and Coelho, Claudionor and Skalberg, Sebastian},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {648--651},
  Publisher                = {ACM},

  File                     = {:Beyond verification- leveraging formal for debugging.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@Article{Reinders2012,
  Title                    = {Transactional Synchronization in Haswell},
  Author                   = {James Reinders},
  Journal                  = {http://software.intel.com/en-us/blogs/2012/02/07/transactional-synchronization-in-haswell/},
  Year                     = {2012},

  Owner                    = {lvyi},
  Timestamp                = {2012.10.07}
}

@Article{Robert2004,
  Title                    = {A unified theory of shared memory consistency},
  Author                   = {Robert, C. Steinke and Gary, J. Nutt},
  Journal                  = {J. ACM},
  Year                     = {2004},
  Number                   = {5},
  Pages                    = {800-849},
  Volume                   = {51},

  Comment                  = {A unified theory of shared memory consistency
1017464},
  File                     = {:A unified theory of shared memory consistency.pdf:PDF},
  ISSN                     = {0004-5411},
  Owner                    = {lvyi},
  Refid                    = {5},
  Timestamp                = {2008.06.11}
}

@InProceedings{Romanescu2010,
  Title                    = {Specifying and dynamically verifying address translation-aware memory consistency},
  Author                   = {Romanescu, Bogdan F. and Lebeck, Alvin R. and Sorin, Daniel J.},
  Booktitle                = {Proceedings of the fifteenth edition of ASPLOS on Architectural support for programming languages and operating systems},
  Year                     = {2010},

  Address                  = {Pittsburgh, Pennsylvania, USA},
  Pages                    = {323--334},
  Publisher                = {ACM},

  Doi                      = {10.1145/1736020.1736057},
  File                     = {:Specifying and dynamically verifying address translation-aware memory consistency.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.03}
}

@InProceedings{Roscoe2006a,
  Title                    = {Verifying Statemate Statecharts Using CSP and FDR
},
  Author                   = {Roscoe, A. and Wu, Z.},
  Booktitle                = {Formal Methods and Software Engineering},
  Year                     = {2006},
  Pages                    = {324-341},

  Abstract                 = {We propose a framework for the verification of statecharts. We use the CSP/FDR framework to model complex systems designed in statecharts, and check for system consistency or verify special properties within the specification. We have developed an automated translation from statecharts into CSP and exploited it in both theoretical and practical senses.},
  Owner                    = {lvyi},
  Refid                    = {30},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1007/11901433_18}
}

@Conference{Ross2006,
  Title                    = {PVFS: a parallel file system},
  Author                   = {Ross, R. and Latham, R.},
  Booktitle                = {Proceedings of the 2006 ACM/IEEE conference on Supercomputing},
  Year                     = {2006},
  Organization             = {ACM New York, NY, USA},

  Timestamp                = {2008.08.08}
}

@InProceedings{Rossi2005,
  Title                    = {Can we really do without the support of formal methods in the verification of large designs?},
  Author                   = {Rossi, Umberto},
  Booktitle                = {Proceedings of the 42nd annual conference on Design automation},
  Year                     = {2005},

  Address                  = {Anaheim, California, USA},
  Pages                    = {672--673},
  Publisher                = {ACM},

  File                     = {:Can We Really Do Without the Support of Formal Methods in the Verification of Large Designs.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@Article{Roy2012,
  Title                    = {Weak atomicity for the x86 memory consistency model },
  Author                   = {Amitabha Roy and Steven Hand and Tim Harris},
  Journal                  = {Journal of Parallel and Distributed Computing },
  Year                     = {2012},
  Number                   = {10},
  Pages                    = {1306 - 1317},
  Volume                   = {72},

  Doi                      = {http://dx.doi.org/10.1016/j.jpdc.2012.06.001},
  File                     = {:Weak atomicity for the x86 memory consistency model.pdf:PDF},
  ISSN                     = {0743-7315},
  Keywords                 = {Software transactional memory},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.20},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S0743731512001402}
}

@InCollection{Roy2006,
  Title                    = {Fast and Generalized Polynomial Time Memory Consistency Verification},
  Author                   = {Roy, Amitabha and Zeisset, Stephan and Fleckenstein, CharlesJ. and Huang, JohnC.},
  Booktitle                = {Computer Aided Verification},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2006},
  Editor                   = {Ball, Thomas and Jones, RobertB.},
  Pages                    = {503-516},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {4144},

  Doi                      = {10.1007/11817963_46},
  File                     = {:Fast and Generalized Polynomial Time Memory Consistency Verification.pdf:PDF},
  ISBN                     = {978-3-540-37406-0},
  Owner                    = {lvyi},
  Timestamp                = {2014.02.09},
  Url                      = {http://dx.doi.org/10.1007/11817963_46}
}

@InProceedings{Sarkar2009,
  Title                    = {The semantics of x86-CC multiprocessor machine code},
  Author                   = {Sarkar, Susmit and Sewell, Peter and Nardelli, Francesco Zappa and Owens, Scott and Ridge, Tom and Braibant, Thomas and Myreen, Magnus O. and Alglave, Jade},
  Booktitle                = {Proceedings of the 36th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  Year                     = {2009},

  Address                  = {New York, NY, USA},
  Pages                    = {379--391},
  Publisher                = {ACM},
  Series                   = {POPL '09},

  Acmid                    = {1480929},
  Doi                      = {10.1145/1480881.1480929},
  File                     = {:The Semantics of x86-CC Multiprocessor Machine Code.pdf:PDF},
  ISBN                     = {978-1-60558-379-2},
  Keywords                 = {relaxed memory models, semantics},
  Location                 = {Savannah, GA, USA},
  Numpages                 = {13},
  Owner                    = {lvyi},
  Timestamp                = {2013.08.29},
  Url                      = {http://doi.acm.org/10.1145/1480881.1480929}
}

@InProceedings{Scheurich1987,
  Title                    = {Correct memory operation of cache-based multiprocessors},
  Author                   = {Scheurich, C. and Dubois, M.},
  Booktitle                = {Proceedings of the 14th annual international symposium on Computer architecture},
  Year                     = {1987},

  Address                  = {Pittsburgh, Pennsylvania, United States},
  Pages                    = {234--243},
  Publisher                = {ACM},

  File                     = {:Correct memory operation of cache-based multiprocessors.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Seger2005,
  Title                    = {An Industrially Effective Environment for Formal Hardware Verification},
  Author                   = {Seger, C. J. H. and Jones, R. B. and O Leary, J. W. and Melham, T. and Aagaard, M. D. and Barrett, C. and Syme, D.},
  Year                     = {2005},
  Number                   = {9},
  Pages                    = {1381-1405--},
  Volume                   = {24},

  Comment                  = {An Industrially Effective Environment for Formal Hardware Verification
210481781
0278-0070},
  Journal                  = {IEEE TRANSACTIONS ON COMPUTER AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS},
  Owner                    = {lvyi},
  Refid                    = {29},
  Timestamp                = {2008.06.11}
}

@InProceedings{Seidl1996,
  Title                    = {Fast and simple nested fixpoints},
  Author                   = {Seidl, Helmut},
  Year                     = {1996},
  Number                   = {6},
  Pages                    = {303-308--},
  Volume                   = {59},

  Abstract                 = {We give an alternative proof of the result of Long et al. (1994) that nested fixpoint expressions e of alternation depth d > 1 can be evaluated over a complete lattice of height h in time O(d [middle dot] (h [middle dot] |e|/(d - 1))[upper left corner]d/2[upper right corner]+1). The advantage of our proof is that it is both extremely short and extremely simple.},
  Comment                  = {Fast and simple nested fixpoints},
  Journal                  = {Information Processing Letters},
  Keywords                 = {Evaluation of fixpoint expressions Hierarchical systems of equations Model-checking},
  Owner                    = {lvyi},
  Refid                    = {60},
  Timestamp                = {2008.06.11},
  Url                      = {http://www.sciencedirect.com/science/article/B6V0F-3VVCMBD-T/2/6e435d8cf5c5441d551e140eeb1ee0d6}
}

@Article{Seidl1990,
  Title                    = {Deciding equivalence of finite tree automata},
  Author                   = {Seidl, Helmut},
  Journal                  = {SIAM J. Comput.},
  Year                     = {1990},
  Number                   = {3},
  Pages                    = {424--437},
  Volume                   = {19},

  Doi                      = {10.1137/0219027},
  Owner                    = {lvyi},
  Publisher                = {Society for Industrial and Applied Mathematics},
  Timestamp                = {2012.02.25}
}

@InProceedings{Seiler2008,
  Title                    = {Larrabee: a many-core x86 architecture for visual computing},
  Author                   = {Seiler, Larry and Carmean, Doug and Sprangle, Eric and Forsyth, Tom and Abrash, Michael and Dubey, Pradeep and Junkins, Stephen and Lake, Adam and Sugerman, Jeremy and Cavin, Robert and Espasa, Roger and Grochowski, Ed and Juan, Toni and Hanrahan, Pat},
  Booktitle                = {ACM SIGGRAPH 2008 papers},
  Year                     = {2008},

  Address                  = {Los Angeles, California},
  Pages                    = {1--15},
  Publisher                = {ACM},

  File                     = {:Larrabee- a many-core x86 architecture for visual computing.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.03}
}

@InCollection{Sethi2012,
  Title                    = {Parameterized Model Checking of Fine Grained Concurrency},
  Author                   = {Sethi, Divjyot and Talupur, Muralidhar and Schwartz-Narbonne, Daniel and Malik, Sharad},
  Booktitle                = {Model Checking Software},
  Publisher                = {Springer Berlin Heidelberg},
  Year                     = {2012},
  Editor                   = {Donaldson, Alastair and Parker, David},
  Pages                    = {208-226},
  Series                   = {Lecture Notes in Computer Science},
  Volume                   = {7385},

  Doi                      = {10.1007/978-3-642-31759-0_15},
  File                     = {:Parameterized Model Checking of Fine Grained Concurrency.pdf:PDF},
  ISBN                     = {978-3-642-31758-3},
  Owner                    = {lvyi},
  Timestamp                = {2013.05.09},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-31759-0_15}
}

@Article{Sewell2010,
  Title                    = {x86-TSO: a rigorous and usable programmer's model for x86 multiprocessors},
  Author                   = {Sewell, Peter and Sarkar, Susmit and Owens, Scott and Nardelli, Francesco Zappa and Myreen, Magnus O.},
  Journal                  = {Commun. ACM},
  Year                     = {2010},

  Month                    = jul,
  Number                   = {7},
  Pages                    = {89--97},
  Volume                   = {53},

  Acmid                    = {1785443},
  Address                  = {New York, NY, USA},
  Doi                      = {10.1145/1785414.1785443},
  File                     = {:x86-TSO- A Rigorous and Usable Programmer's Model for x86 Multiprocessors.pdf:PDF},
  ISSN                     = {0001-0782},
  Issue_date               = {July 2010},
  Numpages                 = {9},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2013.09.05},
  Url                      = {http://doi.acm.org/10.1145/1785414.1785443}
}

@Article{Sewell2010a,
  Title                    = {x86-TSO: a rigorous and usable programmer's model for x86 multiprocessors},
  Author                   = {Sewell, Peter and Sarkar, Susmit and Owens, Scott and Nardelli, Francesco Zappa and Myreen, Magnus O.},
  Journal                  = {Commun. ACM},
  Year                     = {2010},
  Number                   = {7},
  Pages                    = {89--97},
  Volume                   = {53},

  Doi                      = {10.1145/1785414.1785443},
  File                     = {:x86-TSO- A Rigorous and Usable Programmer's Model for x86 Multiprocessors.pdf:PDF},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2012.10.07}
}

@PhdThesis{Sezgin2004,
  Title                    = {Formalization and verification of shared memory},
  Author                   = {Ali Sezgin},
  Year                     = {2004},
  Note                     = {Adviser-Sanesh C. Gopalakrishnan},

  File                     = {:Formalization and verification of shared memory.pdf:PDF},
  Order_no                 = {AAI3137307},
  Publisher                = {The University of Utah},
  Timestamp                = {2008.08.08}
}

@InProceedings{Sezgin2005,
  Title                    = {On the decidability of shared memory consistency verification},
  Author                   = {A. Sezgin and G. Gopalakrishnan},
  Year                     = {2005},

  Address                  = {Los Alamitos, CA, USA},
  Pages                    = {199-208},
  Publisher                = {IEEE Computer Society},
  Volume                   = {0},

  Doi                      = {http://doi.ieeecomputersociety.org/10.1109/MEMCOD.2005.1487915},
  File                     = {:On the decidability of shared memory consistency verification.pdf:PDF},
  Journal                  = {Formal Methods and Models for Co-Design, ACM/IEEE International Conference on},
  Timestamp                = {2008.08.08}
}

@MastersThesis{Shahar1996,
  Title                    = {The TLV System and its Applications},
  Author                   = {Shahar, Elad and Pnueli, Amir},
  Year                     = {1996},

  Comment                  = {CiteSeerX - Scientific Literature Digital Library and Search Engine [http://citeseerx.ist.psu.edu/oai2] (United States)},
  Owner                    = {lvyi},
  Pages                    = {--},
  Refid                    = {http://www.scientificcommons.org/42956981},
  Timestamp                = {2012.12.18}
}

@Article{Shavit2011,
  Title                    = {Data structures in the multicore age},
  Author                   = {Shavit, Nir},
  Journal                  = {Commun. ACM},
  Year                     = {2011},

  Month                    = mar,
  Number                   = {3},
  Pages                    = {76--84},
  Volume                   = {54},

  Acmid                    = {1897873},
  Address                  = {New York, NY, USA},
  Doi                      = {10.1145/1897852.1897873},
  File                     = {:Data Structures in the Multicore Age.pdf:PDF},
  ISSN                     = {0001-0782},
  Issue_date               = {March 2011},
  Numpages                 = {9},
  Owner                    = {lvyi},
  Publisher                = {ACM},
  Timestamp                = {2013.01.25},
  Url                      = {http://doi.acm.org/10.1145/1897852.1897873}
}

@InProceedings{Shen2005,
  Title                    = {CRPG: a configurable random test-program generator for microprocessors},
  Author                   = {Shen, Haihua and Ma, Lin and Zhang, Heng},
  Booktitle                = {Circuits and Systems, 2005. ISCAS 2005. IEEE International Symposium on},
  Year                     = {2005},
  Pages                    = {4171--4174 Vol. 4},

  Abstract                 = {In this paper, we present CRPG, a configurable test-program generator designed for microprocessors. CRPG provides a specification model, which can specify a request that covers the full spectrum between highly directed tests and completely random ones, a test generation engine based on heuristic algorithms, a reference instruction set simulator, and a validation environment, which supports simulation with generated test programs automatically and checks the equivalence of processors and their reference model. CRPG is currently in preliminary use at ICT for the verification of GODSONII - a general RISC microprocessor with more than 2 million logic gates. Experiments show that CRPG can improve the verification process and cut down on skilled manpower requirements considerably.},
  File                     = {:CRPG- a configurable random test-program generator for microprocessors.pdf:PDF},
  Keywords                 = {automatic test pattern generation, formal verification, instruction sets, logic simulation, logic testing, microprocessor chips, reduced instruction set computing, CRPG, RISC microprocessors, automatic test program generation, configurable random test-program generator, configurable specification model, directed tests, heuristic algorithms, processor equivalence checking, processor reference model checking, reference instruction set simulator, test generation engine, validation environment},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InCollection{Sindhu1992,
  Title                    = {Formal Specification of Memory Models},
  Author                   = {Sindhu, PradeepS. and Frailong, Jean-Marc and Cekleov, Michel},
  Booktitle                = {Scalable Shared Memory Multiprocessors},
  Publisher                = {Springer US},
  Year                     = {1992},
  Editor                   = {Dubois, Michel and Thakkar, Shreekant},
  Pages                    = {25-41},

  Doi                      = {10.1007/978-1-4615-3604-8_2},
  File                     = {:Formal Specification of Memory Models.pdf:PDF},
  ISBN                     = {978-1-4613-6601-0},
  Language                 = {English},
  Owner                    = {lvyi},
  Timestamp                = {2014.01.03},
  Url                      = {http://dx.doi.org/10.1007/978-1-4615-3604-8_2}
}

@InProceedings{Sipma1999,
  Title                    = {Deductive Model Checking},
  Author                   = {Sipma, Henny B. and Uribe, Tomás E. and Manna, Zohar},
  Year                     = {1999},
  Month                    = jul,
  Number                   = {1},
  Pages                    = {49--74},
  Volume                   = {15},

  Abstract                 = {We present an extension of classical tableau-based model checking procedures to the case of infinite-state systems, using deductive methods in an incremental construction of the behavior graph. Logical formulas are used to represent infinite sets of states in an abstraction of this graph, which is repeatedly refined in the search for a counterexample computation, ruling out large portions of the graph before they are expanded to the state-level. This can lead to large savings, even in the case of finite-state systems. Only local conditions need to be checked at each step, and previously proven properties can be used to further constrain the search. Although the resulting method is not always automatic, it provides a flexible, general and complete framework that can integrate a diverse number of other verification tools.},
  File                     = {:Deductive Model Checking.pdf:PDF},
  Journal                  = {Formal Methods in System Design},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07},
  Url                      = {http://dx.doi.org/10.1023/A:1008791913551}
}

@Article{Sorin2011,
  Title                    = {A Primer on Memory Consistency and Cache Coherence},
  Author                   = {Sorin, Daniel J. and Hill, Mark D. and Wood, David A.},
  Journal                  = {Synthesis Lectures on Computer Architecture},
  Year                     = {2011},

  Month                    = may,
  Number                   = {3},
  Pages                    = {1--212},
  Volume                   = {6},

  Booktitle                = {Synthesis Lectures on Computer Architecture},
  Comment                  = {doi: 10.2200/S00346ED1V01Y201104CAC016},
  Doi                      = {10.2200/S00346ED1V01Y201104CAC016},
  File                     = {:A Primer on Memory Consistency and Cache Coherence.pdf:PDF},
  ISSN                     = {1935-3235},
  Owner                    = {lvyi},
  Publisher                = {Morgan \& Claypool Publishers},
  Timestamp                = {2012.10.03},
  Url                      = {http://dx.doi.org/10.2200/S00346ED1V01Y201104CAC016}
}

@InProceedings{Stapleton2009,
  Title                    = {Verification problems in reusing internal design components},
  Author                   = {Stapleton, Warren and Tobin, Paul},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {209--211},
  Publisher                = {ACM},

  File                     = {:Verification problems in reusing internal design components.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.09}
}

@InProceedings{Stern2001,
  Title                    = {Parallelizing the Murphi (variant) Verifier},
  Author                   = {Stern, U. and Dill, D. L.},
  Year                     = {2001},
  Pages                    = {117-130--},
  Volume                   = {18},

  Comment                  = {Parallelizing the Murphi (variant) Verifier
204730543
0925-9856},
  Journal                  = {FORMAL METHODS IN SYSTEM DESIGN},
  Owner                    = {lvyi},
  Refid                    = {87},
  Timestamp                = {2008.06.11}
}

@InProceedings{Stern1997,
  Title                    = {Parallelizing the Murphi verifier},
  Author                   = {Stern, U. and Dill, D. L.},
  Year                     = {1997},
  Number                   = {1254},
  Pages                    = {256--},

  Comment                  = {Parallelizing the Murphi verifier
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {88},
  Timestamp                = {2008.06.11}
}

@Article{Straunstrup2000,
  Title                    = {Practical verification of embedded software},
  Author                   = {Straunstrup, J. and Andersen, H.R. and Hulgaard, H. and Lind-Nielsen, J. and Behrmann, G. and Kristoffersen, K. and Skou, A. and Leerberg, HH. and Theilgaard, N.B.},
  Journal                  = {Computer DOI - 10.1109/2.841786},
  Year                     = {2000},
  Number                   = {5},
  Pages                    = {68--75},
  Volume                   = {33},

  Abstract                 = {Using a new verification algorithm called the compositional backward technique, the authors demonstrate that they can exhaustively verify even the largest industrial applications-comprising more than 1,000 components-in a few minutes on a standard PC},
  Booktitle                = {Computer},
  File                     = {:Practical verification of embedded software.pdf:PDF},
  ISSN                     = {0018-9162},
  Keywords                 = {embedded systems, program verification, compositional backward technique, embedded software verification, industrial applications, personal computer, software components},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09}
}

@InProceedings{Suh2004,
  Title                    = {Supporting cache coherence in heterogeneous multiprocessor systems},
  Author                   = {Suh, T. and Blough, D.M. and Lee, H.-H.S.},
  Booktitle                = {Design, Automation and Test in Europe Conference and Exhibition, 2004. Proceedings},
  Year                     = {2004},
  Pages                    = {1150--1155 Vol.2},
  Volume                   = {2},

  File                     = {:Supporting cache coherence in heterogeneous multiprocessor systems.pdf:PDF},
  ISSN                     = {1530-1591},
  Keywords                 = {cache storage, distributed shared memory systems, embedded systems, protocols, system-on-chip, SoC, cache coherence, embedded system on a chip, embedded system programmers, hardware/software methodology, heterogeneous multiprocessor system, protocols, shared memory, software synchronization},
  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@Other{Sun2008,
  Title                    = {Specifying and Verifying Event-Based Fairness Enhanced Systems},
  Abstract                 = {Liveness/Fairness plays an important role in software specification, verification and development. Existing event-based compositional models are safety-centric. In this paper, we describe a framework for systematically specifying and verifying event-based systems under fairness assumptions. We introduce different event annotations to associate fairness constraints with individual events. Fairness annotated events can be used to embed liveness/fairness assumptions in event-based models flexibly and naturally. We show that state-of-the-art verification algorithms can be extended to verify models under fairness assumptions, with little computational overhead. We further improve the algorithm by other model checking techniques like partial order reduction. A toolset named Pat has been developed to verify fairness enhanced event-based systems. Experiments show that Pat handles large systems with multiple fairness assumptions.},
  Author                   = {Sun, Jun and Liu, Yang and Dong, Jin and Wang, Hai},
  File                     = {:Specifying and Verifying Event-Based Fairness Enhanced Systems.pdf:PDF},
  Journal                  = {Formal Methods and Software Engineering},
  Owner                    = {lvyi},
  Pages                    = {5--24},
  Timestamp                = {2009.06.11},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-88194-0_4},
  Year                     = {2008}
}

@InProceedings{Sundell2011,
  Title                    = {A lock-free algorithm for concurrent bags},
  Author                   = {Sundell, H{\aa}kan and Gidenstam, Anders and Papatriantafilou, Marina and Tsigas, Philippas},
  Booktitle                = {Proceedings of the 23rd ACM symposium on Parallelism in algorithms and architectures},
  Year                     = {2011},

  Address                  = {New York, NY, USA},
  Pages                    = {335--344},
  Publisher                = {ACM},
  Series                   = {SPAA '11},

  Acmid                    = {1989550},
  Doi                      = {10.1145/1989493.1989550},
  File                     = {:A Lock-Free Algorithm for Concurrent Bags.pdf:PDF},
  ISBN                     = {978-1-4503-0743-7},
  Keywords                 = {concurrent, data structure, non-blocking, shared memory},
  Location                 = {San Jose, California, USA},
  Numpages                 = {10},
  Owner                    = {lvyi},
  Timestamp                = {2013.01.25},
  Url                      = {http://doi.acm.org/10.1145/1989493.1989550}
}

@PhdThesis{Talupur2006,
  Title                    = {Abstraction Techniques for Parameterized Verification},
  Author                   = {Talupur, Muralidhar},
  School                   = {CARNEGIE-MELLON UNIV PITTSBURGH PA SCHOOL OF COMPUTER SCIENCE},
  Year                     = {2006},

  Abstract                 = {Model checking is a well known formal verification technique that has been particularly successful for finite state systems such as hardware systems. Model checking essentially works by a thorough exploration of the state space of a given system. As such, model checking is not directly applicable to systems with unbounded state spaces like parameterized systems. The standard approach for applying model checking to unbounded systems is to extract finite state models from them using conservative abstraction techniques. Properties of interest can then be verified over the finite abstract models. In this thesis, we propose a novel abstraction technique for model checking parameterized systems. Parameterized systems are systems with replicated processes in which the number of processes is a parameter. This kind of replicated structure is quite common in practice. Standard examples of systems with replicated processes are cache coherence protocols, mutual exclusion protocols, and controllers on automobiles. As the exact number of processes is a parameter, the system is essentially an unbounded system. The abstraction technique we propose, called environment abstraction, tries to simulate the way a human designer thinks about systems with replicated processes. The abstract models we construct are easy to compute and powerful enough to verify properties of interest without giving any spurious counterexamples. We have applied this abstraction method to several well known parameterized systems like cache coherence protocols and mutual exclusion protocols to demonstrate its efficacy. Importantly, we show how to remove a commonly used, but severely restricting assumption, called the atomicity assumption, while verifying parameterized systems.},
  File                     = {:Abstraction Techniques for Parameterized Verification.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.27}
}

@InProceedings{Talupur2008,
  Title                    = {Parametric Verification of Industrial Cache Protocols},
  Author                   = {Murali Talupur and Sava Krstic and John O'Leary and Mark R. Tuttle},
  Booktitle                = {DCC 2008: Proceedings of Workshop on Design of Correct Circuits},
  Year                     = {2008},

  Owner                    = {lvyi},
  Timestamp                = {2009.02.24}
}

@InProceedings{Talupur2008a,
  Title                    = {Going with the Flow: Parameterized Verification Using Message Flows},
  Author                   = {Talupur, M. and Tuttle, M.R.},
  Booktitle                = {Formal Methods in Computer-Aided Design, 2008. FMCAD '08.},
  Year                     = {2008},
  Pages                    = {1--8},

  Abstract                 = {A message flow is a sequence of messages sent among processors during the execution of a protocol, usually illustrated with something like a message sequence chart. Protocol designers use message flows to describe and reason about their protocols. We show how to derive high-quality invariants from message flows and use these invariants to accelerate a state-of-the-art method for parameterized protocol verification called the CMP method. The CMP method works by iteratively strengthening and abstracting a protocol. The labor-intensive portion of the method is finding the protocol invariants needed for each iteration. We provide a new analysis of the CMP method proving it works with any sound abstraction procedure. This facilitates the use of a new abstraction procedure tailored to our protocol invariants in the CMP method. Our experience is that message-flow derived invariants get to the heart of protocol correctness in the sense that only couple of additional invariants are needed for the CMP method to converge.},
  File                     = {:Going with the Flow- Parameterized Verification using Message Flows.pdf:PDF},
  Keywords                 = {formal verification, message passing, CMP method, message flow, message sequence chart, parameterized protocol verification, protocol invariant, sound abstraction},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.13}
}

@InProceedings{Tasiran2003,
  Title                    = {Using a formal specification and a model checker to monitor and direct simulation},
  Author                   = {Tasiran, Serdar and Yu, Yuan and Batson, Brannon},
  Booktitle                = {Proceedings of the 40th conference on Design automation},
  Year                     = {2003},

  Address                  = {Anaheim, CA, USA},
  Pages                    = {356--361},
  Publisher                = {ACM},

  File                     = {:Using a Formal Specification and a Model Checker to Monitor and Direct Simulation.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@InProceedings{Taylor2001,
  Title                    = {A simulation-based method for the verification of shared memory in multiprocessor systems},
  Author                   = {Taylor, Scott and Ramey, Carl and Barner, Craig and Asher, David},
  Booktitle                = {Proceedings of the 2001 IEEE/ACM international conference on Computer-aided design},
  Year                     = {2001},

  Address                  = {San Jose, California},
  Pages                    = {10--17},
  Publisher                = {IEEE Press},

  File                     = {:A simulation-based method for the verification of shared memory in multiprocessor systems.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@Article{Tews2009,
  Title                    = {Formal Memory Models for the Verification of Low-Level Operating-System Code},
  Author                   = {Tews, Hendrik and VÃ¶lp, Marcus and Weber, Tjark},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {189--227},
  Volume                   = {42},

  Abstract                 = {This article contributes to the field of operating-systems verification. It presents a formalization of virtual memory that extends to memory-mapped devices. Our formalization consists of a stack of three detailed formal memory models: physical memory (i.e., RAM), physically-addressable memory-mapped devices (including their respective side effects, access and alignment requirements), and page-table based virtual memory. Each model is formally shown to satisfy the plain-memory specification, a memory abstraction that enables efficient reasoning for type-correct programs. This stack of memory models was developed in an attempt to verify Nova, the Robin micro-hypervisor. It is a key component of our verification environment for operating-system kernels based on the interactive theorem prover PVS.},
  File                     = {:Formal Memory Models for the Verification of Low-Level Operating-System Code.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9122-0}
}

@Article{Tews2008,
  Title                    = {A Formal Model of Memory Peculiarities for the Verification of Low-Level Operating-System Code},
  Author                   = {Tews, Hendrik and Weber, Tjark and VÃ¶lp, Marcus},
  Journal                  = {Electronic Notes in Theoretical Computer Science},
  Year                     = {2008},

  Month                    = jul,
  Number                   = {0},
  Pages                    = {79--96},
  Volume                   = {217},

  Abstract                 = {This paper presents our solutions to some problems we encountered in an ongoing attempt to verify the micro-hypervisor currently developed within the Robin project. The problems that we discuss are (1) efficient automatic reasoning for type-correct programs in virtual memory, and (2) modeling memory-mapped devices with alignment requirements. The discussed solutions are integrated in our verification environment for operating-system kernels in the interactive theorem prover PVS. This verification environment will ultimately be used for the verification of the Robin micro-hypervisor. As a proof of concept we include an example verification of a very simple piece of code in our environment.},
  Booktitle                = {Proceedings of the 3rd International Workshop on Systems Software Veriï¬cation (SSV 2008)},
  Doi                      = {10.1016/j.entcs.2008.06.043},
  File                     = {:A Formal Model of Memory Peculiarities for the Verification of Low-Level Operating-System Code.pdf:PDF},
  ISSN                     = {1571-0661},
  Keywords                 = {operating-system kernel, micro-hypervisor, virtual memory, memory-mapped devices, formal verification},
  Owner                    = {lvyi},
  Timestamp                = {2011.10.10},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S1571066108003861}
}

@InProceedings{Thaker2009,
  Title                    = {Holistic verification: myth or magic bullet?},
  Author                   = {Thaker, Pradip A.},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {204--208},
  Publisher                = {ACM},

  File                     = {:Holistic verification- myth or magic bullet.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.08}
}

@InProceedings{Thomas2002,
  Title                    = {The SLAM project: debugging system software via static analysis},
  Author                   = {Thomas, Ball and Sriram, K. Rajamani},
  Booktitle                = {Proceedings of the 29th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  Year                     = {2002},

  Address                  = {Portland, Oregon},
  Pages                    = {--},
  Publisher                = {ACM},

  Comment                  = {503274},
  Owner                    = {lvyi},
  Refid                    = {17},
  Timestamp                = {2008.06.11}
}

@Article{Thomas2007,
  Title                    = {Automata for XMLâA survey},
  Author                   = {Thomas, Schwentick},
  Journal                  = {Journal of Computer and System Sciences},
  Year                     = {2007},

  Month                    = may,
  Number                   = {3},
  Pages                    = {289--315},
  Volume                   = {73},

  Booktitle                = {Special Issue: Database Theory 2004},
  Doi                      = {10.1016/j.jcss.2006.10.003},
  ISSN                     = {0022-0000},
  Keywords                 = {Semistructured data, XML, Automata},
  Owner                    = {lvyi},
  Timestamp                = {2012.02.25},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S0022000006001085}
}

@InProceedings{Tiwari2001,
  Title                    = {A Technique for Invariant Generation},
  Author                   = {Tiwari, Ashish and Rueb, Harald and Saidi, Hassen and Shankar, Natarajan},
  Booktitle                = {Proceedings of the 7th International Conference on Tools and Algorithms for the Construction and Analysis of Systems},
  Year                     = {2001},
  Pages                    = {113--127},
  Publisher                = {Springer-Verlag},

  File                     = {:A Technique for Invariant Generation.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.06.07}
}

@Article{Tlili2009,
  Title                    = {Interprocedural and Flow-Sensitive Type Analysis for Memory and Type Safety of C Code},
  Author                   = {Tlili, Syrine and Debbabi, Mourad},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {265--300},
  Volume                   = {42},

  Abstract                 = {The explicit memory management and type conversion endow the C language with flexibility and performance that render it the de facto language for system programming. However, these appealing features come at the cost of programsâ safety. Due to the C language permissiveness, highly skilled but inadvertent programmers often spawn insidious programming errors that yield exploitable code. In this paper, we present a novel type and effect analysis for detecting memory and type errors in C source code. We extend the standard C type system with effect, region, and host annotations that hold valuable safety information. We also define static safety checks to detect safety errors using the aforementioned annotations. Our analysis performs in an intraprocedural phase and an interprocedural phase. The flow-sensitive and alias-sensitive intraprocedural phase propagates type annotations and applies safety checks at each program point. The interprocedural phase generates and propagates unification constraints on type annotations across function boundaries. We present an inference algorithm that automatically infers type annotations and applies safety checks to programs without programmersâ interaction.},
  File                     = {:Interprocedural and Flow-Sensitive Type Analysis for Memory and Type Safety of C Code.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9121-1}
}

@InProceedings{Torres-Rojas1999,
  Title                    = {Timed consistency for shared distributed objects},
  Author                   = {Francisco J. Torres-Rojas and Mustaque Ahamad and Michel Raynal},
  Booktitle                = {PODC '99: Proceedings of the eighteenth annual ACM symposium on Principles of distributed computing},
  Year                     = {1999},

  Address                  = {New York, NY, USA},
  Pages                    = {163--172},
  Publisher                = {ACM},

  Doi                      = {http://doi.acm.org/10.1145/301308.301350},
  File                     = {:Timed consistency for shared distributed objects.pdf:PDF},
  ISBN                     = {1-58113-099-6},
  Location                 = {Atlanta, Georgia, United States},
  Timestamp                = {2008.08.08}
}

@InProceedings{Tri&223;l2007,
  Title                    = {Fast and practical indexing and querying of very large graphs},
  Author                   = {Tri\&\#223;l, Silke and Leser, Ulf},
  Booktitle                = {Proceedings of the 2007 ACM SIGMOD international conference on Management of data},
  Year                     = {2007},

  Address                  = {Beijing, China},
  Pages                    = {845--856},
  Publisher                = {ACM},

  Doi                      = {10.1145/1247480.1247573},
  Owner                    = {lvyi},
  Timestamp                = {2012.02.24}
}

@InProceedings{Tsay2008,
  Title                    = {GOAL Extended: Towards a Research Tool for Omega Automata and Temporal Logic},
  Author                   = {Tsay, Yih-Kuen and Chen, Yu-Fang and Tsai, Ming-Hsien and Chan, Wen-Chin and Luo, Chi-Jian},
  Year                     = {2008},
  Pages                    = {346--350},

  Abstract                 = {This paper reports extensions to the GOAL tool that enable it to become a research tool for omega automata and temporal logic. The extensions include an expanded collection of translation, simplification, and complementation algorithms, a command-line mode which makes GOAL functions accessible by programs, and utility functions for such common tasks as file format conversion, random formulae generation, and statistics collection.},
  File                     = {:GOAL Extended- Towards a Research Tool for Omega Automata and Temporal Logic.pdf:PDF},
  Journal                  = {Tools and Algorithms for the Construction and Analysis of Systems},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.01},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-78800-3_26}
}

@Article{Tuch2009,
  Title                    = {Formal Verification of C Systems Code},
  Author                   = {Tuch, Harvey},
  Journal                  = {Journal of Automated Reasoning},
  Year                     = {2009},

  Month                    = apr,
  Number                   = {2},
  Pages                    = {125--187},
  Volume                   = {42},

  Abstract                 = {Systems code is almost universally written in the C programming language or a variant. C has a very low level of type and memory abstraction and formal reasoning about C systems code requires a memory model that is able to capture the semantics of C pointers and types. At the same time, proof-based verification demands abstraction, in particular from the aliasing and frame problems. In this paper we present a study in the mechanisation of two proof abstractions for pointer program verification in the Isabelle/HOL theorem prover, based on a low-level memory model for C. The languageâs type system presents challenges for the multiple independent typed heaps (Burstall-Bornat) and separation logic proof techniques. In addition to issues arising from explicit value size/alignment, padding, type-unsafe casts and pointer address arithmetic, structured types such as Câs arrays and struct s are problematic due to the non-monotonic nature of pointer and lvalue validity in the presence of the unary &-operator. For example, type-safe updates through pointers to fields of a struct break the independence of updates across typed heaps or â§ * -conjuncts. We provide models and rules that are able to cope with these language features and types, eschewing common over-simplifications and utilising expressive shallow embeddings in higher-order logic. Two case studies are provided that demonstrate the applicability of the mechanised models to real-world systems code; a working of the standard in-place list reversal example and an overview of the verification of the L4 microkernelâs memory allocator.},
  File                     = {:Formal Verification of C Systems Code.pdf:PDF},
  ISSN                     = {0168-7433},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Publisher                = {Springer Netherlands},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/s10817-009-9120-2}
}

@InProceedings{Victor2005,
  Title                    = {Functional verification of the POWER5 microprocessor and POWER5 multiprocessor systems},
  Author                   = {Victor, D. W. and Ludden, J. M. and Peterson, R. D. and Nelson, B. S. and Sharp, W. K. and Hsu, J. K. and Chu, B.-L. and Behm, M. L. and Gott, R. M. and Romonosky, A D. and Farago, S. R.},
  Year                     = {2005},
  Number                   = {4/5},
  Pages                    = {541--553},
  Publisher                = {IBM Corp.},
  Volume                   = {49},

  File                     = {:Functional verification of the POWER5 microprocessor and POWER5 multiprocessor systems.pdf:PDF},
  Journal                  = {IBM J. Res. Dev.},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.30}
}

@InProceedings{Visser2003,
  Title                    = {Model Checking Programs},
  Author                   = {Visser, Willem and Havelund, Klaus and Brat, Guillaume and Park, SeungJoon and Lerda, Flavio},
  Year                     = {2003},
  Number                   = {2},
  Pages                    = {203-232--},
  Volume                   = {10},

  Abstract                 = {The majority of work carried out in the formal methods community throughout the last three decades has (for good reasons) been devoted to special languages designed to make it easier to experiment with mechanized formal methods such as theorem provers, proof checkers and model checkers. In this paper we will attempt to give convincing arguments for why we believe it is time for the formal methods community to shift some of its attention towards the analysis of programs written in modern programming languages. In keeping with this philosophy we have developed a verification and testing environment for Java, called Java PathFinder (JPF), which integrates model checking, program analysis and testing. Part of this work has consisted of building a new Java Virtual Machine that interprets Java bytecode. JPF uses state compression to handle big states, and partial order and symmetry reduction, slicing, abstraction, and runtime analysis techniques to reduce the state space. JPF has been applied to a real-time avionics operating system developed at Honeywell, illustrating an intricate error, and to a model of a spacecraft controller, illustrating the combination of abstraction, runtime analysis, and slicing with model checking.},
  Comment                  = {Model Checking Programs
10.1023/A:1022920129859},
  File                     = {:Model Checking Programs.pdf:PDF},
  Journal                  = {Automated Software Engineering},
  Owner                    = {lvyi},
  Refid                    = {26},
  Timestamp                = {2008.06.11},
  Url                      = {http://dx.doi.org/10.1023/A:1022920129859}
}

@InCollection{Wahl2008,
  Title                    = {SVISS : Symbolic Verification of Symmetric Systems: Tools and Algorithms for the Construction and Analysis of Systems},
  Author                   = {Wahl, Thomas and Blanc, Nicolas and Emerson, E.},
  Booktitle                = {Lecture Notes in Computer Science},
  Publisher                = {Springer Berlin / Heidelberg},
  Year                     = {2008},
  Editor                   = {Ramakrishnan, C. and Rehof, Jakob},
  Pages                    = {459--462},
  Volume                   = {4963},

  Abstract                 = {Sviss is a flexible platform for incorporating efficient symmetry reduction into symbolic model checking. The tool comes with an extensive C++ library for system modeling using BDDs and a rich CTL-based model checking engine. Applications range from communication protocols to computer hardware and multi-threaded software. We believe Sviss to be the first symbolic tool to exploit symmetry in concurrent device-driver verification, which is vital in operating system design.},
  File                     = {:SVISS-Symbolic Verification of Symmetric Systems.pdf:PDF},
  ISSN                     = {978-3-540-78799-0},
  Owner                    = {lvyi},
  Timestamp                = {2011.10.10},
  Url                      = {http://dx.doi.org/10.1007/978-3-540-78800-3_34}
}

@InProceedings{Wang2005,
  Title                    = {Automatic assume guarantee analysis for assertion-based formal verification},
  Author                   = {Wang, Dong and Levitt, Jeremy},
  Booktitle                = {Proceedings of the 2005 conference on Asia South Pacific design automation},
  Year                     = {2005},

  Address                  = {Shanghai, China},
  Pages                    = {561--566},
  Publisher                = {ACM},

  File                     = {:Automatic assume guarantee analysis for assertion-based formal verification.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.02.14}
}

@InProceedings{Wang2006,
  Title                    = {Dual Labeling: Answering Graph Reachability Queries in Constant Time},
  Author                   = {Wang, Haixun and He, Hao and Yang, Jun and Yu, P.S. and Yu, J.X.},
  Booktitle                = {Data Engineering, 2006. ICDE '06. Proceedings of the 22nd International Conference on DOI - 10.1109/ICDE.2006.53},
  Year                     = {2006},
  Pages                    = {75--75},

  Owner                    = {lvyi},
  Timestamp                = {2012.02.24}
}

@InProceedings{Whipp2009,
  Title                    = {Exploiting "architecture for verification" to streamline the verification process},
  Author                   = {Whipp, Dave},
  Booktitle                = {Proceedings of the 46th Annual Design Automation Conference},
  Year                     = {2009},

  Address                  = {San Francisco, California},
  Pages                    = {212--215},
  Publisher                = {ACM},

  Doi                      = {http://doi.acm.org/10.1145/1629911.1629970},
  File                     = {:C\:\\papers\\Role of the verification team throughout the ASIC development life cycle.pdf:PDF;:C\:\\papers\\Exploiting architecture for verification to streamline the verification process.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.08}
}

@InProceedings{Wolf2004,
  Title                    = {The future of multiprocessor systems-on-chips},
  Author                   = {Wolf, Wayne},
  Booktitle                = {Proceedings of the 41st annual conference on Design automation},
  Year                     = {2004},

  Address                  = {San Diego, CA, USA},
  Pages                    = {681--685},
  Publisher                = {ACM},

  File                     = {:The future of multiprocessor systems-on-chips.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2009.03.07}
}

@InProceedings{Wolfsthal2005,
  Title                    = {Formal verification: is it real enough?},
  Author                   = {Wolfsthal, Yaron and Gott, Rebecca M.},
  Booktitle                = {Proceedings of the 42nd annual conference on Design automation},
  Year                     = {2005},

  Address                  = {Anaheim, California, USA},
  Pages                    = {670--671},
  Publisher                = {ACM},

  File                     = {:Formal Verification Is It Real Enough.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2008.11.21}
}

@Article{Yang2006,
  Title                    = {Using model checking to find serious file system errors},
  Author                   = {Yang, J. and Twohey, P. and Engler, D. and Musuvathi, M.},
  Journal                  = {ACM Transactions on Computer Systems},
  Year                     = {2006},
  Number                   = {4},
  Pages                    = {393--423},
  Volume                   = {24},

  File                     = {:Using Model Checking to Find Serious File System Errors.pdf:PDF},
  Publisher                = {Association for Computing Machinery, Inc, One Astor Plaza, 1515 Broadway, New York, NY, 10036-5701, USA,},
  Timestamp                = {2009.06.11}
}

@InProceedings{Yang2010,
  Title                    = {A cut-off approach for bounded verification of parameterized systems},
  Author                   = {Yang, Qiusong and Li, Mingshu},
  Booktitle                = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 1},
  Year                     = {2010},

  Address                  = {Cape Town, South Africa},
  Pages                    = {345--354},
  Publisher                = {ACM},

  Doi                      = {10.1145/1806799.1806851},
  File                     = {:A Cut-off Approach for Bounded Verification of Parameterized Systems.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2011.12.13}
}

@Other{Yang2009,
  Title                    = {Automatic Discovery of Transition Symmetry in Multithreaded Programs Using Dynamic Analysis},
  Abstract                 = {While symmetry reduction has been established to be an important technique for reducing the search space in model checking, its application in concurrent software verification is still limited, due to the difficulty of specifying symmetry in realistic software. We propose an algorithm for automatically discovering and applying transition symmetry in multithreaded programs during dynamic model checking. Our main idea is using dynamic program analysis to identify a permutation of variables and labels of the program that entails syntactic equivalence among the residual code of threads and to check whether the local states of threads are equivalent under the permutation. The new transition symmetry discovery algorithm can bring substantial state space savings during dynamic verification of concurrent programs. We have implemented the new algorithm in the dynamic model checker Inspect. Our preliminary experiments show that this algorithm can successfully discover transition symmetries that are hard or otherwise cumbersome to identify manually, and can significantly reduce the model checking time while using Inspect to examine realistic multithreaded applications.},
  Author                   = {Yang, Yu and Chen, Xiaofang and Gopalakrishnan, Ganesh and Wang, Chao},
  File                     = {:Automatic Discovery of Transition Symmetry in Multithreaded Programs Using Dynamic Analysis.pdf:PDF},
  Journal                  = {Model Checking Software},
  Owner                    = {lvyi},
  Pages                    = {279--295},
  Timestamp                = {2010.02.08},
  Url                      = {http://dx.doi.org/10.1007/978-3-642-02652-2_22},
  Year                     = {2009}
}

@Article{Yang2005,
  Title                    = {UMM: An operational memory model specification framework with integrated model checking capability},
  Author                   = {Yang, Y. and Gopalakrishnan, G. and Lindstrom, G.},
  Journal                  = {Concurrency and Computation: Practice and Experience},
  Year                     = {2005},
  Volume                   = {17},

  Publisher                = {John Wiley \& Sons, Ltd. Chichester, UK},
  Timestamp                = {2008.08.08}
}

@InProceedings{Yang2004,
  Title                    = {Nemos: a framework for axiomatic and executable specifications of memory consistency models},
  Author                   = {Yang, Y. and Gopalakrishnan, Ganesh and Lindstrom, G. and Slind, K.},
  Booktitle                = {18th International Parallel and Distributed Processing Symposium, 2004. },
  Year                     = {2004},
  Pages                    = {31-40},

  Abstract                 = {Summary form only given. Conforming to the underlying memory consistency rules is a fundamental requirement for implementing shared memory systems and developing multiprocessor programs. In order to promote understanding and enable automated verification, it is highly desirable that a memory model specification be both declarative and executable. We present a specification framework called Nemos (Nonoperational yet Executable Memory Ordering Specifications), which supports precise specification and automatic execution in the same framework. We employ a uniform notation based on predicate logic to define shared memory semantics in an axiomatic as well as compositional style. We also apply constraint logic programming and SAT solving to make the axiomatic specifications executable for memory model analysis. To illustrate our approach, we formalize a collection of classical memory models, including sequential consistency, coherence, PRAM, causal consistency, and processor consistency.},
  File                     = {:Nemos- a framework for axiomatic and executable specifications of memory consistency models.pdf:PDF},
  Keywords                 = {computability, constraint handling, formal specification, formal verification, multiprocessing programs, shared memory systems, Nemos specification framework, Nonoperational yet Executable Memory Ordering Specifications framework, PRAM, SAT solving, automated verification, axiomatic specifications, causal consistency, coherence, constraint logic programming, executable specifications, memory consistency models, memory consistency rules, memory model specification, multiprocessor programs, predicate logic, processor consistency, sequential consistency, shared memory semantics, shared memory systems},
  Owner                    = {lvyi},
  Timestamp                = {2008.07.29}
}

@InProceedings{Ye2008,
  Title                    = {Efficient Parallelization of a Protein Sequence Comparison Algorithm on Manycore Architecture},
  Author                   = {Xiaochun Ye and Van Hoa Nguyen and Lavenier, D. and Dongrui Fan},
  Booktitle                = {Parallel and Distributed Computing, Applications and Technologies, 2008. PDCAT 2008. Ninth International Conference on},
  Year                     = {2008},
  Pages                    = {167-170},

  Doi                      = {10.1109/PDCAT.2008.28},
  File                     = {:Efficient Parallelization of a Protein Sequence Comparison Algorithm on Manycore Architecture.pdf:PDF},
  Keywords                 = {bioinformatics;microprocessor chips;parallel architectures;proteins;sequences;synchronisation;Godson-T chip;Godson-T manycore architecture;computation intensive bioinformatics application;fine tuning;protein banks;protein sequence comparison algorithm;synchronization mechanism;Application software;Bioinformatics;Computer architecture;Computer displays;Databases;Distributed computing;Genomics;Protein sequence;Scanning probe microscopy;Tiles;Bioinformatics;Manycore;Parallelization;Protein Sequence Comparison},
  Owner                    = {lvyi},
  Timestamp                = {2014.01.24}
}

@Article{Yoo2009,
  Title                    = {Formal Modeling and Verification of Safety-Critical Software},
  Author                   = {Yoo, Junbeom and Jee, Eunkyoung and Cha, Sungdeok},
  Journal                  = {Software, IEEE DOI - 10.1109/MS.2009.67},
  Year                     = {2009},
  Number                   = {3},
  Pages                    = {42--49},
  Volume                   = {26},

  Abstract                 = {Rigorous quality demonstration is important when developing safety-critical software such as a reactor protection system (RPS) for a nuclear power plant. Although using formal methods such as formal modeling and verification is strongly recommended, domain experts often reject formal methods for four reasons: there are too many candidate techniques, the notations appear complex, the tools often work only in isolation, and output is often too difficult for domain experts to understand. A formal-methods-based process that supports development, verification and validation, and safety analysis can help domain experts overcome these obstacles. Nuclear engineers can also use CASE tools to apply formal methods without having to know details of the underlying formalism. The authors spent more than seven years working with nuclear engineers in developing RPS software and applying formal methods. The engineers and regulatory personnel found the process effective and easy to apply with the integrated tool support.},
  Booktitle                = {Software, IEEE},
  File                     = {:Formal Modeling and Verification of Safety-Critical Software.pdf:PDF},
  ISSN                     = {0740-7459},
  Keywords                 = {formal verification, nuclear power stations, power engineering computing, safety-critical software, CASE tools, formal methods, formal modeling, formal verification, nuclear power plant, reactor protection system, safety analysis, safety-critical software},
  Owner                    = {lvyi},
  Timestamp                = {2011.06.09}
}

@Other{Yu2010,
  Title                    = {Graph Reachability Queries: A Survey: Managing and Mining Graph Data},
  Author                   = {Yu, Jeffrey Xu and Cheng, Jiefeng},
  Booktitle                = {The Kluwer International Series on Advances in Database Systems},
  Editor                   = {Aggarwal, Charu C. and Wang, Haixun},
  ISSN                     = {978-1-4419-6045-0},
  Keywords                 = {Computer Science},
  Owner                    = {lvyi},
  Pages                    = {181--215},
  Publisher                = {Springer US},
  Timestamp                = {2012.02.25},
  Url                      = {http://dx.doi.org/10.1007/978-1-4419-6045-0_6},
  Volume                   = {40},
  Year                     = {2010}
}

@Other{Zhang2008,
  Title                    = {Basic research in computer science and software engineering at SKLCS},
  Abstract                 = {The State Key Laboratory of Computer Science (SKLCS) is committed to basic research in computer science and software engineering. The research topics of the laboratory include: concurrency theory, theory and algorithms for real-time systems, formal specifications based on context-free grammars, semantics of programming languages, model checking, automated reasoning, logic programming, software testing, software process improvement, middleware technology, parallel algorithms and parallel software, computer graphics and human-computer interaction. This paper describes these topics in some detail and summarizes some results obtained in recent years.},
  Author                   = {Zhang, Jian and Zhang, Wenhui and Zhan, Naijun and Shen, Yidong and Chen, Haiming and Zhang, Yunquan and Wang, Yongji and Wu, Enhua and Wang, Hongan and Zhu, Xueyang},
  ISSN                     = {1673-7350},
  Journal                  = {Frontiers of Computer Science in China},
  Keywords                 = {Computer Science},
  Month                    = mar,
  Number                   = {1},
  Owner                    = {lvyi},
  Pages                    = {1--11},
  Publisher                = {Higher Education Press, co-published with Springer-Verlag GmbH},
  Timestamp                = {2012.01.05},
  Url                      = {http://dx.doi.org/10.1007/s11704-008-0001-3},
  Volume                   = {2},
  Year                     = {2008}
}

@TechReport{Zhang2011,
  Title                    = {Complexity Issues of Ternary Boolean Diagrams},
  Author                   = {Wenhui Zhang},
  Institution              = {State Key Laboratory of Computer Science, Institute of Software, Chinese Academy of Sciences},
  Year                     = {2011},
  Number                   = {ISCAS-SKLCS-11-53},

  Owner                    = {lvyi},
  Timestamp                = {2012.12.17}
}

@InProceedings{Zhang2007,
  Title                    = {Model Checking with SAT-Based Characterization of ACTL Formulas},
  Author                   = {Zhang, W.},
  Year                     = {2007},
  Number                   = {4789},
  Pages                    = {191-211--},

  Comment                  = {Model Checking with SAT-Based Characterization of ACTL Formulas
3719235
0302-9743},
  Journal                  = {Lecture notes in computer science.},
  Owner                    = {lvyi},
  Refid                    = {76},
  Timestamp                = {2008.06.11}
}

@InProceedings{Zhu2007,
  Title                    = {Synchronization state buffer: supporting efficient fine-grain synchronization on many-core architectures},
  Author                   = {Zhu, Weirong and Sreedhar, Vugranam C and Hu, Ziang and Gao, Guang R.},
  Booktitle                = {Proceedings of the 34th annual international symposium on Computer architecture},
  Year                     = {2007},

  Address                  = {San Diego, California, USA},
  Pages                    = {35--45},
  Publisher                = {ACM},

  File                     = {:Synchronization state buffer- supporting efficient fine-grain synchronization on many-core architectures.pdf:PDF},
  Owner                    = {lvyi},
  Timestamp                = {2010.03.08}
}

@Article{Zuck,
  Title                    = {Model checking and abstraction to the aid of parameterized systems (a survey)},
  Author                   = {Zuck, Lenore and Pnueli, Amir},
  Journal                  = {Computer Languages, Systems \& Structures},

  Month                    = oct,
  Number                   = {3-4},
  Pages                    = {139--169},
  Volume                   = {30},

  Booktitle                = {Analysis and Verification},
  File                     = {:Model checking and abstraction to the aid of parameterized systems.pdf:PDF},
  ISSN                     = {1477-8424},
  Keywords                 = {Parameterized systems, Invisible invariants, Invisible ranking, Counter abstraction, Probabilistic verification, Safety, Liveness, Progress},
  Owner                    = {lvyi},
  Timestamp                = {2009.10.04},
  Url                      = {http://www.sciencedirect.com/science/article/B73H1-4CYCPGC-2/2/81faafcc3ba762c5fe67346470404f8b}
}

@Article{Zhou2013,
  Title                    = {Godson-T缓存一致性协议的Murphi建模和验证},
  Author                   = {周琰},
  Journal                  = {计算机系统应用},
  Year                     = {2013},
  Number                   = {10},
  Pages                    = {124-128},
  Volume                   = {22},

  Owner                    = {lvyi},
  Timestamp                = {2014.03.06}
}

@Article{林惠民、张文辉2002,
  Title                    = {模型检测：理论、方法与应用},
  Author                   = {林惠民、张文辉},
  Journal                  = {电子学报},
  Year                     = {2002},
  Number                   = {12},
  Pages                    = {1907-1912},
  Volume                   = {30},

  Comment                  = {模型检测：理论、方法与应用},
  Owner                    = {lvyi},
  Refid                    = {85},
  Timestamp                = {2009.02.23}
}

@PhdThesis{潘宏2009,
  Title                    = {带参并发系统的模型检测},
  Author                   = {潘宏},
  School                   = {中国科学院软件研究所},
  Year                     = {2009},

  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@Article{王朋宇、陈云霁、沈海华、陈天石、张珩2010,
  Title                    = {片上多核处理器存储一致性验证},
  Author                   = {王朋宇、陈云霁、沈海华、陈天石、张珩},
  Journal                  = {软件学报},
  Year                     = {2010},

  Month                    = {April},
  Number                   = {4},
  Pages                    = {863-874},
  Volume                   = {21},

  Owner                    = {lvyi},
  Timestamp                = {2012.10.07}
}

@PhdThesis{王耀彬2010,
  Title                    = {软硬件协同支持的多核事务存储体系结构},
  Author                   = {王耀彬},
  School                   = {中国科学技术大学},
  Year                     = {2010},

  Owner                    = {lvyi},
  Timestamp                = {2012.10.07}
}

@Article{胡作玄1984,
  Title                    = {布尔巴基学派的兴衰},
  Author                   = {胡作玄},
  Journal                  = {知识出版社},
  Year                     = {1984},
  Volume                   = {73},

  File                     = {:布尔巴基学派的兴衰——现代数学发展的一条主线.pdf:PDF},
  Timestamp                = {2008.06.11}
}

@Book{陈国良、吴俊敏、章锋、章隆兵2002,
  Title                    = {并行计算机体系结构},
  Author                   = {陈国良、吴俊敏、章锋、章隆兵},
  Publisher                = {高等教育出版社},
  Year                     = {2002},

  Owner                    = {lvyi},
  Timestamp                = {2012.10.06}
}

@comment{jabref-meta: groupsversion:3;}

@comment{jabref-meta: groupstree:
0 AllEntriesGroup:;
1 ExplicitGroup:memory consistency model\;0\;Abdulla2007a\;Adir2005\;A
dve1993\;Adve1996\;Alur1996\;Arvind2006\;Atig2010a\;Austin1999\;Baswan
a2008\;Behm2004\;Bingham2003\;Cain2002\;Cain2003\;Cain2004\;Cantin2003
\;Chatterjee2002\;Chatterjee2005\;Chen2008\;Chen2008a\;Chen2009\;Condo
n2003\;DeOrio2009\;Dubois1986\;Gharachorloo1990\;Gharachorloo1996\;Ghu
ghal2000\;Gibbons1994\;Gibbons1997\;Goodman1989\;Gopalakrishnan2004\;H
angal2004\;Hangal2005\;Henzinger1999\;Hu1996\;Hu2005\;Hu2008\;Lamport1
997\;Landin1991\;Leverich2007\;Li2006\;Linder1994\;Lu2004\;Lu2006\;Lu2
008\;Ludden2002a\;Manovit2005\;Manovit2006\;Marurngsith2010\;Matsushit
a2002\;Meixner2005\;Meixner2006\;Mustaque1993\;Papadimitriou1979\;Park
1995\;Paula2006\;Paula2007\;Plakal1998\;Praun2006\;Qadeer2003\;Romanes
cu2010\;Rossi2005\;Roy2006\;Scheurich1987\;Sezgin2004\;Sezgin2005\;She
n2005\;Sorin2011\;Tasiran2003\;Taylor2001\;Torres-Rojas1999\;Victor200
5\;Wolfsthal2005\;Yang2004\;;
1 ExplicitGroup:ranking abstraction\;0\;Balaban2005\;Balaban2006\;Chaw
dhary2008\;Cousot1992\;E1991\;Kesten2000a\;Melton1986\;Podelski2004\;P
odelski2004a\;Podelski2007\;;
1 ExplicitGroup:software model checking\;0\;Beyer2007\;Godefroid1997\;
Havelund2000\;Jhala2009\;Musuvathi2004\;Musuvathi2007\;Musuvathi2008\;
Visser2003\;;
1 ExplicitGroup:symbolic execution\;0\;Balser2002\;Coen-Porisini2001\;
Coward1988\;King1976\;Pasareanu2009\;;
1 ExplicitGroup:embedded software\;0\;Broy2009\;Carvalho2009\;Currie20
06\;DSilva2008\;Ebert2009\;Goethel2010\;Gothel2010\;Graaf2003\;Hsiung2
000\;Karsai2003\;Leroy2009\;Liggesmeyer2009\;Mignolet2009\;Straunstrup
2000\;;
1 ExplicitGroup:Operating System Verification\;0\;Alkassar2009\;Barnes
2010\;Daum2009\;Feng2009\;Gallardo2009\;Galloway2009\;Klein2009\;Klein
2009a\;Klein2010\;Tews2008\;Tews2009\;Tlili2009\;Tuch2009\;Wahl2008\;;
1 ExplicitGroup:Cite\;0\;Ma2011\;Zhang2008\;;
1 ExplicitGroup:memory system verification\;0\;Alglave2010\;Atig2010a\
;Baswana2008\;Beers2005\;Chen2008\;Chen2008a\;DeOrio2009\;Dubois1988\;
Hackenberg2009\;Haring2011\;Herlihy1993\;Iftode1998\;Kuskin1994\;Lenos
ki1990\;Lenoski1992\;Leverich2007\;Papamarcos1984\;Romanescu2010\;Sewe
ll2010a\;Sorin2011\;Suh2004\;潘宏2009\;王朋宇、陈云霁、沈海华、陈天石、张珩2010\;王耀彬2010\;
陈国良、吴俊敏、章锋、章隆兵2002\;;
}

